<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/11/hello-world/"/>
    <url>/2021/01/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++如何在类的构造函数中调用另一个构造函数</title>
    <link href="/2020/07/22/how-to-call-another-constructor-in-cpp/"/>
    <url>/2020/07/22/how-to-call-another-constructor-in-cpp/</url>
    
    <content type="html"><![CDATA[<p>构造函数中调用另一个构造函数，这个操作在Java里其实是很普遍的，在C++里可能就会有点问题了。</p><p>举个例子，现在有这么一段程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DataA</span> &#123;</span><br>  <span class="hljs-keyword">int</span> aa;<br>  <span class="hljs-keyword">int</span> bb;<br>  <span class="hljs-keyword">bool</span> cc;<br>  <span class="hljs-keyword">char</span> dd;<br><br>  DataA(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">bool</span> c, <span class="hljs-keyword">char</span> d) : aa(a), bb(b), cc(c), dd(d) &#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br>  <span class="hljs-keyword">int</span> a_;<br>  <span class="hljs-keyword">int</span> b_;<br>  <span class="hljs-keyword">bool</span> c_;<br><br> <span class="hljs-keyword">public</span>:<br>  A() &#123; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;hello @default ctor!&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; &#125;<br><br>  A(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">bool</span> c) : a_(a), b_(b), c_(c) &#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;hello @ctor 1!&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>  &#125;<br><br>  A(<span class="hljs-keyword">const</span> DataA&amp; data) &#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;hello @ctor 2!&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    A(data.aa, data.bb, data.cc);<br>  &#125;<br><br>  ~A() &#123; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;bye @dtor!&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; &#125;<br><br>  <span class="hljs-keyword">friend</span> <span class="hljs-built_in">std</span>::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(<span class="hljs-built_in">std</span>::ostream&amp; os, <span class="hljs-keyword">const</span> A&amp; a) &#123;<br>    os &lt;&lt; <span class="hljs-string">&quot;a: &quot;</span> &lt;&lt; a.a_ &lt;&lt; <span class="hljs-string">&quot;, b: &quot;</span> &lt;&lt; a.b_ &lt;&lt; <span class="hljs-string">&quot;, c: &quot;</span> &lt;&lt; a.c_;<br>    <span class="hljs-keyword">return</span> os;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>  <span class="hljs-function">DataA <span class="hljs-title">data</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;x&#x27;</span>)</span></span>;<br><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;before new A instance ...&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br><br>  A* a = <span class="hljs-keyword">new</span> A(data);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; *a &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;before delete A instance ...&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">delete</span> a;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>class A</code>拥有两个自定义构造函数，一个接受几个值进行成员初始化，另一个构造函数的本意接受一个结构体常量并进行成员初始化。</p><p>整个程序使用<code>g++ -g b.cpp -o b.out</code>编译是没问题的，但是执行的效果却不是想象中的abc分别为1、2、1，而是0、0、0。输出日志如下。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs smali">before<span class="hljs-built_in"> new </span>A<span class="hljs-built_in"> instance </span>...<br>hello @ctor 2!<br>hello @ctor 1!<br>bye @dtor!<br>a: 0, b: 0, c: 0<br>before delete A<span class="hljs-built_in"> instance </span>...<br>bye @dtor!<br></code></pre></td></tr></table></figure><p><strong>由于构造函数并没有返回值，在构造函数里调用另一个构造函数，只会导致重新声明并初始化一个新的匿名对象，并不会初始化原来的<code>this</code>对象，这个匿名对象在构造函数结束后便销毁了。</strong></p><p>上面日志也可以看出来，在ctor2调用后紧接着调用了ctor1和dtor完成了内部匿名对象的实例化和销毁，用<code>lldb</code>或者<code>gdb</code>调试也可以看的更清楚些。之前编译时已经使用了<code>-g</code>参数加入了调试信息，直接<code>lldb b.out</code>运行加断点即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">(lldb) s<br>hello <span class="hljs-meta">@ctor</span> <span class="hljs-number">2</span>!<br>Process <span class="hljs-number">17565</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = <span class="hljs-string">&#x27;com.apple.main-thread&#x27;</span>, stop reason = step <span class="hljs-keyword">in</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0x0000000100000f85</span> b.<span class="hljs-keyword">out</span>`A::A(<span class="hljs-keyword">this</span>=<span class="hljs-number">0x0000000100304150</span>, <span class="hljs-keyword">data</span>=<span class="hljs-number">0x00007ffeefbff4d0</span>) at b.cpp:<span class="hljs-number">38</span>:<span class="hljs-number">7</span><br>   <span class="hljs-number">35</span><br>   <span class="hljs-number">36</span>     A(<span class="hljs-keyword">const</span> DataA&amp; <span class="hljs-keyword">data</span>) &#123;<br>   <span class="hljs-number">37</span>       std::cout &lt;&lt; <span class="hljs-string">&quot;hello @ctor 2!&quot;</span> &lt;&lt; std::endl;<br>-&gt; <span class="hljs-number">38</span>       A(<span class="hljs-keyword">data</span>.aa, <span class="hljs-keyword">data</span>.bb, <span class="hljs-keyword">data</span>.cc);<br>   <span class="hljs-number">39</span>     &#125;<br>   <span class="hljs-number">40</span><br>   <span class="hljs-number">41</span>     ~A() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;bye @dtor!&quot;</span> &lt;&lt; std::endl; &#125;<br>Target <span class="hljs-number">0</span>: (b.<span class="hljs-keyword">out</span>) stopped.<br>(lldb) p <span class="hljs-keyword">this</span><br>(A *) $<span class="hljs-number">0</span> = <span class="hljs-number">0x0000000100304150</span><br></code></pre></td></tr></table></figure><p>可以看到在使用ctor2构造A实例时，this指针的地址为<code>0x0000000100304150</code>，我们在继续单步执行。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Process <span class="hljs-number">17565</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step <span class="hljs-keyword">in</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0x0000000100001024</span> b.out`A::<span class="hljs-constructor">A(<span class="hljs-params">this</span>=0x00007ffeefbff430, <span class="hljs-params">a</span>=1, <span class="hljs-params">b</span>=2, <span class="hljs-params">c</span>=<span class="hljs-params">true</span>)</span> at b.cpp:<span class="hljs-number">32</span>:<span class="hljs-number">32</span><br>   <span class="hljs-number">29</span>    public:<br>   <span class="hljs-number">30</span>     <span class="hljs-constructor">A()</span> &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;hello @default ctor!&quot;</span> &lt;&lt; std::endl; &#125;<br>   <span class="hljs-number">31</span><br>-&gt; <span class="hljs-number">32</span>     <span class="hljs-constructor">A(<span class="hljs-params">int</span> <span class="hljs-params">a</span>, <span class="hljs-params">int</span> <span class="hljs-params">b</span>, <span class="hljs-params">bool</span> <span class="hljs-params">c</span>)</span> : a<span class="hljs-constructor">_(<span class="hljs-params">a</span>)</span>, b<span class="hljs-constructor">_(<span class="hljs-params">b</span>)</span>, c<span class="hljs-constructor">_(<span class="hljs-params">c</span>)</span> &#123;<br>   <span class="hljs-number">33</span>       std::cout &lt;&lt; <span class="hljs-string">&quot;hello @ctor 1!&quot;</span> &lt;&lt; std::endl;<br>   <span class="hljs-number">34</span>     &#125;<br>   <span class="hljs-number">35</span><br>Target <span class="hljs-number">0</span>: (b.out) stopped.<br>(lldb) p this<br>(A *) $<span class="hljs-number">1</span> = <span class="hljs-number">0x00007ffeefbff430</span><br></code></pre></td></tr></table></figure><p>执行到调用ctor1时，再次打印this指针，发现此时this指向<code>0x00007ffeefbff430</code>，使用<code>bt</code>命令查看调用堆栈也可以看到this指针的变化，可以看到此时类中成员a、b、c的值都是我们所期望的，可惜下一步就消失了。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">(lldb) bt<br>* thread #1,<span class="hljs-built_in"> queue </span>= <span class="hljs-string">&#x27;com.apple.main-thread&#x27;</span>, stop reason = <span class="hljs-keyword">step</span> <span class="hljs-keyword">in</span><br>  * frame #0: 0x0000000100001059 b.out`A::A(<span class="hljs-attribute">this</span>=0x00007ffeefbff430, <span class="hljs-attribute">a</span>=1, <span class="hljs-attribute">b</span>=2, <span class="hljs-attribute">c</span>=<span class="hljs-literal">true</span>) at b.cpp:34:3<br>    frame #1: 0x0000000100000ff0 b.out`A::A(<span class="hljs-attribute">this</span>=0x00007ffeefbff430, <span class="hljs-attribute">a</span>=1, <span class="hljs-attribute">b</span>=2, <span class="hljs-attribute">c</span>=<span class="hljs-literal">true</span>) at b.cpp:32:49<br>    frame #2: 0x0000000100000fac b.out`A::A(<span class="hljs-attribute">this</span>=0x0000000100304150, <span class="hljs-attribute">data</span>=0x00007ffeefbff4d0) at b.cpp:38:5<br>    frame #3: 0x0000000100000e4d b.out`A::A(<span class="hljs-attribute">this</span>=0x0000000100304150, <span class="hljs-attribute">data</span>=0x00007ffeefbff4d0) at b.cpp:36:24<br>    frame #4: 0x0000000100000c4e b.out`main at b.cpp:54:14<br>    frame #5: 0x00007fff6d981cc9 libdyld.dylib`start + 1<br></code></pre></td></tr></table></figure><h3 id="推荐的做法"><a href="#推荐的做法" class="headerlink" title="推荐的做法"></a>推荐的做法</h3><p>那么，应该怎么做才是正确的呢？</p><p>通常推荐做法有两种，一是把通用的初始化逻辑抽出来放到类似<code>init()</code>的函数中实现，在不同构造函数中分别调用；另一种就是利用C++11的新特性：**委托构造函数(delegating constructor)**来实现。</p><p>委托构造函数的语法有点类似成员初始化列表，在构造函数声明之后使用冒号+需要调用的构造函数名即可。上面的<code>class A</code>中现在可以增加一个新的构造函数，委托给<code>ctor 1</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">A(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">bool</span> c) : A(a, <span class="hljs-number">22</span>, c) &#123;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;hello @ctor 3!&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>  b_ = <span class="hljs-number">33</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，被委托的构造函数只能有一个，否则编译会提示错误<code>error: an initializer for a delegating constructor must appear alone</code>。</p><p>使用委托构造函数后，编译需指明C++11版本，即<code>g++ -g b.cpp -o b.out -std=c++11</code>。</p><h3 id="极不推荐的做法"><a href="#极不推荐的做法" class="headerlink" title="极不推荐的做法"></a>极不推荐的做法</h3><p>当然，还有一种<strong>极不推荐</strong>的做法也可以达到目的：<del><code>placement new</code></del>，也就是在已经分配好的内存区域重新实例化对象。cpp-references上有如下说明：</p><blockquote><p>Placement new</p><p>If placement_params are provided, they are passed to the allocation function as additional arguments. Such allocation functions are known as “placement new”, after the standard allocation function void* operator new(std::size_t, void*), which simply returns its second argument unchanged. This is used to construct objects in allocated storage:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">char</span>* ptr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-keyword">sizeof</span>(T)]; <span class="hljs-comment">// allocate memory</span><br>T* tptr = <span class="hljs-keyword">new</span>(ptr) T;            <span class="hljs-comment">// construct in allocated storage (&quot;place&quot;)</span><br>tptr-&gt;~T();                      <span class="hljs-comment">// destruct</span><br><span class="hljs-keyword">delete</span>[] ptr;                    <span class="hljs-comment">// deallocate memory</span><br></code></pre></td></tr></table></figure><p>上面代码中的<code>ctor 2</code>用<code>placement new</code>实现如下：</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">A(<span class="hljs-params">const</span> DataA&amp; <span class="hljs-params">data</span>)</span> &#123;<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;hello @ctor 2!&quot;</span> &lt;&lt; std::endl;<br>  this-&gt;~<span class="hljs-constructor">A()</span>;<br>  <span class="hljs-keyword">new</span> (this) <span class="hljs-constructor">A(<span class="hljs-params">data</span>.<span class="hljs-params">aa</span>, <span class="hljs-params">data</span>.<span class="hljs-params">bb</span>, <span class="hljs-params">data</span>.<span class="hljs-params">cc</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先销毁了原实例，并在原this指针位置构造了一个新的A实例去替代原实例，运行后日志如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs smali">before<span class="hljs-built_in"> new </span>A<span class="hljs-built_in"> instance </span>...<br>hello @ctor 2!<br>bye @dtor!<br>hello @ctor 1!<br>a: 1, b: 2, c: 1<br>before delete A<span class="hljs-built_in"> instance </span>...<br>bye @dtor!<br></code></pre></td></tr></table></figure><p>我们在用lldb调试一下，看一下调用构造函数<code>ctor 1</code>时的堆栈信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">(lldb) bt<br>* thread #1,<span class="hljs-built_in"> queue </span>= <span class="hljs-string">&#x27;com.apple.main-thread&#x27;</span>, stop reason = <span class="hljs-keyword">step</span> <span class="hljs-keyword">in</span><br>  * frame #0: 0x0000000100001184 b.out`A::A(<span class="hljs-attribute">this</span>=0x00000001002052b0, <span class="hljs-attribute">a</span>=1, <span class="hljs-attribute">b</span>=2, <span class="hljs-attribute">c</span>=<span class="hljs-literal">true</span>) at b.cpp:32:32<br>    frame #1: 0x0000000100001150 b.out`A::A(<span class="hljs-attribute">this</span>=0x00000001002052b0, <span class="hljs-attribute">a</span>=1, <span class="hljs-attribute">b</span>=2, <span class="hljs-attribute">c</span>=<span class="hljs-literal">true</span>) at b.cpp:32:49<br>    frame #2: 0x0000000100001113 b.out`A::A(<span class="hljs-attribute">this</span>=0x00000001002052b0, <span class="hljs-attribute">data</span>=0x00007ffeefbff4d0) at b.cpp:39:16<br>    frame #3: 0x0000000100000f9d b.out`A::A(<span class="hljs-attribute">this</span>=0x00000001002052b0, <span class="hljs-attribute">data</span>=0x00007ffeefbff4d0) at b.cpp:36:24<br>    frame #4: 0x0000000100000dbe b.out`main at b.cpp:60:14<br>    frame #5: 0x00007fff6d981cc9 libdyld.dylib`start + 1<br></code></pre></td></tr></table></figure><p>此时，<code>frame #2</code>和<code>frame #1</code>包含的A实例的this指针地址时相同的！可以看到，我们最早期望的目标是达到了，但是，用cpp-references上的原话来说，这种方式是<strong>ill-formed</strong>，病态的。</p><p><strong>使用<code>placement new</code>操作最危险的地方在于，需要编程者自己去注意原空间的分配是否足够、原空间的内存对齐与否会不会对新构造对象产生影响，还需要自己负责去析构实例、去释放空间，因为一旦使用这种方法，除了上帝和编程者，编译器和运行环境是无法检测到这些错误的。</strong></p><p>以上。</p><p>-– END —</p><p>参考链接：<br>1. <a href="https://isocpp.org/wiki/faq/ctors#init-methods" title="Can one constructor of a class call another constructor of the same class to initialize the this object?">https://isocpp.org/wiki/faq/ctors#init-methods</a><br>2. <a href="https://isocpp.org/wiki/faq/dtors#placement-new" title="What is “placement new” and why would I use it?">https://isocpp.org/wiki/faq/dtors#placement-new</a><br>3. <a href="https://www.cnblogs.com/chio/archive/2007/10/20/931043.html" title="从一道题谈C++中构造函数调用构造函数">https://www.cnblogs.com/chio/archive/2007/10/20/931043.html</a></p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>call another constructor</tag>
      
      <tag>cpp</tag>
      
      <tag>delegating constructor</tag>
      
      <tag>placement new</tag>
      
      <tag>委托构造函数</tag>
      
      <tag>调用另一个构造函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS CMake链接Curl静态库找不到ldap相关符号问题</title>
    <link href="/2020/07/09/macos-cmake-static-link-libcurl-ldap-related-undefined-symbols-error/"/>
    <url>/2020/07/09/macos-cmake-static-link-libcurl-ldap-related-undefined-symbols-error/</url>
    
    <content type="html"><![CDATA[<p>具体编译过程和前两篇文章类似，但是在链接<code>libcurl.a</code>的时候出现如下提示：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Undefined symbols <span class="hljs-keyword">for</span> architecture x86_64:<br>  <span class="hljs-string">&quot;_ber_free&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_err2string&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_first_attribute&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_first_entry&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_free_urldesc&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_get_dn&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_get_values_len&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_init&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_memfree&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_msgfree&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_next_attribute&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_next_entry&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_search_s&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_set_option&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_simple_bind_s&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_unbind_s&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_url_parse&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_value_free_len&quot;</span>, referenced <span class="hljs-built_in">from</span>:<br>      _Curl_ldap <span class="hljs-keyword">in</span> libcurl.<span class="hljs-keyword">a</span>(libcurl_la-ldap.o)<br>ld: symbol(s) <span class="hljs-keyword">not</span> found <span class="hljs-keyword">for</span> architecture x86_64<br></code></pre></td></tr></table></figure><p>看上去是找不到<code>ldap</code>相关符号，在Ubuntu上编译没遇到这个问题，查了下资料，<code>LDAP</code>是一种轻量级文件夹访问协议（Lightweight Directory Access Protocol），默认MacOS是支持这个协议的。</p><p>翻了下配置时的输出日志：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">curl version:</span>     <span class="hljs-number">7.70</span><span class="hljs-number">.0</span><br><span class="hljs-attr">SSL:</span>              <span class="hljs-string">enabled</span> <span class="hljs-string">(OpenSSL)</span><br><span class="hljs-attr">SSH:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-&#123;libssh,libssh2&#125;)</span><br><span class="hljs-attr">zlib:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">brotli:</span>           <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-brotli)</span><br><span class="hljs-attr">GSS-API:</span>          <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-gssapi)</span><br><span class="hljs-attr">TLS-SRP:</span>          <span class="hljs-string">enabled</span><br><span class="hljs-attr">resolver:</span>         <span class="hljs-string">POSIX</span> <span class="hljs-string">threaded</span><br><span class="hljs-attr">IPv6:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">Unix sockets:</span>     <span class="hljs-string">enabled</span><br><span class="hljs-attr">IDN:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-&#123;libidn2,winidn&#125;)</span><br><span class="hljs-attr">Build libcurl:</span>    <span class="hljs-string">Shared=no,</span> <span class="hljs-string">Static=yes</span><br><span class="hljs-attr">Built-in manual:</span>  <span class="hljs-string">enabled</span><br><span class="hljs-string">--libcurl</span> <span class="hljs-attr">option:</span> <span class="hljs-string">enabled</span> <span class="hljs-string">(--disable-libcurl-option)</span><br><span class="hljs-attr">Verbose errors:</span>   <span class="hljs-string">enabled</span> <span class="hljs-string">(--disable-verbose)</span><br><span class="hljs-attr">Code coverage:</span>    <span class="hljs-string">disabled</span><br><span class="hljs-attr">SSPI:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-sspi)</span><br><span class="hljs-attr">ca cert bundle:</span>   <span class="hljs-string">/etc/ssl/cert.pem</span><br><span class="hljs-attr">ca cert path:</span>     <span class="hljs-literal">no</span><br><span class="hljs-attr">ca fallback:</span>      <span class="hljs-literal">no</span><br><span class="hljs-attr">LDAP:</span>             <span class="hljs-string">enabled</span> <span class="hljs-string">(OpenLDAP)</span><br><span class="hljs-attr">LDAPS:</span>            <span class="hljs-string">enabled</span><br><span class="hljs-attr">RTSP:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">RTMP:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-librtmp)</span><br><span class="hljs-attr">Metalink:</span>         <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-libmetalink)</span><br><span class="hljs-attr">PSL:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(libpsl</span> <span class="hljs-string">not</span> <span class="hljs-string">found)</span><br><span class="hljs-attr">Alt-svc:</span>          <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-alt-svc)</span><br><span class="hljs-attr">HTTP2:</span>            <span class="hljs-string">disabled</span> <span class="hljs-string">(--with-nghttp2)</span><br><span class="hljs-attr">HTTP3:</span>            <span class="hljs-string">disabled</span> <span class="hljs-string">(--with-ngtcp2,</span> <span class="hljs-string">--with-quiche)</span><br><span class="hljs-attr">ESNI:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-esni)</span><br><span class="hljs-attr">Protocols:</span>        <span class="hljs-string">DICT</span> <span class="hljs-string">FILE</span> <span class="hljs-string">FTP</span> <span class="hljs-string">FTPS</span> <span class="hljs-string">GOPHER</span> <span class="hljs-string">HTTP</span> <span class="hljs-string">HTTPS</span> <span class="hljs-string">IMAP</span> <span class="hljs-string">IMAPS</span> <span class="hljs-string">LDAP</span> <span class="hljs-string">LDAPS</span> <span class="hljs-string">POP3</span> <span class="hljs-string">POP3S</span> <span class="hljs-string">RTSP</span> <span class="hljs-string">SMB</span> <span class="hljs-string">SMBS</span> <span class="hljs-string">SMTP</span> <span class="hljs-string">SMTPS</span> <span class="hljs-string">TELNET</span> <span class="hljs-string">TFTP</span><br><span class="hljs-attr">Features:</span>         <span class="hljs-string">SSL</span> <span class="hljs-string">IPv6</span> <span class="hljs-string">UnixSockets</span> <span class="hljs-string">libz</span> <span class="hljs-string">AsynchDNS</span> <span class="hljs-string">NTLM</span> <span class="hljs-string">NTLM_WB</span> <span class="hljs-string">TLS-SRP</span> <span class="hljs-string">HTTPS-proxy</span><br></code></pre></td></tr></table></figure><p>可以看到<code>LDAP</code>和<code>LDAPS</code>功能都使能了，而且识别到了<code>OpenLDAP</code>，对比了之前文章里的配置，Linux版本编译Curl的时候这两个选项都是<code>no</code>。</p><p>查看了Curl官网上关于编译的简要说明，用<code>curl-config --libs</code>查看需要链接的库，也多了<code>-lldap</code>这一项，因此是链接过程需要指明链接<code>ldap</code>相关库才可以。</p><p>现在有<strong>几种解决方法</strong>：</p><ol><li> 禁用libcurl中ldap相关功能：在<code>./configure</code>配置的时候加上<code>--disable-ldap --disable-ldaps</code>选项。</li><li> 下载ldap源码，像zlib一样编译静态库并链接。</li><li> 链接系统ldap库：添加额外的链接<code>target_link_libraries(my_target -lldap)</code>即可。</li></ol><p>都可以解决问题。</p><p>-– END —</p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
      <tag>curl</tag>
      
      <tag>link error</tag>
      
      <tag>undefined symbols</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim-gutentags插件异常问题解决 &amp; gtags源码编译安装</title>
    <link href="/2020/07/07/ubuntu-vim-gutentags-work-abnormally-solved-with-universal-ctags-and-global-recompiled/"/>
    <url>/2020/07/07/ubuntu-vim-gutentags-work-abnormally-solved-with-universal-ctags-and-global-recompiled/</url>
    
    <content type="html"><![CDATA[<p>在ubuntu上gtags总是运行不正常，<code>ctrl-]</code>无法找到tags，<code>gutentags</code>有报错信息，今天找了下原因，记录下坎坷过程。</p><p>首先在<code>.vimrc</code>中加上<code>let g:gutentags_trace = 1</code>，然后就可以用<code>:messages</code>查看具体出错日志。</p><p>发现<strong>默认<code>exuberant-ctags</code>不支持<code>--output-format=e-ctags</code>，这个参数是给universal-ctags(gtags)用的，因此生成tags数据库出错了。</strong></p><h2 id="apt仓库安装universal-ctags"><a href="#apt仓库安装universal-ctags" class="headerlink" title="apt仓库安装universal-ctags"></a>apt仓库安装universal-ctags</h2><p><strong>在Ubuntu的apt仓库用<code>sudo apt-get install global</code>安装。</strong></p><p>实际运行发现生成tags的时候在<code>~/.cache/tags/xxx_project/</code>目录下有gtags相关文件，<strong>但是始终不去生成<code>~/.cache/tags/xxx_project.tags</code>数据库文件</strong>，这就是找不到tags的原因。</p><h3 id="用snap安装universal-ctags"><a href="#用snap安装universal-ctags" class="headerlink" title="用snap安装universal-ctags"></a>用snap安装universal-ctags</h3><p><strong>用<code>sudo snap install universal-ctags</code>安装。</strong></p><p>实际运行发现生成tags数据库的时候遇到权限错误：</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sml">gutentags: [job stderr]: [<span class="hljs-symbol">&#x27;ctags</span>: cannot <span class="hljs-keyword">open</span> <span class="hljs-built_in">option</span> file <span class="hljs-string">&quot;/home/parallels/.vim/bundle/v</span><br><span class="hljs-string">im-gutentags/res/ctags_recursive.options&quot;</span> : <span class="hljs-type">Permission</span> denied&#x27;, <span class="hljs-string">&#x27;&#x27;</span>]<br></code></pre></td></tr></table></figure><p>把ctags_recursive.options文件的权限改成666或者777，仍然是这个错误，依旧无法生成tags数据库。</p><p>搜了很久在一个网站看到有人遇到相同的问题，似乎是snap上gtags的问题。</p><blockquote><p>This is more of a warning to other users since i discovered the hard-way that universal-ctags installed by snap is NOT compatible with gutentags. For me it manifested as permission errors reading the ctags_recursive.options file, but I could imagine different file perm errors depending on your config. The fs limitations are mentioned at <a href="https://snapcraft.io/universal-ctags">https://snapcraft.io/universal-ctags</a> and in <a href="https://github.com/universal-ctags/ctags-snap/issues/26">https://github.com/universal-ctags/ctags-snap/issues/26</a>. I don’t think there is anything for gutentags to do except maybe include a warning in the doc about snap installed ctags.</p><p>参考：<a href="https://www.bountysource.com/issues/90002621-universal-ctags-installed-by-snap-not-compatible-with-vim-gutentags" title="universal-ctags installed by snap not compatible with vim-gutentags">https://www.bountysource.com/issues/90002621-universal-ctags-installed-by-snap-not-compatible-with-vim-gutentags</a></p></blockquote><h2 id="源码安装universal-ctags"><a href="#源码安装universal-ctags" class="headerlink" title="源码安装universal-ctags"></a>源码安装universal-ctags</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/universal-ctags/ctags.git<br><span class="hljs-built_in">cd</span> ctags<br>./autogen.sh<br>./configure<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>其中，<code>./autogen.sh</code>这一步使用<code>autotools</code>进行配置，依赖<code>autoconf</code>和<code>pk-config</code>包，需要apt安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install autoconf<br>sudo apt-get install pk-config<br></code></pre></td></tr></table></figure><p>编译安装完成之后，默认会装到<code>/usr/local/bin/ctags</code>目录，<code>ctags --version</code>已经可以看到<code>Universal Ctags</code>相关字样了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Universal</span> Ctags <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>(<span class="hljs-number">3671</span>ad<span class="hljs-number">72</span>), Copyright (C) <span class="hljs-number">2015</span> Universal Ctags Team<br><span class="hljs-attribute">Universal</span> Ctags is derived from Exuberant Ctags.<br><span class="hljs-attribute">Exuberant</span> Ctags <span class="hljs-number">5</span>.<span class="hljs-number">8</span>, Copyright (C) <span class="hljs-number">1996</span>-<span class="hljs-number">2009</span> Darren Hiebert<br>  <span class="hljs-attribute">Compiled</span>: May  <span class="hljs-number">7</span> <span class="hljs-number">2020</span>, <span class="hljs-number">17</span>:<span class="hljs-number">26</span>:<span class="hljs-number">30</span><br>  <span class="hljs-attribute">URL</span>: https://ctags.io/<br>  <span class="hljs-attribute">Optional</span> compiled features: +wildcards, +regex, +iconv, +option-directory, +packcc<br></code></pre></td></tr></table></figure><p>然后世界就恢复正常了！tags数据库已经可以正常生成了。</p><h2 id="源码安装gtags（GNU-Global）"><a href="#源码安装gtags（GNU-Global）" class="headerlink" title="源码安装gtags（GNU Global）"></a>源码安装gtags（GNU Global）</h2><p><code>vim-gutentags</code>插件此时还没法用<code>cscope</code>相关命令，搜索符号引用相关功能，还需要<code>gtags</code>支持，即<code>GNU Global</code>，是一套跨环境的源码标签系统（GNU GLOBAL is a source code tagging system that works the same way across diverse environments）。</p><p>可以使用<code>sudo apt-get install global</code>从默认源安装，但是，以防万一，还是源码编译安装好了。</p><p>从<a href="https://www.gnu.org/software/global/download.html" title="Getting GLOBAL">https://www.gnu.org/software/global/download.html</a>官网下载最新软件包，配置、编译并安装。</p><blockquote><p>注意：安装过程中，会依赖<code>curses</code>库，执行<code>./configure</code>的时候会提示<code>curses library is required but not found</code>，需要执行<code>sudo apt-get install libncurses5-dev</code>安装相关库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://tamacom.com/global/global-6.6.4.tar.gz<br>tar xzvf global-6.6.4.tar.gz<br><span class="hljs-built_in">cd</span> global-6.6.4<br><br>./configure --with-universal-ctags=`<span class="hljs-built_in">which</span> ctags` <span class="hljs-comment"># 指定使用universal-ctags路径</span><br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>默认安装到<code>/usr/local/bin/gtags</code>，运行<code>gtags --version</code>，得到如下信息。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gtags</span> (GNU GLOBAL) <span class="hljs-number">6</span>.<span class="hljs-number">6</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">Powered</span> by Berkeley DB <span class="hljs-number">1</span>.<span class="hljs-number">85</span>.<br><span class="hljs-attribute">Copyright</span> (c) <span class="hljs-number">1996</span>-<span class="hljs-number">2019</span> Tama Communications Corporation<br><span class="hljs-attribute">License</span> GPLv<span class="hljs-number">3</span>+: GNU GPL version <span class="hljs-number">3</span> or later &lt;http://www.gnu.org/licenses/gpl.html&gt;<br><span class="hljs-attribute">This</span> is free software; you are free to change and redistribute it.<br><span class="hljs-attribute">There</span> is NO WARRANTY, to the extent permitted by law.<br></code></pre></td></tr></table></figure><p>大功告成！</p><hr><p>最后，附上tags相关的VIM配置。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-string">&quot;&quot;</span>设置标签<span class="hljs-keyword">tags</span><br>set tags=./.tags;,.tags<br><span class="hljs-comment">&quot;设置根据打开文件自动更换目录</span><br><span class="hljs-comment">&quot;set autochdir</span><br><br><span class="hljs-comment">&quot; gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_project_root</span> = [<span class="hljs-string">&#x27;.root&#x27;</span>, <span class="hljs-string">&#x27;.svn&#x27;</span>, <span class="hljs-string">&#x27;.git&#x27;</span>, <span class="hljs-string">&#x27;.hg&#x27;</span>, <span class="hljs-string">&#x27;.project&#x27;</span>]<br><span class="hljs-comment">&quot; 所生成的数据文件的名称</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_tagfile</span> = <span class="hljs-string">&#x27;.tags&#x27;</span><br><br><span class="hljs-comment">&quot; 同时开启 ctags 和 gtags 支持：</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_modules</span> = []<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">executable</span>(<span class="hljs-string">&#x27;ctags&#x27;</span>)<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_modules</span> += [<span class="hljs-string">&#x27;ctags&#x27;</span>]<br><span class="hljs-keyword">endif</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">executable</span>(<span class="hljs-string">&#x27;gtags-cscope&#x27;</span>) &amp;&amp; <span class="hljs-built_in">executable</span>(<span class="hljs-string">&#x27;gtags&#x27;</span>)<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_modules</span> += [<span class="hljs-string">&#x27;gtags_cscope&#x27;</span>]<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment">&quot; 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">s:vim_tags</span> = <span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;~/.cache/tags&#x27;</span>)<br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_cache_dir</span> = <span class="hljs-variable">s:vim_tags</span><br><span class="hljs-string">&quot; 检测 ~/.cache/tags 不存在就新建 &quot;</span><br><span class="hljs-keyword">if</span> !isdirectory(<span class="hljs-variable">s:vim_tags</span>)<br>   silent! <span class="hljs-keyword">call</span> <span class="hljs-built_in">mkdir</span>(<span class="hljs-variable">s:vim_tags</span>, <span class="hljs-string">&#x27;p&#x27;</span>)<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment">&quot; 配置 ctags 的参数</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_extra_args</span> = [<span class="hljs-string">&#x27;--fields=+niazSl&#x27;</span>]<br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_extra_args</span> += [<span class="hljs-string">&#x27;--c++-kinds=+px&#x27;</span>]<br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_extra_args</span> += [<span class="hljs-string">&#x27;--c-kinds=+px&#x27;</span>]<br><br><span class="hljs-comment">&quot; Get ctags version</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ctags_version</span> = <span class="hljs-built_in">system</span>(<span class="hljs-string">&#x27;ctags --version&#x27;</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]<br><br><span class="hljs-comment">&quot; 如果使用 universal ctags 需要增加下面一行</span><br><span class="hljs-keyword">if</span> <span class="hljs-variable">g:ctags_version</span> == <span class="hljs-string">&quot;Universal&quot;</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_extra_args</span> += [<span class="hljs-string">&#x27;--extras=+q&#x27;</span>, <span class="hljs-string">&#x27;--output-format=e-ctags&#x27;</span>]<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment">&quot; 禁用 gutentags 自动加载 gtags 数据库的行为</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_auto_add_gtags_cscope</span> = <span class="hljs-number">1</span><br><span class="hljs-comment">&quot;Change focus to quickfix window after search (optional).</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_plus_switch</span> = <span class="hljs-number">1</span><br><span class="hljs-comment">&quot;Enable advanced commands: GutentagsToggleTrace, etc.</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_define_advanced_commands</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_trace</span> = <span class="hljs-number">0</span><br><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">cscope</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&quot;cscope&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">executable</span>(<span class="hljs-string">&#x27;gtags-cscope&#x27;</span>) &amp;&amp; <span class="hljs-built_in">executable</span>(<span class="hljs-string">&#x27;gtags&#x27;</span>)<br>        <span class="hljs-comment">&quot;禁用原GscopeFind按键映射</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_plus_nomap</span> = <span class="hljs-number">1</span><br>        <span class="hljs-comment">&quot;Find this C symbol 查找C语言符号，即查找函数名、宏、枚举值等出现的地方</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;s :GscopeFind s <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find this difinition 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;g :GscopeFind g <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find functions called by this function 查找本函数调用的函数</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;d :GscopeFind d <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find functions calling this function 查找调用本函数的函数</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">c</span> :GscopeFind <span class="hljs-keyword">c</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find this text string 查找指定的字符串</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;t :GscopeFind t <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find this egrep pattern 查找egrep模式，相当于egrep功能，但查找速度快多了</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">e</span> :GscopeFind <span class="hljs-keyword">e</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find this file 查找并打开文件，类似vim的能</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">f</span> :GscopeFind <span class="hljs-keyword">f</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cfile&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find files #including this file 查找包含本文件的文件</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;i :GscopeFind i ^<span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cfile&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span>$<span class="hljs-symbol">&lt;CR&gt;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">set</span> csto=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">set</span> <span class="hljs-keyword">cst</span><br>        <span class="hljs-keyword">set</span> nocsverb<br>        <span class="hljs-comment">&quot; add any database in current directory</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">filereadable</span>(<span class="hljs-string">&quot;cscope.out&quot;</span>)<br>            <span class="hljs-keyword">cs</span> <span class="hljs-built_in">add</span> <span class="hljs-keyword">cscope</span>.out<br>        <span class="hljs-keyword">endif</span><br>        <span class="hljs-keyword">set</span> csverb<br><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;s :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> s <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;g :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> g <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;d :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> d <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">c</span> :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> <span class="hljs-keyword">c</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;t :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> t <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">e</span> :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> <span class="hljs-keyword">e</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">f</span> :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> <span class="hljs-keyword">f</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cfile&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;i :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> i ^<span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cfile&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span>$<span class="hljs-symbol">&lt;CR&gt;</span><br><br>        <span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;C-F12&gt;</span> :<span class="hljs-keyword">cs</span> <span class="hljs-built_in">add</span> <span class="hljs-keyword">cscope</span>.out<span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;F12用ctags生成tags</span><br>        <span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;F12&gt;</span> :!ctags -R --<span class="hljs-keyword">c</span>++-kinds=+<span class="hljs-keyword">p</span> --fields=+ialS --extra=+q -<span class="hljs-keyword">f</span> .<span class="hljs-keyword">tags</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;--language-force=C++</span><br>        <span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;S-F12&gt;</span> :!cscope -Rbkq<span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot; cscope参数</span><br>        <span class="hljs-comment">&quot;-R: 在生成索引文件时，搜索子目录树中的代码</span><br>        <span class="hljs-comment">&quot;-b: 只生成索引文件，不进入cscope的界面</span><br>        <span class="hljs-comment">&quot;-d: 只调出cscope gui界面，不跟新cscope.out</span><br>        <span class="hljs-comment">&quot;-k: 在生成索引文件时，不搜索/usr/include目录</span><br>        <span class="hljs-comment">&quot;-q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度</span><br>        <span class="hljs-string">&quot;-i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用&quot;</span>-<span class="hljs-comment">&quot;，表示由标准输入获得文件列表。</span><br>        <span class="hljs-comment">&quot;-I dir: 在-I选项指出的目录中查找头文件</span><br>        <span class="hljs-comment">&quot;-u: 扫描所有文件，重新生成交叉索引文件</span><br>        <span class="hljs-comment">&quot;-C: 在搜索时忽略大小写</span><br>        <span class="hljs-comment">&quot;-P path: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用</span><br>    <span class="hljs-keyword">endif</span><br><span class="hljs-keyword">endif</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GNU Global</tag>
      
      <tag>gtags</tag>
      
      <tag>gtags-scope</tag>
      
      <tag>source code compilation</tag>
      
      <tag>Universal Ctags</tag>
      
      <tag>vim</tag>
      
      <tag>vim-gutentags</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake 跨平台交叉编译zlib、OpenSSL、Curl</title>
    <link href="/2020/06/09/cmake-cross-compile-static-zlib-openssl-curl/"/>
    <url>/2020/06/09/cmake-cross-compile-static-zlib-openssl-curl/</url>
    
    <content type="html"><![CDATA[<p>项目遇到跨平台交叉编译的问题，需要针对<code>mips64el</code>架构和<code>aarch64</code>架构进行编译。</p><p>CMake本身支持通过指定交叉编译工具链的方式来完成跨平台编译的，通过<code>cmake -DCMAKE_TOOLCHAIN_FILE=&lt;/path/of/toolchain/file&gt; ..</code>指定交叉编译工具链即可。</p><p>以<code>mips64el.toolchain.cmake</code>为例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">2.6</span>.<span class="hljs-number">3</span>)<br><span class="hljs-keyword">set</span>(CMAKE_SYSTEM_NAME Linux)<br><span class="hljs-keyword">set</span>(CMAKE_SYSTEM_PROCESSOR mips64el)<br><br><span class="hljs-keyword">set</span>(CROSS_COMPILER_PREFIX <span class="hljs-string">&quot;/usr/bin/mips64el-linux-gnuabi64&quot;</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_C_COMPILER             <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-gcc)<br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS                <span class="hljs-string">&quot;-O3 -fPIC&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS_DEBUG          <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -g -Wall&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS_MINSIZEREL     <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -Os -DNDEBUG&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS_RELEASE        <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -O4 -DNDEBUG&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS_RELWITHDEBINFO <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -O2 -g&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_COMPILER             <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-g++)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS                <span class="hljs-string">&quot;-O3 -fPIC&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS_DEBUG          <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -g -Wall&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS_MINSIZEREL     <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -Os -DNDEBUG&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS_RELEASE        <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -O4 -DNDEBUG&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS_RELWITHDEBINFO <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -O2 -g&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_AR      <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-ar)<br><span class="hljs-keyword">set</span>(CMAKE_LINKER  <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-ld)<br><span class="hljs-keyword">set</span>(CMAKE_NM      <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-nm)<br><span class="hljs-keyword">set</span>(CMAKE_OBJDUMP <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-objdump)<br><span class="hljs-keyword">set</span>(CMAKE_RANLIB  <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-ranlib)<br></code></pre></td></tr></table></figure><p>正常无其他第三方依赖库什么的，<code>cmake</code>的时候指定toolchain文件，正常编译，解决编译问题即可。可是，项目还需要解决OpenSSL和Curl的问题。</p><p><strong>注意，toolchain文件里<code>CMAKE_&lt;LANG&gt;_FLAGS</code>相关参数需要加上<code>CACHE</code>缓存，否则，在make编译时并不会生效！</strong> 这个问题是我在编译完zlib链接到项目时发现报错<code>recompile with -fPIC</code>，然后<code>make VERBOSE=1</code>发现编译时cflags为空，<code>-fPIC</code>并没有生效，仔细阅读<code>opencv</code>的<a href="https://github.com/opencv/opencv/blob/master/platforms/linux/arm.toolchain.cmake" title="opencv arm.toolchain.cmake">toolchain</a>后，找到解决方法！</p><h2 id="交叉编译zlib"><a href="#交叉编译zlib" class="headerlink" title="交叉编译zlib"></a>交叉编译zlib</h2><p>首先是OpenSSl和Curl都有用到的zlib编译，上一篇文章<a href="https://wuruofan.com/2020/05/cmake-static-link-openssl-curl/" title="CMake静态链接OpenSSL和Curl">CMake静态链接OpenSSL和Curl</a>，也有介绍如何编译zlib，<a href="https://zlib.net/" title="zlib官网">https://zlib.net</a>下载源码，网络上没看到用CMake编译zlib的文章，其实zlib是支持CMake进行编译的，在zlib源码目录下有CMakelists.txt文件。</p><p>下面介绍两种方法编译<code>mips64el</code>和<code>aarch64</code>架构的zlib库：</p><h3 id="使用CMake交叉编译zlib"><a href="#使用CMake交叉编译zlib" class="headerlink" title="使用CMake交叉编译zlib"></a>使用CMake交叉编译zlib</h3><p>新建build目录，并在build目录下执行如下命令即可，默认动态和静态库都会编译出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmake -DCMAKE_TOOLCHAIN_FILE=/path/of/toolchains/mips64el.toolchain.cmake -DCMAKE_INSTALL_PREFIX=/home/xxx/workspace/cross_compile_libs/mips64el/zlib ..<br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><p>执行上面cmake命令配置toolchain文件后，看到如下类似打印，则代表交叉编译工具找到了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">-- The C compiler identification is GNU <span class="hljs-number">7.5</span><span class="hljs-number">.0</span><br>-- Check <span class="hljs-keyword">for</span> working C compiler: <span class="hljs-regexp">/usr/</span>bin/mips64el-linux-gnuabi64-gcc<br>-- Check <span class="hljs-keyword">for</span> working C compiler: <span class="hljs-regexp">/usr/</span>bin/mips64el-linux-gnuabi64-gcc -- works<br></code></pre></td></tr></table></figure><h3 id="使用传统方法交叉编译zlib"><a href="#使用传统方法交叉编译zlib" class="headerlink" title="使用传统方法交叉编译zlib"></a>使用传统方法交叉编译zlib</h3><p>通常网络上给的方法都是<code>CC=/path/to/compiler LD=/path/to/linker ./config &amp;&amp; make</code>这种方式去做的，其实可以简单点，使用<code>CHOST=</code>完成，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">CHOST=/usr/bin/aarch64-linux-gnu CFLAGS=<span class="hljs-string">&quot;-O3 -fPIC&quot;</span> ./configure --prefix=/home/xxx/workspace/cross_compile_libs/aarch64/zlib<br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://stackoverflow.com/questions/21396988/zlib-build-not-configuring-properly-with-cross-compiler-ignores-ar" title="zlib build not configuring properly with cross compiler, ignores AR?">https://stackoverflow.com/questions/21396988/zlib-build-not-configuring-properly-with-cross-compiler-ignores-ar</a></p></blockquote><h2 id="交叉编译OpenSSL"><a href="#交叉编译OpenSSL" class="headerlink" title="交叉编译OpenSSL"></a>交叉编译OpenSSL</h2><p>可以从<a href="https://github.com/openssl/openssl" title="github OpenSSL仓库">https://github.com/openssl/openssl</a>下载源码，具体的编译方法可以阅读源码根目录的<code>INSTALL</code>文件，查看相关的配置选项。</p><p>执行<code>./Configure --help</code>查看简要的配置选项说明，<code>./Configure LIST</code>查看支持平台架构信息。</p><h3 id="mips64el架构"><a href="#mips64el架构" class="headerlink" title="mips64el架构"></a>mips64el架构</h3><p>指定平台架构为<code>linux64-mips64</code>和相关路径即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">./Configure -fPIC no-shared linux64-mips64 --cross-compile-prefix=/usr/bin/mips64el-linux-gnuabi64- --prefix=/home/xxx/workspace/cross_compile_libs/mips64el/openssl --with-zlib-include=/home/xxx/workspace/cross_compile_libs/mips64el/zlib/include --with-zlib-lib=/home/xxx/workspace/cross_compile_libs/mips64el/zlib/lib<br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><h3 id="aarch64架构"><a href="#aarch64架构" class="headerlink" title="aarch64架构"></a>aarch64架构</h3><p>aarch64架构编译方法类似，但是多了<code>no-asm</code>选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">./Configure -fPIC no-asm no-shared linux-aarch64 --cross-compile-prefix=/usr/bin/aarch64-linux-gnu- --prefix=/home/xxx/workspace/cross_compile_libs/aarch64/openssl --with-zlib-include=/home/xxx/workspace/cross_compile_libs/aarch64/zlib/include --with-zlib-lib=/home/xxx/workspace/cross_compile_libs/aarch64/zlib/lib<br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><h4 id="dangerous-relocation-unsupported-relocation-错误"><a href="#dangerous-relocation-unsupported-relocation-错误" class="headerlink" title="dangerous relocation: unsupported relocation 错误"></a>dangerous relocation: unsupported relocation 错误</h4><p>和<code>mips64el</code>相同参数编译完成OpenSSL后，链接到项目中的时候，会遇到了奇怪的问题，提示如下错误，需要用<code>-fPIC</code>选项重新编译：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nim">relocation <span class="hljs-type">R_AARCH64_PREL64</span> against symbol `<span class="hljs-type">OPENSSL_armcap_P</span>&#x27; which may <span class="hljs-keyword">bind</span> externally can <span class="hljs-keyword">not</span> be used <span class="hljs-keyword">when</span> making a <span class="hljs-literal">shared</span> <span class="hljs-keyword">object</span>; recompile <span class="hljs-keyword">with</span> -fPIC<br>****(.text+<span class="hljs-number">0</span>x**): dangerous relocation: unsupported relocation<br></code></pre></td></tr></table></figure><p>可事实上<code>make VERBOSE=1</code>，是可以看到已经使用<code>-fPIC</code>了的。StackOverFlow上搜索了很久也没看到别人遇到相同的问题，倒是看了一个别的库类似错误的帖子（<a href="https://dev.gnupg.org/T4425" title="libgcrypt relocation error on aarch64">https://dev.gnupg.org/T4425</a>）给了我启发。</p><p>这个网友在aarch64平台静态链接libgcrypt时也遇到了重定位的问题，但是他的问题在某个patch包更新后就消失了，patch包更新仅仅包含汇编代码<code>adr</code>和<code>ldr</code>的变化，如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs diff">diff -uNr libgcrypt-1.8.4/cipher/camellia-aarch64.S libgcrypt-1.8.4_patched/cipher/camellia-aarch64.S<br><span class="hljs-comment">--- libgcrypt-1.8.4/cipher/camellia-aarch64.S   2017-11-23 19:16:58.000000000 +0100</span><br><span class="hljs-comment">+++ libgcrypt-1.8.4_patched/cipher/camellia-aarch64.S   2019-03-22 18:06:37.635546976 +0100</span><br><span class="hljs-meta">@@ -208,7 +208,7 @@</span><br>         *      x3: keybitlen<br>         */<br><br><span class="hljs-deletion">-       adr RTAB1,  _gcry_camellia_arm_tables;</span><br><span class="hljs-addition">+       ldr RTAB1, =_gcry_camellia_arm_tables;</span><br>        mov RMASK, #(0xff&lt;&lt;4); /* byte mask */<br>        add RTAB2, RTAB1, #(1 * 4);<br>        add RTAB3, RTAB1, #(2 * 4);<br><span class="hljs-meta">@@ -251,7 +251,7 @@</span><br>         *      x3: keybitlen<br>         */<br><br><span class="hljs-deletion">-       adr RTAB1,  _gcry_camellia_arm_tables;</span><br><span class="hljs-addition">+       ldr RTAB1, =_gcry_camellia_arm_tables;</span><br>        mov RMASK, #(0xff&lt;&lt;4); /* byte mask */<br>        add RTAB2, RTAB1, #(1 * 4);<br>        add RTAB3, RTAB1, #(2 * 4);<br></code></pre></td></tr></table></figure><p>就联想到是不是平台汇编语言的问题，正好想起文章<a href="https://shadowllife.wordpress.com/2018/05/03/how-to-cross-compile-openssl/" title="How to cross compile OpenSSL">https://shadowllife.wordpress.com/2018/05/03/how-to-cross-compile-openssl/</a>中有个<code>no-asm</code>参数，加上去就OK了。</p><p><code>no-asm</code>参数在<code>INSTALL</code>文件中有说明，表示不使用汇编代码，通常是调试/解决问题时开启的选项，在某些平台即使开启，仍然可能会使用少量汇编代码。</p><p>猜测可能的原因是ARM平台虽然都是<code>aarch64</code>架构，但是具体又会细分各种小平台(比如<code>armv8-a</code>、<code>armv8.1-a</code>等)、各种芯片架构（<code>cortex-a35</code>、<code>cortex-a72</code>等等），如果想使用汇编代码，可能需要更细节芯片架构配置参数才可以，比如<code>-march=</code>、<code>-mtune=</code>。具体配置参数详见<a href="https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/AArch64-Options.html" title="3.18.1 AArch64 Options">https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/AArch64-Options.html</a>，以后有机会再研究。</p><h2 id="交叉编译Curl"><a href="#交叉编译Curl" class="headerlink" title="交叉编译Curl"></a>交叉编译Curl</h2><p><a href="https://curl.haxx.se/" title="Curl官网">https://curl.haxx.se/</a>下载最新7.70版本源码。mips64el和aarch64架构的编译方法一致，指定OpenSSL和zlib库路径和交叉编译工具链路径即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mips64el</span><br>./configure --with-ssl=/home/xxx/workspace/cross_compile_libs/mips64el/openssl --with-zlib=/home/xxx/workspace/cross_compile_libs/mips64el/zlib --disable-shared --target=mips64el-linux-gnuabi64 --host=mips64el-linux-gnuabi64 --prefix=/home/xxx/workspace/cross_compile_libs/mips64el/curl<br><br><span class="hljs-comment"># aarch64</span><br><span class="hljs-comment">#./configure --with-ssl=/home/xxx/workspace/cross_compile_libs/aarch64/openssl --with-zlib=/home/xxx/workspace/cross_compile_libs/aarch64/zlib --disable-shared --target=aarch64-linux-gnu --host=aarch64-linux-gnu --prefix=/home/parallels/workspace/cross_compile_libs/aarch64/curl</span><br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此，交叉编译方法本质上就是指定好交叉编译工具路径，配置好依赖的库和相关参数，并不难，主要交叉编译的目标平台可能会有些奇奇怪怪的问题需要解决。</p><p>-– END —</p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
      <tag>cross compile</tag>
      
      <tag>curl</tag>
      
      <tag>openssl</tag>
      
      <tag>static library</tag>
      
      <tag>toolchain</tag>
      
      <tag>zlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20分钟Markdown入门教程</title>
    <link href="/2020/05/24/20-minutes-markdown-tutorial/"/>
    <url>/2020/05/24/20-minutes-markdown-tutorial/</url>
    
    <content type="html"><![CDATA[<p>Markdown是一种轻量级标记语言，允许人们使用易读易写的纯文本格式编写文档，现在很多Markdown编辑软件还支持各种css（Cascading Style Sheets，层叠样式表）导出成HTML网页或者pdf文件等。</p><p>Markdown原生语法支持富文本的各种基本格式：<strong>加粗</strong>、_斜体_、插入图片、表格、超链接、列表等等，还可以通过扩展语法支持删除线、上^标^、下<del>标</del> 、LaTeX公式、流程图等等。</p><p>另外，Markdown天生支持HTML语法，比如我常用的一段转pdf文件时用的分页代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;page-break-after: always;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>和类似于Microsoft Word这种文本编辑软件相比，Markdown要轻量的太多了，它不需要特别的软件，使用普通记事本就可以编写，只不过最终渲染后文档效果，依赖于具体软件css样式表呈现。</p><h2 id="编辑软件"><a href="#编辑软件" class="headerlink" title="编辑软件"></a>编辑软件</h2><p>我们常在各类软件的安装目录或者源代码目录看到<code>*.md</code>，就是Markdown文档格式。</p><p>你用文本编辑器打开时这就是个普通的文本文件，有些特殊的符号标记，而换成Markdown编辑器打开时就可以看到最终效果了。</p><ul><li><p>  电脑端软件，这里推荐跨平台的免费软件<code>Typora</code>，所见即所得，反应迅速，特别棒。如果简单点，使用印象笔记电脑端也可以新建Markdown，只是时间长了，使用过程中会出现卡顿，好处是各个平台移动端随时查看（无法编辑）比较方便。</p></li><li><p>  Android端，推荐<code>坚果云Markdown</code>、<code>纯纯写作</code>、<code>Memorize</code>，其中只有坚果云Markdown是个单纯的文档编辑软件，后两者一个是写作一个是日记，但对Markdown支持都比较好。之前纯纯写作特价买的，现在比较贵了。</p></li><li><p>  iOS端，推荐<code>坚果云Markdown</code>、<code>小章鱼</code>、<code>MWeb</code>，坚果云的理由还是跨平台同步，MWeb和小章鱼都有自己文档库管理，支持iCloud，MWeb免费版有所限制，没法在网盘创建新文档，但是优势是macOS端软件功能强大。小章鱼真的是让我惊艳，免费软件，界面做的清新优美，和android端的纯纯写作不相伯仲，记得在一开始安装时允许通过邮箱找到，不然会影响iCloud同步，而且似乎找不到重新触发的方式😂。</p></li></ul><p>总的来说，多个平台间同步文档可以用网盘同步文件夹来解决，这时坚果云的优势就出来了，可以把坚果云理解成国内版的dropbox，很强大。</p><h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><h3 id="标题与正文"><a href="#标题与正文" class="headerlink" title="标题与正文"></a>标题与正文</h3><p>Markdown通过<code>#</code>作为前缀表示标题级别，不带修饰的就是正文格式，通常两个回车换行表示新段落，或者说叫一个block块，（也就是段落间有一个空白行）。</p><h1 id="一级标题h1-一级标题"><a href="#一级标题h1-一级标题" class="headerlink" title="一级标题h1 # 一级标题"></a>一级标题h1 <code># 一级标题</code></h1><h2 id="二级标题h2-二级标题"><a href="#二级标题h2-二级标题" class="headerlink" title="二级标题h2 ## 二级标题"></a>二级标题h2 <code>## 二级标题</code></h2><h3 id="三级标题h3-三级标题"><a href="#三级标题h3-三级标题" class="headerlink" title="三级标题h3 ### 三级标题"></a>三级标题h3 <code>### 三级标题</code></h3><h4 id="四级标题h4-四级标题"><a href="#四级标题h4-四级标题" class="headerlink" title="四级标题h4 #### 四级标题"></a>四级标题h4 <code>#### 四级标题</code></h4><h5 id="五级标题h5-五级标题"><a href="#五级标题h5-五级标题" class="headerlink" title="五级标题h5 ##### 五级标题"></a>五级标题h5 <code>##### 五级标题</code></h5><p>这是正常的普通正文格式，需要一个空白行表示分段。</p><p>这是第二段文字。</p><p>另外，markdown并不支持首行缩进，一般这是由渲染预览样式的css实现。如果十分迫切的想要加上首行缩进，可以使用html中的<code>&amp;nbsp;</code>来实现，一个<code>&amp;nbsp;</code>代表一个空格。</p><p>分割线（<code>---</code>）通常一个空行加上用连续的三个以上短横线或者星号表示分割线。注意短横线前面不应有任何字符，包括空格。</p><p>效果如下：</p><hr><h3 id="基本格式与扩展"><a href="#基本格式与扩展" class="headerlink" title="基本格式与扩展"></a>基本格式与扩展</h3><p>类似html语法，markdown也使用前后标记包裹的方式定义文字格式。</p><p><strong>加粗</strong>（<code>**加粗**</code>）、_斜体_（<code>*斜体*</code>）是markdown文档里最常用的强调格式了。</p><p>还有通用扩展语法支持的删除线（删除线）和==高亮==（<code>==高亮==</code>）。</p><p>而上^角标^（<code>上^角标^</code>）和下<del>角标</del>（<code>下~角标~</code>）这些扩展语法和编辑软件支持有关系，并不是很通用，不同编辑器实现并不相同。</p><h3 id="行内代码与代码块"><a href="#行内代码与代码块" class="headerlink" title="行内代码与代码块"></a>行内代码与代码块</h3><p>语法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">`这是行内代码`</span><br><br><span class="hljs-code">```语言名称（c、cpp、java等）</span><br><span class="hljs-code">这是一段代码</span><br><span class="hljs-code">会按照语言名称进行高亮显示</span><br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>### 引用文字<br><br>引用段落以&#96;&gt;&#96;开头，若引用一篇包含多段的文字，建议多段文字以空行间隔开，因为markdown默认以空行作为分段标志，有些软件渲染时会把不加空行的两个段落连接成一段。同时，空行前也加上&#96;&gt;&#96;，否则，会在渲染时视作两个单独段落的引用。<br><br>&#96;&#96;&#96;markdown<br>&gt; 这是一个引用段落。<br>&gt; <br>&gt; 如果引用一个多段文字，建议多段文字以空行间隔，防止不同软件渲染时认为是一段文字。<br><br>&gt; 同时，空行也需要加上&#96;&gt;&#96;，防止不同软件渲染时当作两个段落引用。<br></code></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是一个引用段落。</p><p>如果引用一个多段文字，建议多段文字以空行间隔，防止不同软件渲染时认为是一段文字。</p></blockquote><blockquote><p>同时，空行也需要加上<code>&gt;</code>，防止不同软件渲染时当作两个段落引用。</p></blockquote><h2 id="列表与待办"><a href="#列表与待办" class="headerlink" title="列表与待办"></a>列表与待办</h2><p>列表包括有序列表和无序列表，待办是无序列表的一种。</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 数字+英文句号+空格，就组成了有序列表项的基本元素<br><span class="hljs-bullet">2.</span> 这就是有序列表的示例<br><span class="hljs-bullet">3.</span> 有些软件需要额外空行表示一个列表项结束<br><span class="hljs-bullet">    1.</span> 可以用<span class="hljs-code">`TAB`</span>键缩进，来表示次级列表<br><span class="hljs-bullet">    2.</span> 这是一个次级列表项<br></code></pre></td></tr></table></figure><p>效果如下：</p><ol><li> 数字+英文句号+空格，就组成了有序列表项的基本元素</li><li> 这就是有序列表的示例</li><li>有些软件需要额外空行表示一个列表项结束<ol><li> 可以用<code>TAB</code>键缩进，来表示次级列表</li><li> 这是一个次级列表项</li></ol></li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 无序列表项通常以<span class="hljs-code">`-`</span>、<span class="hljs-code">`+`</span>、<span class="hljs-code">`*`</span>开头，加上空格为起始<br><span class="hljs-bullet">    -</span> 缩进表示次级列表项<br><span class="hljs-bullet">    +</span> 我通常习惯一个级别的无序列表统一一种符号起始，但混用也没关系<br><span class="hljs-bullet">*</span> 待办列表通常以<span class="hljs-code">`- [ ]`</span>加空格为起始，最前面的<span class="hljs-code">`- `</span>便是无序列表的起始，也可以改成<span class="hljs-code">`+`</span>或者<span class="hljs-code">`*`</span><br><span class="hljs-bullet">    -</span> [ ] 中括号中包含空格，表示未完成<br><span class="hljs-bullet">    -</span> [x] 中括号中包含x，则表示已完成<br></code></pre></td></tr></table></figure><p>效果如下：</p><ul><li><p>无序列表项通常以<code>-</code>、<code>+</code>、<code>*</code>开头，加上空格为起始</p><ul><li><p>  缩进表示次级列表项</p></li><li><p>  我通常习惯一个级别的无序列表统一一种符号起始，但混用也没关系</p></li></ul></li><li><p>待办列表通常以<code>- [ ]</code>加空格为起始，最前面的<code>-</code>便是无序列表的起始，也可以改成<code>+</code>或者<code>*</code></p><ul><li>  [ ] 中括号中包含空格，表示未完成</li><li>  [x] 中括号中包含x，则表示已完成</li></ul></li></ul><h2 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>基本的网址超链接，语法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">超链接文本描述</span>](<span class="hljs-link">超链接地址 &quot;超链接提示&quot;</span>)<br>[<span class="hljs-string">必应</span>](<span class="hljs-link">www.bing.com &quot;微软必应&quot;</span>)<br></code></pre></td></tr></table></figure><p>效果如示：<a href="www.bing.com" title="微软必应">必应</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片的本质也是链接，用图片的语法告诉编辑器图片文件的地址，编辑器自己就会处理图片的显示问题。</p><p>语法类似超链接，在之前多一个感叹号：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片名称</span>](<span class="hljs-link">图片路径 &quot;图片提示&quot;</span>)<br>![<span class="hljs-string">I love MD</span>](<span class="hljs-link">https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRN4x6j51UkoIw18k0xO_9lm08qBr060A_wbNLg00zLk0666j7S&amp;usqp=CAU &quot;I love markdown&quot;</span>)<br></code></pre></td></tr></table></figure><p>图片路径可以是本地文件路径，也可以是图片的网址。效果如下：</p><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRN4x6j51UkoIw18k0xO_9lm08qBr060A_wbNLg00zLk0666j7S&usqp=CAU" alt="I love MD" title="I love markdown"></p><h2 id="目录与脚注"><a href="#目录与脚注" class="headerlink" title="目录与脚注"></a>目录与脚注</h2><p>目录和脚注也可以看成是特殊的链接，只不过由编辑器替你实现。</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>目录语法超级简单，会按照标题h1、h2等级别自动生成。但是也得看编辑器支持与否。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[TOC]<br></code></pre></td></tr></table></figure><p>效果如下： [TOC]</p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注的语法特殊一些，包含两个部分：</p><ol><li> 脚注标号，通常在行末加上<code>[^脚注名称]</code>。</li><li> 单独写脚注信息，如<code>[^脚注名称]: 这是一条脚注信息</code>，<strong>注意是英文冒号且后面有一个空格</strong>。</li></ol><p>效果如示：这是一个的脚注示例。[^脚注名称] [^脚注名称]: 这是一行脚注信息。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格的语法用一堆<code>-</code>和表示横线和竖线。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"> 表头1  表头2  <br>---  --- <br> 这是表格内容    上面短横线表示表头的分隔  <br> blablabla    想要更多列就在右侧每行多一个英文竖线  <br></code></pre></td></tr></table></figure><p>效果如下：</p><p>表头1</p><p>表头2</p><p>这是表格内容</p><p>上面短横线表示表头的分隔</p><p>blablabla</p><p>想要更多列就在右侧每行多一个英文竖线</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>这里画流程图使用的是<code>mermaid</code>（🧜‍♀️）库，其实markdown还支持时序图、甘特图等更复杂的图。</p><p>mermaid语法可以看作代码块的扩展，但是mermaid库的支持和编辑器的关系很大，有些不支持有些支持不全，下面示例代码里的语法算是比较通用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">```mermaid // 类似声明代码块语法名</span><br><span class="hljs-code">graph TD   // graph表示流程图，TD表示方向从上到下，LR表示从左到右</span><br><span class="hljs-code">A(这是圆角矩形框) --&gt; 短横线*2加右英文书名号表示直线箭头 B[这是直角矩形框]</span><br><span class="hljs-code">B --&gt; 双竖线内为线上文字 C&#123;这是菱形框&#125;</span><br><span class="hljs-code">C --&gt; 是 D</span><br><span class="hljs-code">C --&gt; 否 E</span><br><span class="hljs-code">E --&gt; F((这是圆形框))</span><br><span class="hljs-code">D --&gt; F</span><br></code></pre></td></tr></table></figure><p>```</p><p>效果如下：</p><p><img src="https://wuruofan.com/wp-content/uploads/2020/05/WX20200531-152922@2x-1-551x1024.png"></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>以上，大概就可以覆盖markdown日常使用99%的场景了，熟练使用之后，你就会发现写文档不用操心格式是多么美妙的一件事情。</p><p>等到使用熟练之后，任何文本编辑器都会是markdown发光发热的地方，你也就可以成为人肉markdown文档渲染器了。</p><p><em>图片来自网络：<a href="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRN4x6j51UkoIw18k0xO%5C_9lm08qBr060A%5C_wbNLg00zLk0666j7S&amp;usqp=CAU">https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRN4x6j51UkoIw18k0xO\_9lm08qBr060A\_wbNLg00zLk0666j7S&amp;usqp=CAU</a></em></p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>20分钟教程</tag>
      
      <tag>markdown</tag>
      
      <tag>教程</tag>
      
      <tag>软件推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake静态链接openssl和curl</title>
    <link href="/2020/05/24/cmake-static-link-openssl-curl/"/>
    <url>/2020/05/24/cmake-static-link-openssl-curl/</url>
    
    <content type="html"><![CDATA[<h3 id="动态链接openssl和curl"><a href="#动态链接openssl和curl" class="headerlink" title="动态链接openssl和curl"></a>动态链接openssl和curl</h3><p>cmake本身提供了对openssl/curl这种大户人家的库的支持，通过<code>find_package</code>命令查找系统安装的openssl/curl库的路径，动态链接的方式如下即可。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># openssl</span><br><span class="hljs-keyword">find_package</span>(OpenSSL REQUIRED)<br><span class="hljs-keyword">if</span>(OPENSSL_FOUND)<br>  <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;OPENSSL_INCLUDE_DIRS&#125;</span>)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;OpenSSL Found!&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># curl</span><br><span class="hljs-keyword">find_package</span>(CURL REQUIRED)<br><br><span class="hljs-keyword">if</span>(CURL_FOUND)<br>  <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CURL_INCLUDE_DIR&#125;</span>)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Curl Found: $&#123;CURL_VERSION_STRING&#125; $&#123;CURL_LIBRARIES&#125; $&#123;CURL_LINK_LIBRARIES&#125;!&quot;</span>)<br><span class="hljs-keyword">else</span>(CURL_FOUND)<br>  <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Could not find the CURL library and development files.&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-keyword">target_link_libraries</span>(target_program <span class="hljs-variable">$&#123;CURL_LIBRARIES&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(target_program OpenSSL::Crypto OpenSSL::SSL)<br></code></pre></td></tr></table></figure><p>由于项目需求需要改成静态链接，其实没太大必要，把需要的动态库一起打包到安装软件，然后指定rpath应该就可以了。</p><p>但是甲方爸爸说了算了啊。🤷‍♂️</p><h4 id="静态链接配置"><a href="#静态链接配置" class="headerlink" title="静态链接配置"></a>静态链接配置</h4><p>Linux发行版仓库安装的openssl和curl都包含了静态和动态库，但是cmake这两个各自启用静态编译的方法不太一样。</p><p>openssl添加<code>set(OPENSSL_USE_STATIC_LIBS TRUE)</code>即可，make时可以看到已经找到静态库。</p><p>curl则需要在include头文件之前添加<code>add_definitions(-DCURL_STATICLIB)</code></p><blockquote><p>参考：</p><ol><li> <a href="https://stackoverflow.com/questions/55165172/static-linking-of-openssl-crypto-in-cmake">Static linking of OpenSSL Crypto in CMake</a></li><li> <a href="https://stackoverflow.com/questions/49778607/c-cmake-compiling-program-with-libcurl">C - Cmake compiling program with libcurl</a></li></ol></blockquote><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"># openssl <span class="hljs-keyword">using</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">library</span><br><span class="hljs-keyword">set</span>(OPENSSL_USE_STATIC_LIBS <span class="hljs-keyword">TRUE</span>)<br><br># curl <span class="hljs-keyword">using</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">library</span><br>add_definitions(-DCURL_STATICLIB)<br></code></pre></td></tr></table></figure><p>但是事实上编译过程中发现curl好像还是动态链接的，编译完成的使用<code>ldd -r target_program</code>，发现还有<code>libcurl.so.4</code>之类字样，似乎没有找到静态库。</p><p>强行指定绝对路径链接<code>libcurl.a</code>的话会爆出找不到定义的错误，因为curl依赖的库也得静态链接才可以，这也说明前面的设置并没有成功静态链接。</p><p><img src="https://wuruofan.com/wp-content/uploads/2020/05/4A47B7DF-6D1C-48FA-9634-1F8FAE521EE1-1.png" alt="4A47B7DF-6D1C-48FA-9634-1F8FAE521EE1"></p><p><code>ls</code>查看curl库所在位置可以看到动态库静态库同时都存在，应该还是配置问题。中间绕了些弯弯发现了<code>$&#123;CMAKE_FIND_LIBRARY_SUFFIXES&#125;</code>选项，本意是设置<code>find_library</code>命令查找库时后缀名的优先级，事实上<code>find_package</code>内部实现就是前者，一开始配置错误，死活没找到静态<code>.a</code>库，在Linux下默认查找顺序是<code>.so;.a</code>，改成如下即可找到并链接静态curl。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">SET(CMAKE_FIND_LIBRARY_SUFFIXES .<span class="hljs-params">lib</span> .<span class="hljs-params">a</span> $&#123;CMAKE_FIND_LIBRARY_SUFFIXES&#125;)</span><br></code></pre></td></tr></table></figure><blockquote><p>参考 <a href="https://stackoverflow.com/questions/28194215/default-values-for-cmake-find-library-prefixes-cmake-find-library-suffixes">Default values for CMAKE_FIND_LIBRARY_PREFIXES/CMAKE_FIND_LIBRARY_SUFFIXES</a></p></blockquote><p>使用<code>curl-config --static-libs</code>可以看到所依赖的其他库有哪些。</p><p><img src="https://wuruofan.com/wp-content/uploads/2020/05/A6B38899-B756-4D92-B19B-79D04B862164-1.png" alt="A6B38899-B756-4D92-B19B-79D04B862164"></p><blockquote><p>参考 <a href="https://stackoverflow.com/questions/36732111/how-to-get-rid-of-libcurl-linking-error">How to get rid of libcurl linking error?</a></p></blockquote><h4 id="源码编译curl静态库"><a href="#源码编译curl静态库" class="headerlink" title="源码编译curl静态库"></a>源码编译curl静态库</h4><p>可以发现，Linux发行版仓库中的curl依赖的其他乱七八糟库过多，不得已还得自己编译，不开启不需要的功能。<a href="https://curl.haxx.se/">curl官网</a>下载最新7.70版本源码，执行<code>./configure --with-ssl --disable-shared</code>之后可以看到配置开启的功能如下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Host setup:</span>       <span class="hljs-string">x86_64-pc-linux-gnu</span><br><span class="hljs-attr">Install prefix:</span>   <span class="hljs-string">/usr/local</span><br><span class="hljs-attr">Compiler:</span>         <span class="hljs-string">gcc</span><br> <span class="hljs-attr">CFLAGS:</span>          <span class="hljs-string">-Werror-implicit-function-declaration</span> <span class="hljs-string">-O2</span> <span class="hljs-string">-Wno-system-headers</span> <span class="hljs-string">-pthread</span><br> <span class="hljs-attr">CPPFLAGS:</span>        <br> <span class="hljs-attr">LDFLAGS:</span>         <br> <span class="hljs-attr">LIBS:</span>            <span class="hljs-string">-lssl</span> <span class="hljs-string">-lcrypto</span> <span class="hljs-string">-lssl</span> <span class="hljs-string">-lcrypto</span> <span class="hljs-string">-lz</span><br><br><span class="hljs-attr">curl version:</span>     <span class="hljs-number">7.70</span><span class="hljs-number">.0</span><br><span class="hljs-attr">SSL:</span>              <span class="hljs-string">enabled</span> <span class="hljs-string">(OpenSSL)</span><br><span class="hljs-attr">SSH:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-&#123;libssh,libssh2&#125;)</span><br><span class="hljs-attr">zlib:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">brotli:</span>           <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-brotli)</span><br><span class="hljs-attr">GSS-API:</span>          <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-gssapi)</span><br><span class="hljs-attr">TLS-SRP:</span>          <span class="hljs-string">enabled</span><br><span class="hljs-attr">resolver:</span>         <span class="hljs-string">POSIX</span> <span class="hljs-string">threaded</span><br><span class="hljs-attr">IPv6:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">Unix sockets:</span>     <span class="hljs-string">enabled</span><br><span class="hljs-attr">IDN:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-&#123;libidn2,winidn&#125;)</span><br><span class="hljs-attr">Build libcurl:</span>    <span class="hljs-string">Shared=no,</span> <span class="hljs-string">Static=yes</span><br><span class="hljs-attr">Built-in manual:</span>  <span class="hljs-string">enabled</span><br><span class="hljs-string">--libcurl</span> <span class="hljs-attr">option:</span> <span class="hljs-string">enabled</span> <span class="hljs-string">(--disable-libcurl-option)</span><br><span class="hljs-attr">Verbose errors:</span>   <span class="hljs-string">enabled</span> <span class="hljs-string">(--disable-verbose)</span><br><span class="hljs-attr">Code coverage:</span>    <span class="hljs-string">disabled</span><br><span class="hljs-attr">SSPI:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-sspi)</span><br><span class="hljs-attr">ca cert bundle:</span>   <span class="hljs-string">/etc/ssl/certs/ca-certificates.crt</span><br><span class="hljs-attr">ca cert path:</span>     <span class="hljs-literal">no</span><br><span class="hljs-attr">ca fallback:</span>      <span class="hljs-literal">no</span><br><span class="hljs-attr">LDAP:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-ldap</span> <span class="hljs-string">/</span> <span class="hljs-string">--with-ldap-lib</span> <span class="hljs-string">/</span> <span class="hljs-string">--with-lber-lib)</span><br><span class="hljs-attr">LDAPS:</span>            <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-ldaps)</span><br><span class="hljs-attr">RTSP:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">RTMP:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-librtmp)</span><br><span class="hljs-attr">Metalink:</span>         <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-libmetalink)</span><br><span class="hljs-attr">PSL:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(libpsl</span> <span class="hljs-string">not</span> <span class="hljs-string">found)</span><br><span class="hljs-attr">Alt-svc:</span>          <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-alt-svc)</span><br><span class="hljs-attr">HTTP2:</span>            <span class="hljs-string">disabled</span> <span class="hljs-string">(--with-nghttp2)</span><br><span class="hljs-attr">HTTP3:</span>            <span class="hljs-string">disabled</span> <span class="hljs-string">(--with-ngtcp2,</span> <span class="hljs-string">--with-quiche)</span><br><span class="hljs-attr">ESNI:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-esni)</span><br><span class="hljs-attr">Protocols:</span>        <span class="hljs-string">DICT</span> <span class="hljs-string">FILE</span> <span class="hljs-string">FTP</span> <span class="hljs-string">FTPS</span> <span class="hljs-string">GOPHER</span> <span class="hljs-string">HTTP</span> <span class="hljs-string">HTTPS</span> <span class="hljs-string">IMAP</span> <span class="hljs-string">IMAPS</span> <span class="hljs-string">POP3</span> <span class="hljs-string">POP3S</span> <span class="hljs-string">RTSP</span> <span class="hljs-string">SMB</span> <span class="hljs-string">SMBS</span> <span class="hljs-string">SMTP</span> <span class="hljs-string">SMTPS</span> <span class="hljs-string">TELNET</span> <span class="hljs-string">TFTP</span><br><span class="hljs-attr">Features:</span>         <span class="hljs-string">SSL</span> <span class="hljs-string">IPv6</span> <span class="hljs-string">UnixSockets</span> <span class="hljs-string">libz</span> <span class="hljs-string">AsynchDNS</span> <span class="hljs-string">NTLM</span> <span class="hljs-string">NTLM_WB</span> <span class="hljs-string">TLS-SRP</span> <span class="hljs-string">HTTPS-proxy</span><br></code></pre></td></tr></table></figure><p>然后，由于我不需要安装，只执行<code>make</code>即可，生成文件路径为<code>./lib/.libs/libcurl.a</code>。我也不知道为什么在隐藏目录下。</p><p>指定链接自己编译生成的<code>libcurl.a</code>可以发现需要的依赖库就少很多了。</p><p><img src="https://wuruofan.com/wp-content/uploads/2020/05/B730BA13-8019-4720-A087-8E2E83F1DCE3-1.png" alt="B730BA13-8019-4720-A087-8E2E83F1DCE3"></p><p>但是仍然缺少<code>zlib</code>、<code>dl</code>和<code>pthread</code>的库支持。后两者都是基本库，添加下面一行即可。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">target<span class="hljs-constructor">_link_libraries(<span class="hljs-params">target_program</span> $&#123;CMAKE_DL_LIBS&#125; -<span class="hljs-params">lpthread</span>)</span><br></code></pre></td></tr></table></figure><h4 id="静态链接zlib"><a href="#静态链接zlib" class="headerlink" title="静态链接zlib"></a>静态链接zlib</h4><p>zlib是提供压缩算法的库，cmake其实也提供了zlib支持，简单如下即可。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">find_package</span><span class="hljs-params">(ZLIB REQUIRED)</span></span><br><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(ZLIB_FOUND)</span></span><br>  message(STATUS <span class="hljs-string">&quot;Zlib Found!&quot;</span>)<br>  include_directories($&#123;ZLIB_INCLUDE_DIR&#125;)<br><span class="hljs-function"><span class="hljs-title">endif</span><span class="hljs-params">()</span></span><br><br><span class="hljs-function"><span class="hljs-title">target_link_libraries</span><span class="hljs-params">(target_program $&#123;ZLIB_LIBRARIES&#125;)</span></span><br></code></pre></td></tr></table></figure><p>由于之前配置了<code>CMAKE_FIND_LIBRARY_SUFFIXES</code>，默认会找到<code>libz.a</code>。</p><p>本来以为OK了，结果还是出了问题：Ubuntu软件仓库里的zlib不支持重定位！静态链接时提示如下错误：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal">/usr/bin/<span class="hljs-symbol">ld:</span> /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">x86_64</span>-<span class="hljs-title">linux</span>-<span class="hljs-title">gnu</span>/<span class="hljs-title">libz</span>.<span class="hljs-title">a</span>(<span class="hljs-title">inflate</span>.<span class="hljs-title">o</span>): <span class="hljs-title">relocation</span> <span class="hljs-title">R_X86_64_PC32</span> <span class="hljs-title">against</span> <span class="hljs-title">symbol</span> `<span class="hljs-title">inflateReset</span>&#x27; <span class="hljs-title">can</span> <span class="hljs-title">not</span> <span class="hljs-title">be</span> <span class="hljs-title">used</span> <span class="hljs-title">when</span> <span class="hljs-title">making</span> <span class="hljs-title">a</span> <span class="hljs-title">shared</span> <span class="hljs-title">object</span>;</span> recompile <span class="hljs-keyword">with</span> -fPIC<br>/usr/bin/<span class="hljs-symbol">ld:</span> final link <span class="hljs-symbol">failed:</span> Bad value<br></code></pre></td></tr></table></figure><p>没办法还是需要源码编译zlib时开启<code>-fPIC</code>支持才可以，<a href="https://zlib.net/">zlib官网</a>下载源码，源码目录下执行<code>CFLAGS=&quot;-O3 -fPIC&quot; ./configure &amp;&amp; make</code>即可，生成<code>libz.a</code>文件就在当前目录下，指定链接终于可以成功编译啦！</p><h4 id="动态链接和静态链接生成库依赖对比"><a href="#动态链接和静态链接生成库依赖对比" class="headerlink" title="动态链接和静态链接生成库依赖对比"></a>动态链接和静态链接生成库依赖对比</h4><p>我们再使用<code>ldd -r target_program</code>对比一下动态链接和静态链接的库，可以发现静态链接后依赖的库要少很多。</p><p><img src="https://wuruofan.com/wp-content/uploads/2020/05/C9E063C4-7B08-42DC-A074-8B9663C9B2A8-1.png" alt="C9E063C4-7B08-42DC-A074-8B9663C9B2A8"></p><p>⬆️动态链接</p><p><img src="https://wuruofan.com/wp-content/uploads/2020/05/2A5B9081-700D-4D3F-A00F-B27EB2395702-1.png" alt="2A5B9081-700D-4D3F-A00F-B27EB2395702"></p><p>⬆️静态链接</p><h4 id="最终版CMakelists-txt"><a href="#最终版CMakelists-txt" class="headerlink" title="最终版CMakelists.txt"></a>最终版CMakelists.txt</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include</span>(CMakeDependentOption)<br><br><span class="hljs-comment"># static link curl &amp; openssl</span><br><span class="hljs-keyword">option</span>(LINK_CURL_OPENSSL_STATIC <span class="hljs-string">&quot;Using static curl &amp; openssl library&quot;</span> <span class="hljs-keyword">ON</span>)<br>cmake_dependent_option(CUSTOM_CURL_STATIC <span class="hljs-string">&quot;Using prebuilt static curl library&quot;</span> <span class="hljs-keyword">ON</span><br>        <span class="hljs-string">&quot;LINK_CURL_OPENSSL_STATIC&quot;</span> <span class="hljs-keyword">OFF</span>)<br>cmake_dependent_option(CUSTOM_ZLIB_STATIC <span class="hljs-string">&quot;Using prebuilt static zlib library&quot;</span> <span class="hljs-keyword">ON</span><br>        <span class="hljs-string">&quot;LINK_CURL_OPENSSL_STATIC&quot;</span> <span class="hljs-keyword">OFF</span>)<br><br><span class="hljs-keyword">if</span>(LINK_CURL_OPENSSL_STATIC)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Using static curl &amp; openssl library!&quot;</span>)<br>  <span class="hljs-keyword">add_definitions</span>(-DCURL_STATICLIB)<br>  <span class="hljs-keyword">SET</span>(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a <span class="hljs-variable">$&#123;CMAKE_FIND_LIBRARY_SUFFIXES&#125;</span>)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;CMAKE_FIND_LIBRARY_SUFFIXES: &quot;</span> <span class="hljs-variable">$&#123;CMAKE_FIND_LIBRARY_SUFFIXES&#125;</span>)<br>  <span class="hljs-keyword">set</span>(OPENSSL_USE_STATIC_LIBS <span class="hljs-keyword">TRUE</span>)<br><span class="hljs-keyword">else</span>()<br><span class="hljs-comment">#  set(CUSTOM_CURL_STATIC OFF)</span><br><span class="hljs-comment">#  set(CUSTOM_ZLIB_STATIC OFF)</span><br><span class="hljs-keyword">endif</span>()<br><br><br><span class="hljs-comment"># openssl</span><br><span class="hljs-keyword">find_package</span>(OpenSSL REQUIRED)<br><span class="hljs-keyword">if</span>(OPENSSL_FOUND)<br>  <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;OPENSSL_INCLUDE_DIRS&#125;</span>)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;OpenSSL Found!&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># curl</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> CUSTOM_CURL_STATIC)<br>  <span class="hljs-keyword">find_package</span>(CURL REQUIRED)<br><br>  <span class="hljs-keyword">if</span>(CURL_FOUND)<br>    <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CURL_INCLUDE_DIR&#125;</span>)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Curl Found: $&#123;CURL_VERSION_STRING&#125; $&#123;CURL_LIBRARIES&#125; $&#123;CURL_LINK_LIBRARIES&#125;!&quot;</span>)<br>    <span class="hljs-keyword">set</span>(curl_library <span class="hljs-variable">$&#123;CURL_LIBRARIES&#125;</span>)<br>  <span class="hljs-keyword">else</span>(CURL_FOUND)<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Could not find the CURL library and development files.&quot;</span>)<br>  <span class="hljs-keyword">endif</span>()<br><span class="hljs-keyword">else</span>()<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Using custom compiled static library: libcurl.a !&quot;</span>)<br>  <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PREBUILTS_BASE_DIRECTORY&#125;</span>/<span class="hljs-variable">$&#123;PLATFORM_NAME&#125;</span>/<span class="hljs-keyword">include</span>/)<br>  <span class="hljs-keyword">set</span>(curl_library <span class="hljs-variable">$&#123;PREBUILTS_LIB_DERECTORY&#125;</span>/curl/libcurl.a)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># zlib</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> CUSTOM_ZLIB_STATIC)<br>  <span class="hljs-keyword">find_package</span>(ZLIB REQUIRED)<br>  <span class="hljs-keyword">if</span>(ZLIB_FOUND)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Zlib Found!&quot;</span>)<br>    <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;ZLIB_INCLUDE_DIR&#125;</span>)<br>    <span class="hljs-keyword">set</span>(zlib_library <span class="hljs-variable">$&#123;ZLIB_LIBRARIES&#125;</span>)<br>  <span class="hljs-keyword">endif</span>()<br><span class="hljs-keyword">else</span>()<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Using custom compiled static library: libz.a !&quot;</span>)<br>  <span class="hljs-keyword">set</span>(zlib_library <span class="hljs-variable">$&#123;PREBUILTS_LIB_DERECTORY&#125;</span>/zlib/libz.a)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-keyword">target_link_libraries</span>(target_program <span class="hljs-variable">$&#123;curl_library&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(target_program OpenSSL::Crypto OpenSSL::SSL)<br><br><span class="hljs-keyword">if</span>(LINK_CURL_OPENSSL_STATIC)<br>  <span class="hljs-keyword">target_link_libraries</span>(target_program <span class="hljs-variable">$&#123;zlib_library&#125;</span>)<br>  <span class="hljs-keyword">target_link_libraries</span>(target_program <span class="hljs-variable">$&#123;CMAKE_DL_LIBS&#125;</span> -lpthread)<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><p>上面的CMakelists提供了3个配置参数:</p><ul><li>  <code>LINK_CURL_OPENSSL_STATIC</code>：默认开启，静态链接curl和openssl。</li><li>  <code>CUSTOM_CURL_STATIC</code>：默认开启，使用工程目录下预编译的libcurl.a。</li><li>  <code>CUSTOM_ZLIB_STATIC</code>：默认开启，使用工程目录下预编译的libzlib.a。</li></ul><p>正常<code>cmake .. &amp;&amp; make</code>，会静态链接curl、openssl、zlib，其中curl和zlib使用预编译版本。使用<code>cmake -DCUSTOM_CURL_STATIC=OFF -DCUSTOM_ZLIB_STATIC=OFF .. &amp;&amp; make</code>来使用默认系统安装的静态版本。</p><p>使用<code>cmake -DLINK_CURL_OPENSSL_STATIC=OFF .. &amp;&amp; make</code>，则会使用动态链接curl和openssl。</p><p>-– END —</p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
      <tag>curl</tag>
      
      <tag>openssl</tag>
      
      <tag>static link</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake学习笔记</title>
    <link href="/2020/05/11/cmake-learning-note/"/>
    <url>/2020/05/11/cmake-learning-note/</url>
    
    <content type="html"><![CDATA[<blockquote><p>CMake是个一个开源的跨平台自动化建构系统，用来管理软件建置的程序，并不依赖于某特定编译器，并可支持多层目录、多个应用程序与多个库。</p><p>CMake并不直接建构出最终的软件，而是产生标准的建构档（如Unix的Makefile或Windows Visual C++的projects/workspaces），然后再依一般的建构方式使用。这使得熟悉某个集成开发环境（IDE）的开发者可以用标准的方式建构他的软件，这种可以使用各平台的原生建构系统的能力是CMake和SCons等其他类似系统的区别之处。</p><p>“CMake”这个名字是”Cross platform Make”的缩写。虽然名字中含有”make”，但是CMake和Unix上常见的“make”系统是分开的，而且更为高端。 它可与原生建置环境结合使用，例如：make、苹果的Xcode与微软的Visual Studio。</p><p>——以上，摘自维基百科：<a href="https://zh.wikipedia.org/wiki/CMake">CMake</a></p></blockquote><p>以下是在做Windows版本程序迁移至Linux平台遇到的一些问题，记录下来。</p><hr><h3 id="获取系统信息"><a href="#获取系统信息" class="headerlink" title="获取系统信息"></a>获取系统信息</h3><p><code>$&#123;CMAKE_SYSTEM&#125;</code>、<code>$&#123;CMAKE_SYSTEM_NAME&#125;</code> 需要在 <code>project(xxx)</code> 之后使用，否则为空。</p><p><code>$&#123;CMAKE_HOST_SYSTEM_NAME&#125;</code> 可以在 <code>project(xxx)</code> 之前使用，获取结果类似于 <code>uname -s</code>命令。</p><hr><h3 id="install路径设置"><a href="#install路径设置" class="headerlink" title="install路径设置"></a>install路径设置</h3><p><code>cmake -DCMAKE_INSTALL_PREFIX=&lt; install_path &gt; ..</code>或者在CMakelists.txt里<code>SET(CMAKE_INSTALL_PREFIX &lt; install_path &gt;)</code></p><p><strong>需要在 <code>project(xxx)</code>之前设置，否则无效！</strong></p><p>或者使用cmake手册中的方法，可以在<code>project(xxx)</code>之后设置。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">if</span>(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)<br>  <span class="hljs-keyword">set</span>(CMAKE_INSTALL_PREFIX <span class="hljs-string">&quot;/my/default&quot;</span> CACHE PATH <span class="hljs-string">&quot;...&quot;</span> FORCE)<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><hr><h3 id="变量设置失效的问题"><a href="#变量设置失效的问题" class="headerlink" title="变量设置失效的问题"></a>变量设置失效的问题</h3><p>遇到奇怪的现象，就是我在根目录的CMakelists.txt里配置了<code>$&#123;CMAKE_INSTALL_PREFIX&#125;</code>和<code>$CMAKE_BUILD_TYPE&#125;</code>，但是在<code>rm -r *</code>清空build目录，<strong>重新</strong><code>cmake ..</code>执行到配置<code>install</code>相关选项的时候会遇到打印这两个变量值变为默认值<code>/usr/local</code>和空的问题。</p><p>第二次执行<code>cmake ..</code>这两个变量值就OK了。</p><p>有时修改CMakelists之后，再执行<code>make install</code>看到打印</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">Install</span> the <span class="hljs-keyword">project</span>...<br>-- <span class="hljs-keyword">Install</span> configuration: <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>查了下资料和CMake的缓存机制有关。</p><blockquote><p>参考 <a href="https://xyz1001.xyz/articles/53989.html">CMake”变量污染”</a></p></blockquote><p>在build目录下有一个CMakeCache.txt，里面会缓存一些配置信息，用于第二次编译加速，但是有些值会从Cache中去读，在第二次运行时<code>set()</code>并不会更新Cache的缓存，需要加上强制写缓存的设置才可以。</p><p>CMake手册上对<code>set()</code>有说明：</p><blockquote><p><code>set(&lt;variable&gt; &lt;value&gt;... CACHE &lt;type&gt; &lt;docstring&gt; [FORCE])</code></p><p>其中，<code>&lt;type&gt;</code>值如下：</p><ul><li>  <code>BOOL</code>: Boolean ON/OFF value. cmake-gui(1) offers a checkbox.</li><li>  <code>FILEPATH</code>: Path to a file on disk. cmake-gui(1) offers a file dialog.</li><li>  <code>PATH</code>: Path to a directory on disk. cmake-gui(1) offers a file dialog.</li><li>  <code>STRING</code>: A line of text. cmake-gui(1) offers a text field or a drop-down selection if the STRINGS cache entry property is set.</li><li>  <code>INTERNAL</code>: A line of text. cmake-gui(1) does not show internal entries. They may be used to store variables persistently across runs. Use of this type implies FORCE.</li></ul><p><code>&lt;docstring&gt;</code>是说明字符串，用于<code>cmake-gui</code>展示。must be specified as a line of text providing a quick summary of the option for presentation to cmake-gui(1) users.</p></blockquote><p>因此，改为如下就OK了。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(CMAKE_INSTALL_PREFIX <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/<span class="hljs-keyword">install</span> CACHE PATH <span class="hljs-string">&quot;install prefix&quot;</span> FORCE)<br><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE <span class="hljs-string">&quot;Release&quot;</span> CACHE <span class="hljs-keyword">STRING</span> <span class="hljs-string">&quot;build type&quot;</span> FORCE)<br></code></pre></td></tr></table></figure><hr><h3 id="链接动态库时使用相对路径rpath-using-relatived-path"><a href="#链接动态库时使用相对路径rpath-using-relatived-path" class="headerlink" title="链接动态库时使用相对路径rpath using relatived path"></a>链接动态库时使用相对路径rpath using relatived path</h3><blockquote><p><a href="https://blog.csdn.net/i7thTool/article/details/80718559">CMAKE和RPATH</a></p><p><a href="https://stackoverflow.com/questions/43330165/how-to-link-a-shared-library-with-cmake-with-relative-path">How to link a shared library with CMake with relative path</a></p><p><a href="https://blog.csdn.net/ktigerhero3/article/details/68941252">linux下生成动态链接库并使用（使用cmake）</a></p></blockquote><p><code>rpath</code>指的是<code>runpath</code>，Unix系统运行可执行程序时默认搜索所需要动态库的路径，链接器ld搜索路径的优先级是这样的：</p><ol><li><p> <code>RPATH</code>，编译链接时加入 -rpath 参数指明所谓的 RUNPATH ，这样可执行文件（或者依赖其他动态链接库的动态链接库）就能告诉 ld.so 到哪里去搜索对应的动态链接库了。</p></li><li><p> <code>LD_LIBRARY_PATH</code> ，对于没有设定 RPATH 的可执行文件或者动态链接库，我们可以用 <code>LD_LIBRARY_PATH</code> 这个环境变量通知 ld.so 往哪里查找链接库。</p></li><li><p> <code>/etc/ld.so.conf</code>，系统对 ld.so 的路径配置文件。</p></li><li><p> <code>/usr/lib</code> 、 <code>/lib</code> 和 <code>/usr/local/lib</code>，系统默认路径。</p></li></ol><p>关于rpath，CMake默认设置为：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># use, i.e. don&#x27;t skip the full RPATH for the build tree</span><br><span class="hljs-keyword">SET</span>(CMAKE_SKIP_BUILD_RPATH  <span class="hljs-keyword">FALSE</span>)<br><br><span class="hljs-comment"># when building, don&#x27;t use the install RPATH already</span><br><span class="hljs-comment"># (but later on when installing)</span><br><span class="hljs-keyword">SET</span>(CMAKE_BUILD_WITH_INSTALL_RPATH <span class="hljs-keyword">FALSE</span>) <br><br><span class="hljs-comment"># the RPATH to be used when installing</span><br><span class="hljs-keyword">SET</span>(CMAKE_INSTALL_RPATH <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># don&#x27;t add the automatically determined parts of the RPATH</span><br><span class="hljs-comment"># which point to directories outside the build tree to the install RPATH</span><br><span class="hljs-keyword">SET</span>(CMAKE_INSTALL_RPATH_USE_LINK_PATH <span class="hljs-keyword">FALSE</span>)<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">## On platforms that support runtime paths (RPATH) with the $ORIGIN token, setting CMAKE_BUILD_RPATH_USE_ORIGIN to TRUE enables relative paths in the build RPATH for executables and shared libraries that point to shared libraries in the same build tree.</span><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_RPATH_USE_ORIGIN <span class="hljs-keyword">true</span>)<br><span class="hljs-keyword">set</span>(CMAKE_INSTALL_RPATH <span class="hljs-string">&quot;$ORIGIN&quot;</span>)<br><br><span class="hljs-comment">## Do not include RPATHs in the build tree.</span><br><span class="hljs-keyword">set</span>(CMAKE_SKIP_BUILD_RPATH <span class="hljs-keyword">FALSE</span>)<br><span class="hljs-comment">## Use the install path for the RPATH.</span><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_WITH_INSTALL_RPATH <span class="hljs-keyword">FALSE</span>)<br><span class="hljs-comment">## Add paths to linker search and installed rpath.</span><br><span class="hljs-keyword">set</span>(CMAKE_INSTALL_RPATH_USE_LINK_PATH <span class="hljs-keyword">TRUE</span>)<br><br></code></pre></td></tr></table></figure><p>或者，设置链接属性包含<code>$ORIGIN</code>路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">SET</span>(CMAKE_EXE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -Wl,-rpath -Wl,$ORIGIN&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h3 id="MacOS下编译遇到找不到OpenSSL的问题"><a href="#MacOS下编译遇到找不到OpenSSL的问题" class="headerlink" title="MacOS下编译遇到找不到OpenSSL的问题"></a>MacOS下编译遇到找不到OpenSSL的问题</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">CMake Error at <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>cmake<span class="hljs-regexp">/3.17.1/</span>share<span class="hljs-regexp">/cmake/M</span>odules/FindPackageHandleStandardArgs.cmake:<span class="hljs-number">164</span> (message):<br>  Could NOT <span class="hljs-keyword">find</span> OpenSSL, <span class="hljs-keyword">try</span> to set the path to OpenSSL root folder in the<br>  system variable OPENSSL_ROOT_DIR (missing: OPENSSL_INCLUDE_DIR)<br><span class="hljs-keyword">Call</span> Stack (most recent <span class="hljs-keyword">call</span> first):<br>  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>cmake<span class="hljs-regexp">/3.17.1/</span>share<span class="hljs-regexp">/cmake/M</span>odules/FindPackageHandleStandardArgs.cmake:<span class="hljs-number">445</span> (_FPHSA_FAILURE_MESSAGE)<br>  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>cmake<span class="hljs-regexp">/3.17.1/</span>share<span class="hljs-regexp">/cmake/M</span>odules/FindOpenSSL.cmake:<span class="hljs-number">450</span> (find_package_handle_standard_args)<br>  src/CMakeLists.txt:<span class="hljs-number">44</span> (find_package)<br></code></pre></td></tr></table></figure><blockquote><p>参考<a href="https://github.com/udacity/CarND-PID-Control-Project/issues/2">https://github.com/udacity/CarND-PID-Control-Project/issues/2</a></p></blockquote><p>解决方案是 <code>cmake ..</code> 时加上参数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cmake -DOPENSSL_ROOT_DIR=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>openssl<span class="hljs-regexp">/1.0.2k -DOPENSSL_LIBRARIES=/u</span>sr<span class="hljs-regexp">/local/</span>Cellar<span class="hljs-regexp">/openssl/</span><span class="hljs-number">1.0</span>.<span class="hljs-number">2</span>k/lib ..<br></code></pre></td></tr></table></figure><hr><h3 id="option选项"><a href="#option选项" class="headerlink" title="option选项"></a>option选项</h3><p>CMake支持自定义编译选项，语法：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">option</span>(&lt;variable&gt; <span class="hljs-string">&quot;&lt;help_text&gt;&quot;</span> [value])<br></code></pre></td></tr></table></figure><p>注意双引号内的字符串是变量的说明注解并不是值！ 通常value为<code>ON</code>/<code>OFF</code>，如果不设置值，则默认为<code>OFF</code>。</p><p>之前就犯傻了，直接把<code>set(USE_FAKE_SCS &quot;on&quot;)</code>改成<code>option</code>就出问题了。</p><hr><h3 id="add-custom-command-add-custom-target执行命令"><a href="#add-custom-command-add-custom-target执行命令" class="headerlink" title="add_custom_command/add_custom_target执行命令"></a><code>add_custom_command</code>/<code>add_custom_target</code>执行命令</h3><p>使用<code>add_custom_command</code>/<code>add_custom_target</code>的<code>COMMAND</code>参数执行命令时<strong>只能执行<code>cmake -E</code>支持的系统命令</strong>，解压文件的话只能使用<code>tar</code>不能用<code>unzip</code>。</p><p>在终端下执行<code>cmake -E</code>可以查看支持哪些命令。</p><p>另外，<code>add_custom_command</code>/<code>add_custom_target</code>的<code>WORKING_DIRECTORY</code>参数指定目录时，实际会先<code>cd</code>到该目录，因此需实现保证该目录存在。</p><hr><h3 id="cmake创建目录"><a href="#cmake创建目录" class="headerlink" title="cmake创建目录"></a>cmake创建目录</h3><blockquote><p>参考 <a href="https://stackoverflow.com/questions/3702115/creating-a-directory-in-cmake">creating-a-directory-in-cmake</a></p></blockquote><ul><li><p>生成编译目录时创建</p><blockquote><p>我理解是<code>cmake ..</code>时创建。</p></blockquote>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">file</span>(<span class="hljs-keyword">MAKE_DIRECTORY</span> <span class="hljs-variable">$&#123;directory&#125;</span>)<br></code></pre></td></tr></table></figure></li><li><p>编译时创建</p><blockquote><p><code>make</code>时创建</p></blockquote>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_custom_target</span>(build-time-make-directory ALL<br>  <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;CMAKE_COMMAND&#125;</span> -E <span class="hljs-keyword">make_directory</span> <span class="hljs-variable">$&#123;directory&#125;</span>)<br></code></pre></td></tr></table></figure></li><li><p>安装时创建</p><blockquote><p><code>make install</code>时创建</p></blockquote>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">install</span>(DIRECTORY DESTINATION <span class="hljs-variable">$&#123;directory&#125;</span>)<br></code></pre></td></tr></table></figure></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术总结</tag>
      
      <tag>CMake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用dotfiles管理配置文件</title>
    <link href="/2020/04/13/using-dotfiles-repo-to-backup/"/>
    <url>/2020/04/13/using-dotfiles-repo-to-backup/</url>
    
    <content type="html"><![CDATA[<p>之前也是无意中看到别的大佬github上的dotfiles仓库了解到dotfiles这个名次，后来专门搜索了一下，其实原理很简单，就是把常用的软件配置文件都集中在一个git仓库里管理备份，然后通过软链接的形式把这些配置文件安放到合适的位置。</p><p>由于那些Unix系统中的配置文件通常以<code>.</code>(英文：dot)开头，以隐藏文件的形式保存在用户的主目录(home目录)下，所以这个仓库被成为<code>dotfiles</code>。</p><p>这和我之前用Dropbox或Google Drive备份配置思路差不多，只不过缺少了<code>ln -s</code>软链接的过程。</p><p>今天趁着搭建Ubuntu下开发环境的机会，我也实践了一把dotfiles管理。其实说实话，像我这种被同事戏称开发前得先治病的强迫症患者，dotfiles真香。</p><p>整理下MacOS和Ubuntu下公用的软件，vim、zsh、git这三个是必需品，以前还备份过Ubuntu Compiz软件的各种特效、主题图标之类的，实在折腾不动了。</p><p>整理完的目录结构大致如下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">dotfiles</span><br>├── <span class="hljs-selector-tag">README</span><span class="hljs-selector-class">.md</span><br>├── <span class="hljs-selector-tag">git</span><br>│   ├── _<span class="hljs-selector-tag">git-completion</span><span class="hljs-selector-class">.bash</span><br>│   └── _<span class="hljs-selector-tag">gitconfig</span><br>├── <span class="hljs-selector-tag">link</span><span class="hljs-selector-class">.sh</span><br>├── <span class="hljs-selector-tag">sh</span><br>│   └── _<span class="hljs-selector-tag">shrc</span><span class="hljs-selector-class">.local</span><span class="hljs-selector-class">.bak</span><br>├── <span class="hljs-selector-tag">vim</span><br>│   ├── _<span class="hljs-selector-tag">vimrc</span><br>│   ├── <span class="hljs-selector-tag">nvim</span><br>│   │   └── <span class="hljs-selector-tag">init</span><span class="hljs-selector-class">.vim</span><br>│   └── <span class="hljs-selector-tag">plugins</span><span class="hljs-selector-class">.vim</span><br>└── <span class="hljs-selector-tag">zsh</span><br>    ├── _<span class="hljs-selector-tag">zshrc</span><br>    ├── <span class="hljs-selector-tag">agnoster-rfw</span><span class="hljs-selector-class">.zsh-theme</span><br>    └── <span class="hljs-selector-tag">install_zsh_plugins</span><span class="hljs-selector-class">.sh</span><br></code></pre></td></tr></table></figure><p>git主要就<code>～/.gitconfig</code>文件，这里有一些我的奇怪的alias配置；<code>.git-completion.bash</code>主要防止在某些版本，git之后无法自动补全子命令，需要在终端启动脚本（具体文件和使用终端程序有关）里加载（<code>source</code>）一下。</p><p>sh中的<code>.shrc.local</code>主要是我本地的开发环境有些环境变量的配置，我会在终端的启动脚本里加载，由于这些变量和本机的目录有关，暂时以备份文件的形式，当一个模版使用。</p><p>vim是多年的老伙计了，最近投入了neovim的怀抱，有些配置为了兼容还是保留在<code>.vimrc</code>里；neovim的默认启动脚本为<code>~/.config/nvim/init.vim</code>，这里简单处理加载了vim的环境信息;<code>plugins.vim</code>是我自己使用插件的合集，用于<code>vim-plug</code>插件管理器读取，vim第一次运行时就会自动下载安装<code>plugins.vim</code>中的插件。</p><p><img src="https://wuruofan.com/wp-content/uploads/2020/04/1586773876193-1024x833.jpg"></p><p>neovim起始页</p><p>zsh也是最近新欢，比老伙计<code>bash</code>多了很多贴心功能，而且主题皮肤很多（适合我这种闷骚的强迫症），<code>.zshrc</code>是其主要配置文件，<code>agnoster-rfw.zsh-theme</code>是我修改的<code>agnoster</code>主题，<code>install_zsh_plugins.sh</code>包含了著名zsh插件组合<code>oh-my-zsh</code>、<code>zsh autosuggestions</code>、<code>zsh syntax highlighting</code>插件安装的命令。</p><p><img src="https://wuruofan.com/wp-content/uploads/2020/04/WX20200413-183310@2x-1024x520.png"></p><p>zsh终端</p><p><code>link.sh</code>就是我简单写的<code>ln -s</code>命令合集，需要<code>sudo ./link.sh</code>执行，实现功能就是将各个文件放置到合适的目录中去，做的好一些的话可以添加一些交互式操作，让用户选择链接哪些文件，以后再完善吧。</p><p>我的dotfiles仓库地址如下：<a href="https://github.com/wuruofan/dotfiles.git">dotfiles.git</a>，基本可以即开即用。</p><p>以Ubuntu 18.04为例。</p><ol><li> vim</li></ol><p>推荐安装<code>neovim</code>，使用上和vim普通没有什么区别，有些neovim专用的插件。使用<code>sudo apt-get install neovim</code>安装。</p><p>由于第一次运行会执行<code>curl</code>去下载<code>vim-plug</code>插件管理器，因此，还需要事先执行<code>sudo apt-get install curl</code>安装。</p><p>另外，插件中包含自动补全代码的神器<code>YouCompleteMe</code>需要python3.6支持，在第一次运行完<code>nvim</code>/<code>vim</code>安装完插件后，建议完成YCM的安装。</p><p>首先执行<code>sudo apt-get install python3.6 python3.6-dev</code>安装所需依赖。 然后<code>cd ~/.vim/bundle/YouCompleteMe</code>，执行<code>./install.py --clang-completer</code>，如不需要<code>clang</code>支持，可以不加入参数。</p><p>vim的配置文件中的一些按键设置，可以按需修改<code>_vimrc</code>文件。</p><ol start="2"><li> zsh</li></ol><p>运行<code>sudo apt-get install zsh</code>安装zsh程序，然后执行<code>sudo chsh -s /bin/zsh</code>将默认终端程序替换成zsh，重启或者退出当前用户重登录即可。</p><p>正常情况这里就OK了，使用<code>echo $SHELL</code>查看当前运行的shell程序是什么。</p><p>我今天遇到个奇怪的问题就是<code>chsh</code>始终没法替换成功，一直是bash无法改变。</p><p>在stackoverflow上看到有个答案，可以修改<code>/etc/passwd</code>文件，把包含当前登录用户名的那一行最后<code>/bin/bash</code>改成<code>/bin/zsh</code>，重启电脑即可。</p><ol start="3"><li> git</li></ol><p>建议修改<code>_gitconfig</code>中用户名邮箱相关，主要是些alias别名配置，我比较懒，所以大多数子命令都用两个字母缩写。</p><p>以上，就是今天的dotfiles初探，以后再补充其他配置。</p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
      <tag>dotfiles</tag>
      
      <tag>git</tag>
      
      <tag>zsh</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VPS搭建WordPress博客全记录</title>
    <link href="/2020/04/11/how-to-build-a-wordpress-blog-site/"/>
    <url>/2020/04/11/how-to-build-a-wordpress-blog-site/</url>
    
    <content type="html"><![CDATA[<p>之前小黑在半闲置的<code>VPS</code>（Virtual Private Server虚拟专用服务器）上搭了个WordPress博客“小黑杂说”（<a href="wuruofan.com">wuruofan.com</a>），记录下这次建站的大致过程。</p><p>总的来说，建站本身并不是很难的一件事情，相比之下，找到建站的理由、搞清楚为何而“站”这件事，其实更难一些。</p><p>就我个人来说，除去人生阶段的转换带来的紧迫感、动力和反思之外，最近在读的几本书（《mactalk：人生元编程》、《前方的路》、《Google工作整理术》、《程序员的成长课》、《程序员必读的职业规划书》）也让我有了搭建一个个人主页的想法。当然，小伙伴的离职、项目上的压力、原领导的调动，这些事情也是一部分促因吧。</p><p>正如《Google工作整理术》一书中所说，我现在相信“<strong>知识不是力量，共享知识才是力量</strong>”。</p><h3 id="0x00-开始之前"><a href="#0x00-开始之前" class="headerlink" title="0x00 开始之前"></a>0x00 开始之前</h3><p>由于之前我在<a href="vultr.com">Vultr</a>上已有一个半闲置的VPS主机，选的是最便宜那种，3.5刀/月、10 GB SSD存储、单核vCPU、512 MB内存、500GB带宽的贫穷配置，之前操作系统为CentOS 7 x64。</p><p>Vultr性价比较高，支持支付宝，按小时计费，全球机房，迁移机房和<a href="bandwagonhost.com">搬瓦工</a>相比似乎收费的，新人优惠送的金额可以用来多建几个VPS试试IP是否存在异常情况（you know why），免费快照记得可以用来迁移虚拟主机的机房，会比直接使用迁移机房功能便宜。当然十分欢迎使用我的<a href="https://www.vultr.com/?ref=8432644-6G" title="vultr邀请链接">邀请链接</a>。</p><h3 id="0x01-LNMP"><a href="#0x01-LNMP" class="headerlink" title="0x01 LNMP"></a>0x01 LNMP</h3><p>与<code>LNMP</code>相对应的是<code>LAMP</code>，都是主流的搭建网站的开源Web框架。</p><blockquote><p>LNMP = Linux+Nginx+Mysql+PHP</p><p>LAMP = Linux+Apache+Mysql+PHP</p></blockquote><p>不同点就在于<code>Nginx</code>和<code>Apache</code>之间。Apache可以说是传统主流服务器选项，“老大哥”，时至今日仍是世界上使用排名第一的服务器软件，详细数据见<a href="https://w3techs.com/technologies/comparison/ws-apache,ws-microsoftiis,ws-nginx" title="Comparison of the usage statistics of Apache vs. Nginx vs. Microsoft-IIS for websites">Comparison of the usage statistics of Apache vs. Nginx vs. Microsoft-IIS for websites</a>。稳定、擅长处理动态请求、模块众多，Apache是负载PHP的Web服务器最佳选择。</p><p>和<code>Nginx</code>相比最大的区别就在于响应请求时<code>Apache</code>是同步，而Nginx是异步处理。因此，在处理高并发请求时，Nginx消耗的资源更少，响应更快。这也是其设计的初衷之一。轻量级、善于处理静态请求、支持反向代理等这些都是Nginx的优点。</p><p>但是对我来说，消耗的资源少这一点就足够了。毕竟只是个个人博客，毕竟自己是个乞丐版的VPS。（是的，真的是这样子的，LAMP的一键安装脚本竟然编译出错，好像是内存不足，我还特意配置了swap分区。苦涩。ðððð）</p><h4 id="0x01a-LNMP安装"><a href="#0x01a-LNMP安装" class="headerlink" title="0x01a LNMP安装"></a>0x01a LNMP安装</h4><p>我选择的是一键安装脚本，过程详细参见其主页<a href="https://lnmp.org/">lnmp.org</a>。</p><p>由于安装时间过长，通常ssh登录VPS会因为网络波动断开连接，强烈建议使用<code>screen</code>工具进行安装。详细参见<a href="https://www.vpser.net/manage/screen.html" title="screen教程">screen教程</a>。</p><p>Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，我们这里利用的就是会话的保存恢复功能。</p><ol><li><p> 首先，使用<code>screen -S lnmp</code> 创建名为<code>lnmp</code>的screen会话，一旦网络断开重连，可以使用<code>screen -r lnmp</code>进行恢复。</p></li><li><p> 然后，下载并执行安装脚本。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">wget</span> <span class="hljs-selector-tag">http</span>://<span class="hljs-selector-tag">soft</span><span class="hljs-selector-class">.vpser</span><span class="hljs-selector-class">.net</span>/<span class="hljs-selector-tag">lnmp</span>/<span class="hljs-selector-tag">lnmp1</span>.7<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <span class="hljs-selector-tag">-cO</span> <span class="hljs-selector-tag">lnmp1</span>.7<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> &amp;&amp; <span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">zxf</span> <span class="hljs-selector-tag">lnmp1</span>.7<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> &amp;&amp; <span class="hljs-selector-tag">cd</span> <span class="hljs-selector-tag">lnmp1</span>.7 &amp;&amp; ./<span class="hljs-selector-tag">install</span><span class="hljs-selector-class">.sh</span> <span class="hljs-selector-tag">lnmp</span><br></code></pre></td></tr></table></figure><ol start="3"><li>之后一路默认选项安装，除了在<code>MySQL</code>安装时需要设置默认数据库<code>root</code>账户的密码（需牢记）之外，还有几点不太一样。<ul><li>  <code>PHP</code>选择<code>7</code>以上版本，目的和WordPress兼容，暂时不要选择<code>7.4.4</code>版本，目前（2020年4月）最新WordPress有些问题。</li><li>  最后会提示是否安装<code>Memory Allocator</code>，PHP的内存分配插件，这个我好像随便选了一个，忘记了ð¤¦，可能是<code>Jemalloc</code>。这里选默认不安装也没关系，可以之后使用插件脚本按需安装。</li></ul></li></ol><p>然后，就是漫长的等待，大概20分钟，安装完成后终端会输出安装信息和运行信息。若是看到</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-attr">Nginx:</span> OK<br><span class="hljs-attr">MySQL:</span> OK<br><span class="hljs-attr">PHP:</span> OK<br>PHP-<span class="hljs-attr">FPM:</span> OK<br></code></pre></td></tr></table></figure><p>和各个服务<code>is running</code>就说明安装成功了。这是浏览器地址栏输入VPS的IP地址应该就会显示一个<code>LNMP一键安装包</code>的介绍页面，这个页面的相关内容在目录<code>/home/wwwroot/default/</code>。</p><h4 id="0x01b-插件安装"><a href="#0x01b-插件安装" class="headerlink" title="0x01b 插件安装"></a>0x01b 插件安装</h4><p>在执行上面第二条命令的目录下生成<code>lnmp1.7</code>目录，目录中有个名为<code>addons.sh</code>的脚本，用于安装PHP相关插件。安装或卸载命令如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">./addons.sh </span><span class="hljs-template-variable">&#123;installuninstall&#125;</span><span class="xml"> </span><span class="hljs-template-variable">&#123;eacceleratorxcachememcachedopcacheredisapcuimagemagickioncube&#125;</span><span class="xml"> </span><br></code></pre></td></tr></table></figure><p>我安装了缓存插件<code>memcached</code>。执行<code>./addons.sh install memcached</code>，然后 选择 2 （<code>php-memcached</code>），等待安装成功即可。</p><h4 id="0x01c-其他命令"><a href="#0x01c-其他命令" class="headerlink" title="0x01c 其他命令"></a>0x01c 其他命令</h4><p>在其官网和<a href="https://github.com/licess/lnmp/blob/master/readme.md" title="LNMP on GitHub">GitHub README说明</a>中都有一些管理命令，常用摘录如下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">LNMP<span class="hljs-regexp">/LNMPA/</span>LMAP状态管理：lnmp &#123;startstopreloadrestartkillstatus&#125;<br><br>Nginx状态管理：lnmp nginx或<span class="hljs-regexp">/etc/i</span>nit.d/nginx &#123;startstopreloadrestart&#125;<br><br>MySQL状态管理：lnmp mysql或<span class="hljs-regexp">/etc/i</span>nit.d/mysql &#123;startstoprestartreloadforce-reloadstatus&#125;<br><br>MariaDB状态管理：lnmp mariadb或<span class="hljs-regexp">/etc/i</span>nit.d/mariadb &#123;startstoprestartreloadforce-reloadstatus&#125;<br><br>PHP-FPM状态管理：lnmp php-fpm或<span class="hljs-regexp">/etc/i</span>nit.d/php-fpm &#123;startstopquitrestartreloadlogrotate&#125;<br><br>PureFTPd状态管理：lnmp pureftpd或<span class="hljs-regexp">/etc/i</span>nit.d/pureftpd &#123;startstoprestartkillstatus&#125;<br></code></pre></td></tr></table></figure><h3 id="0x02-域名申请与绑定"><a href="#0x02-域名申请与绑定" class="headerlink" title="0x02 域名申请与绑定"></a>0x02 域名申请与绑定</h3><p>我个人名字的域名是在<code>GoDaddy</code>上申请的，因为印象中这是最大的域名托管平台，后来才知道还有一个<a href="https://www.namesilo.com/">NameSilo</a>，国内就选阿里的万网或者腾讯云之类的，只不过国内域名申请需备案，而我懒得折腾。而且GoDaddy这个域名我总觉得有娃在后面督促我努力工作。</p><p>GoDaddy一般都有优惠，但是这个网站似乎有点杀熟的倾向。比如你在上面搜索过几次心仪的域名，有可能会出现域名地址价格不相同的情况，可能会越来越贵，比如我的域名有一天半夜2点哄睡娃去搜是第一年20元、第二年100+；白天我再去搜索价格就变化了，而且一旦你使用了别的网站提供的优惠折扣信息，cookies里似乎会存储相关数据，这样价格一直就是别人折扣码的价格了，你只能用无痕模式/隐私模式重新登陆，才能看到最初的优惠价格。总之，十分迷。</p><p>不管怎么样，选择好了域名后，可以选择支付宝支付，还算比较方便。</p><p>上一步中完成了<code>LNMP</code>的安装，已经可以在浏览器里访问VPS的IP地址了，我们可以在GoDaddy的管理界面绑定IP和域名。</p><p>登陆GoDaddy管理界面，点击<code>DNS</code>进入域名解析管理界面，点击<code>ADD</code>添加一条DNS信息，这里选择<code>Type</code>为<code>A</code>，即IP指向，<code>Host</code>填之前购买的域名，<code>Points to</code>填VPS的IP地址，<code>TTL</code>默认缓存时间为1小时，然后点击<code>SAVE</code>即可。一般1～2分钟即可生效。</p><p>建议添加两条，同时保证无www前缀的网址和有www前缀网址的访问，以防遇到和我一样在更新Let’s Encrypt证书时遇到DNS解析失败的问题。</p><p>类型</p><p>名称</p><p>值</p><p>TTL</p><p>A</p><p>@</p><p>vps ip</p><p>1/2 小时</p><p>CNAME</p><p>www</p><p>@</p><p>1/2 小时</p><p>其中<code>@</code>表示无www前缀的域名，<code>www</code>表示完整域名，意思就是添加一条<code>A</code>记录 将域名指向你的vps ip地址，然后添加了一个<code>CNAME</code>别名，指向完整域名。</p><p>这样就完成域名的绑定工作。现在浏览器输入域名应该就可以显示上一步LNMP安装成功后的网页了。关于添加DNS时，Type一栏里的<code>A</code>（IP指向）、<code>CNAME</code>（别名指向）、<code>NS</code>（域名解析记录）等不同类别的区别可以参见网页<a href="https://itbilu.com/other/relate/EyxzdVl3.html" title="DNS域名解析中A、AAAA、CNAME、MX、NS、TXT、SRV、SOA、PTR各项记录的作用">DNS域名解析中A、AAAA、CNAME、MX、NS、TXT、SRV、SOA、PTR各项记录的作用</a>。</p><h3 id="0x03-WordPress安装"><a href="#0x03-WordPress安装" class="headerlink" title="0x03 WordPress安装"></a>0x03 WordPress安装</h3><h4 id="0x03a-添加虚拟主机"><a href="#0x03a-添加虚拟主机" class="headerlink" title="0x03a 添加虚拟主机"></a>0x03a 添加虚拟主机</h4><p>在WordPress安装之前，我们还需要向LNMP添加虚拟主机，配置LNMP相关设置。</p><p>执行<code>lnmp vhost add</code>完成相关操作，按提示输入：</p><ul><li>  主机域名（wuruofan.com/<a href="http://www.wuruofan.com)/">www.wuruofan.com）</a></li><li>  网站文件默认存储路径（使用默认/home/wwwroot/wuruofan.con/即可）</li><li>  选择是否使用rewrite规则（使用，并设置默认rewrite规则为wordpress）</li><li>  是否使能PHP pathinfo功能（y）</li><li>  是否使用访问日志（y）和默认位置（默认即可）</li><li>  是否创建MySQL数据库和同名管理员账户（我这里选择了n，后面我会自己创建，如果没有特殊需求可以按提示选y）</li><li>  是否添加SSL证书（y，然后选择2，使用<code>Let&#39;s Encrypt</code>提供的SSL证书，这里会影响后面的全站https）</li></ul><p>之后按回车等待安装完成即可。</p><h4 id="0x03b-MySQL数据库创建"><a href="#0x03b-MySQL数据库创建" class="headerlink" title="0x03b MySQL数据库创建"></a>0x03b MySQL数据库创建</h4><p>在命令行输入<code>mysql -u root -p</code>，按照提示输入数据库root账户密码登陆。</p><p>然后执行<code>create database wordpress;</code>创建名为wordpress的数据库，创建成功会出现如下提示。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; create database wordpress;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">1</span> row affected (<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sec)<br></code></pre></td></tr></table></figure><p>最后输入<code>exit</code>退出数据库管理程序。</p><blockquote><p><strong>注意</strong>： 如果不小心，像小黑后来一样忘记了<code>mysql</code>数据库的<code>root</code>密码，重试了一下午也没试出来，不妨看看<code>/home/wwwroot/www.xxxx.com/wp-config.php</code>。</p></blockquote><h4 id="0x03c-安装WordPress"><a href="#0x03c-安装WordPress" class="headerlink" title="0x03c 安装WordPress"></a>0x03c 安装WordPress</h4><p>下面才是真正的WordPress安装过程，也就是著名的5分钟安装。</p><ul><li>  创建网站目录</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /home/wwwroot/<br><span class="hljs-built_in">mkdir</span> www.wuruofan.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><ul><li>  下载最新安装包并解压</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 回到home目录</span><br>cd ~<br><br><span class="hljs-comment"># 获取最新安装包</span><br>wget https:<span class="hljs-regexp">//</span>cn.wordpress.org/latest-zh_CN.tar.gz<br><br><span class="hljs-comment"># 解压到当前目录</span><br>tar -zxvf latest-zh_CN.tar.gz<br><br><span class="hljs-comment"># 将解压后文件内容移动到网站根目录下</span><br>mv wordpress<span class="hljs-regexp">/* /</span>home<span class="hljs-regexp">/wwwroot/</span>wuruofan.com/<br><br></code></pre></td></tr></table></figure><p>这里以防后面可能会出现的乱七八糟权限问题，还需要修改网站根目录的读写权限和用户归属。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 修改网站根目录的读写权限（所有人可读可访问、仅所有者可以更改）</span><br>chmod -R <span class="hljs-number">755</span> <span class="hljs-regexp">/home/</span>wwwroot<span class="hljs-regexp">/www.wuruofan.com/</span><br><br><span class="hljs-comment"># 修改网站根目录所有者为www用户组</span><br>chown -R www <span class="hljs-regexp">/home/</span>wwwroot<span class="hljs-regexp">/www.wuruofan.com/</span><br></code></pre></td></tr></table></figure><p>这里可能会提示，<code>.user.ini</code>文件的权限和用户无法修改，需要执行<code>chattr -i /home/wwwroot/www.wuruofan.com/.user.ini</code>，修改该文件为可修改，再执行上面操作即可。</p><ul><li>  配置你的网站</li></ul><p>这时已经可以通过浏览器输入域名去执行下一步的配置工作。</p><p>这时你需要准备好之前创建的数据库信息，再网站页面配置数据库名、数据库用户、数据库密码、表名等信息。</p><p>根据提示输入信息即可，最后会跳转页面，输入网站名称、账户名称、密码等信息，之后就大功告成，你也拥有了一个个人博客站点了！</p><h3 id="0x04-其他"><a href="#0x04-其他" class="headerlink" title="0x04 其他"></a>0x04 其他</h3><h4 id="0x04a-全站HTTPS"><a href="#0x04a-全站HTTPS" class="headerlink" title="0x04a 全站HTTPS"></a>0x04a 全站HTTPS</h4><p>简单的推荐使用插件<code>Really Simple SSL</code>。注意，<strong>一定要搭建完成后先做</strong>，不然会遇到一些奇奇怪怪的问题！会影响google/baidu的站点收录。</p><p>比如已发表的博客上的多媒体资源链接默认是http的，如果你先发表博客然后再做全站https的操作，就会出现<code>mixed content errors</code>错误，通常解决方案就是通过搜索替换数据库中http相关内容去解决，可以用插件<code>Better Search Replace</code>或者<code>SSL 不安全内容修复器</code>去解决。</p><p>我当时配置全站HTTPS的时候绕了点弯路，手工配置的，简直头秃，推荐阅读<a href="https://www.wpbeginner.com/wp-tutorials/how-to-add-ssl-and-https-in-wordpress/" title="How to Properly Move WordPress from HTTP to HTTPS (Beginner&#39;s Guide">How to Properly Move WordPress from HTTP to HTTPS (Beginner’s Guide)</a>，文章介绍了使用插件和手工配置两种方式。</p><h4 id="0x04b-主题选择"><a href="#0x04b-主题选择" class="headerlink" title="0x04b 主题选择"></a>0x04b 主题选择</h4><p>WordPress的主题茫茫多，本着简洁就是美和能少设置一项是一项（懒）的原则，我选择了MDx主题<a href="https://mdx.flyhigher.top/" title="MDx：轻于形，悦于心">MDx：轻于形，悦于心</a>，这是一款采用Material Design 风格 WordPress 主题，必须给个好评。</p><p>除了好看之外，主题还自带了移动端网页、夜间模式切换、延迟加载、SEO设置、ImageBox、微信微博等社交媒体分享图片生成等等，但是也带来一些意想不到的问题，主要原因是会和WordPress一些插件的功能冲突。</p><p>比如MDx主题自带的Lazyload功能和WordPress官方的Jetpack插件中的相关功能可能会有冲突，从而导致页面上的图片显示不太正常，我把Jetpack里的功能关闭了，记得当时生成分享到社交媒体的二维码图片时遇到过图片无法显示的问题，好像就是这个原因；还有SEO设置，如果有其他插件，就不要在主题设置里去配置了。</p><p>MDx主题里有些特别细小的点，我很喜欢，比如页脚格言，可以使用一言API。</p><h4 id="0x04c-文末版权声明"><a href="#0x04c-文末版权声明" class="headerlink" title="0x04c 文末版权声明"></a>0x04c 文末版权声明</h4><p>通常我们在其他网站看帖子的时候总会看一些版权声明，建议大家也加上。在WordPress的设置里可以加，我选择在MDx主题的<code>文末信息</code>里添加如下HTML代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;open-message&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:#eeeeee 1px solid;border-radius:5px 5px 5px 5px;padding-left:5px; padding-righ5:5px&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-bullhorn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Copyright <span class="hljs-symbol">&amp;copy;</span> 2019<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear()&gt;<span class="hljs-number">2019</span>&amp;&amp;<span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear());</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://wuruofan.com&quot;</span>&gt;</span>小黑杂说<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>. All Rights Reserved.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>版权声明<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>：除非注明，文章均为原创！<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span>本网站采用<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;BY-NC-SA 授权协议&quot;</span>&gt;</span>BY-NC-SA<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>协议进行授权，转载请以链接形式标明本文地址：--PostURL--.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="0x04d-插件列表"><a href="#0x04d-插件列表" class="headerlink" title="0x04d 插件列表"></a>0x04d 插件列表</h4><p>WordPress的插件也是茫茫多，这里记录下使用中的一些插件以防万一。</p><ul><li><p>  Jetpack：WordPress官方增强功能</p></li><li><p>  Akismet Anti-Spam：反垃圾评论，要和Jetpack连接使用</p></li><li><p>  Better Search Replace：替换数据库中信息</p></li><li><p>  Really Simple SSL：一键开启HTTPS</p></li><li><p>  SSL 不安全内容修复器：修复页面中混杂http和https的问题</p></li><li><p>  Redirection：管理网站的301重定向页面和404页面，之前手工重定向http主页到https主页时用的</p></li><li><p>  Google XML Sitemaps：Google站点地图，用于Google搜索收录</p></li><li><p>  百度搜索推送管理： 百度搜索收录相关</p></li><li><p>  多合一SEO包：设置搜索引擎相关关键字信息</p></li><li><p>  Rename wp-login.php：重命名WordPress登陆页面地址，以防被别人暴力登陆</p></li><li><p>  WP Super Cache：快速缓存插件</p></li><li><p>  WP Alu2Button：MDx主题评论区表情需要使用的插件</p></li><li><p>  WP-Optimize - Clean, Compress, Cache：WordPress站点优化插件</p></li><li><p>  Wordfence Security &amp; Wordfence Assistant：安全插件，不太会用，开启后我的梯子无法正常工作，看iptables里似乎追加了配置，目前暂未使用。</p></li><li><p>  UpdraftPlus-备份/恢复：必须有姓名！我的命都是它给的（破音）！免费版也支持备份到云盘，我选择每周备份一次到Dropbox！</p></li><li><p>  PHP Compatibility Checker：php版本兼容性检查</p></li></ul><h4 id="0x04e-PHP更新"><a href="#0x04e-PHP更新" class="headerlink" title="0x04e PHP更新"></a>0x04e PHP更新</h4><p>由于种种原因和骚操作，我不得不重装LNMP和WordPress，<del>顺便检查一下之前的过程记录是不是有问题，</del>在我装完最新版WordPress进入设置页面时，提示我升级到更安全的PHP版本。</p><p>LNMP安装脚本里的php是<code>5.6.10</code>，而目前最新版本已经是<code>7.4.4</code>了，LNMP的安装目录下提供了<code>upgrade.sh</code>升级脚本，运行即可升级各种组件。</p><p><strong>注意</strong>，这里请不要想我之前一样，直接升级最新版本，导致一会儿找不到<code>php-fpm</code>一会儿nginx启动不了等等问题，我不得不再次重装同时再检查一下之前的过程记录是不是有问题。</p><p><strong>注意</strong>，重装LNMP时也不要再安装时选择最新版php，虽然LNMP1.7的安装脚本已经支持安装<code>7.4.4</code>版本的php，也会无法启动，不要问我怎么知道的。</p><p>正确的做法是安装上面提到的插件<code>PHP Compatibility Checker</code>，检查当前WordPress程序、插件及主题，和php哪个版本兼容，目前看这个插件支持检测<code>7.0</code>～<code>7.3</code>版本，检测完成之后，再去执行<code>./upgrade.sh php</code>选择相应版本号升级，最终我选择了<code>7.0</code>版本，才结束我的重装之旅。吐血！</p><h4 id="0x04f-HTTPS证书过期"><a href="#0x04f-HTTPS证书过期" class="headerlink" title="0x04f HTTPS证书过期"></a>0x04f HTTPS证书过期</h4><p>HTTPS证书的有效期是90天，我的站点证书过期，而网上找的教程又不符合我的情况，一阵操作猛如虎的我，果然成功，把网站搞崩溃了。</p><p>其实LNMP的官网上有说明的帖子<a href="https://lnmp.org/notice/fix-certbot-renew.html" title="建议用户更新Let&#39;sEncrypt SSL证书续期规则">建议用户更新Let’sEncrypt SSL证书续期规则</a>，只是也比较早期了，但本质没变化。</p><blockquote><p>自动更新命令：wget -O - <a href="http://soft.vpser.net/lnmp/ext/fix/_renewssl.shbash">http://soft.vpser.net/lnmp/ext/fix\_renewssl.shbash</a> 也可以直接升级到1.5使用acme.sh生成证书，wget <a href="http://soft.vpser.net/lnmp/lnmp1.5beta.tar.gz">http://soft.vpser.net/lnmp/lnmp1.5beta.tar.gz</a> -O lnmp1.5beta.tar.gz &amp;&amp; tar zxf lnmp1.5beta.tar.gz &amp;&amp; cd lnmp1.4 &amp;&amp; ./upgrade1.x-1.5.sh ssl</p></blockquote><p>重点就是更新<code>crontab</code>加入定时任务去更新证书，旧版使用<code>certbot</code>或者新版<code>acme.sh</code>更新证书。</p><p>之前出问题估计是我的VPS又装了其他服务，导致<code>crontab</code>出了问题，正常安装完LNMP之后，使用<code>crontab -l</code>可以看到如下配置<code>44 0 * * * &quot;/usr/local/acme.sh&quot;/acme.sh --cron --home &quot;/usr/local/acme.sh&quot; &gt; /dev/null</code>，即每天0点44分执行一次，证书过期会自动申请。</p><h3 id="0x05-最后"><a href="#0x05-最后" class="headerlink" title="0x05 最后"></a>0x05 最后</h3><p>这篇文章拖拖拉拉的，中间又遇到几个月的频繁出差深夜加班就耽搁了。等到再次下决心把它写完的时候突然发现网站证书过期了，php版本过高，Let’s Encrypt证书申请太频繁限制次数不能申请的一堆乱七八糟问题，折腾来折腾去wordpress重装了好几次，我也崩溃了好几回，不过换个角度，也算重复多次检验了文章内容的可靠性，顺便补了些截图。还好当初装了Updraft备份插件，真心好评。</p><p>这次给我的教训就是，写东西时一开始的规划就要简短，尽可能一次写完，太长了自己容易泄劲，再一忙又失去动力，我现在算是理解网文小说为何如此容易鸽了。</p><p>路漫漫，加油。</p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>build a website</tag>
      
      <tag>lnmp</tag>
      
      <tag>vps</tag>
      
      <tag>wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从rm -rf误删文件说起</title>
    <link href="/2019/10/04/about-rm-delete-by-mistake/"/>
    <url>/2019/10/04/about-rm-delete-by-mistake/</url>
    
    <content type="html"><![CDATA[<p>　　相信前两天发生的友部门同事误删项目代码的事情，很多人都知道了。这件事情幸好不是发生在我们小部门，不然又会被领导说我们不专业。<br>　　墨菲定律告诉我们，有概率发生的事情就一定会发生。<br>　　误删文件这种事情发生其实不是最惨的，最惨的是删掉的项目代码在开发的几个月里居然没有用任何代码管理软件进行提交备份！（这种事情在我参与的项目中是不太可能的，在基本功能实现后就会纳入版本管理，服务器建立仓库，因为如果只是本地管理，其实也没有太多意义，毕竟<code>rm -rf *</code>了。）<br>　　这种令人扼(xi)腕(wen)叹(le)息(jian)的事情发生之后，<strong>我们应该反思自己做的是否足够好，我们还能做些什么避免这些事情发生在自己身上，或者假使这种事情真的发生在我们身上我们能做些什么让损失降到最小</strong>。</p><h3 id="首先要反思我们是否做的足够好。"><a href="#首先要反思我们是否做的足够好。" class="headerlink" title="首先要反思我们是否做的足够好。"></a>首先要反思我们是否做的足够好。</h3><p>　　<code>rm</code>命令是<code>Unix</code>系列操作系统中用于<code>删除文件</code>的命令行指令，是英文remove的简写，通常搭配的参数有<code>-r</code>、<code>-i</code>、<code>-f</code>、<code>-v</code>，命令格式微<code>rm [参数] [文件名以空格分隔的一组文件名通配符]</code>。</p><ul><li>  <code>r</code>对应<code>recursive递归</code>，用于递归删除目录下所有子目录和其中包含的文件。</li><li>  <code>i</code>对应<code>inform提示</code>，会在删除前提示用户输入<code>y/n</code>，确认是否删除。</li><li>  <code>f</code>对应<code>force强制</code>，这个比较粗鲁，会之间忽略任何错误提示强制执行删除操作。</li><li>  <code>v</code>对应<code>verbose详细</code>，会在执行命令时输出详细信息，很多命令都有这个参数。</li></ul><p>　　这些常用参数中<code>r</code>参数最常用，<code>f</code>参数危险性最大，<code>i</code>参数最没有存在感但却是很有用的参数。<br>　　<code>rf</code>参数搭配上通配符<code>*</code>威力十分强劲，有些不好习惯的朋友若是沉迷<code>root</code>用户或者热爱<code>sudo</code>，那么一个回车下去，大罗神仙也阻止不了了。要是这时候你又加上了<code>v</code>参数，你就可以体验到一个个文件排队死给你看的绝望了，这时的你可能会嘴里喷出f开头的单词，然后表示再也不用<code>f</code>参数了。<br>　　所以，**<code>f</code>参数一定要慎用，用之前一定要问自己两个问题，我到底是在做什么操作，这个操作没有<code>f</code>参数行不行。**另外，涉及<code>root</code>权限的操作也需要慎之又慎，也要问自己一下，不要因为方便，就干啥都<code>su - root</code>或者<code>sudo</code>，一时<code>root</code>一时爽，一直<code>root</code>悔断肠。<br>　　<code>i</code>参数是被忽略的一个参数，在你删除不确定的目录或者文件时，可以加上这个参数。这样，在删除每一个文件时都会询问是否删除，适合强迫证倾向的朋友。有个小技巧是利用<code>Unix</code>系统命令行的<code>alias别名</code>功能，修改<code>~/.bashrc</code>文件，添加<code>alias rm=&#39;rm -i&#39;</code>，然后执行<code>. ~/.bashrc</code>使修改的命令行别名生效，这样执行rm命令就相当于默认带上<code>-i</code>参数了。<br>　　但是要注意一点，即使这样也无法阻拦强力的<code>rm -rf *</code>，可能朋友会问为什么呢？是<code>f</code>参数会覆盖<code>i</code>么？<br>　　其实是这样的，添加别名后的<code>rm -rf *</code>指令相当于<code>rm -i -rf *</code>，命令行处理程序（默认为<code>bash</code>）执行时看到<code>rm</code>后明白，“哦，这是一个删除命令”，接着看到<code>-i</code>，<code>bash</code>就明白了，“原来这家伙不太自信！”再看到<code>-r</code>，“哦，要删目录了”，最后看到<code>f</code>，<code>bash</code>看到这个参数长舒了一口气，“本王就喜欢f了，前面啰啰嗦嗦一大堆最后才说正经事，全干掉全干掉！”<br>　　我们可以了解到<code>bash</code>命令行是按顺序解析参数的，脑袋灵活的朋友可能会提出一个问题，“如果把<code>i</code>参数放到<code>f</code>后面呢？”bingo，是可以弹出提示的。但是<code>alias</code>别名的方法就不太好用了，只能用脚本实现<code>i</code>参数在参数列表最后，这是另外的思路了。</p><h3 id="让我们再来看看能做些什么可以避免这类事情发生。"><a href="#让我们再来看看能做些什么可以避免这类事情发生。" class="headerlink" title="让我们再来看看能做些什么可以避免这类事情发生。"></a>让我们再来看看能做些什么可以避免这类事情发生。</h3><p>　　人生在世总有些事情我们会后悔莫及，正所谓“嫦娥应悔偷灵药，碧海青天夜夜心”，我们有时候就是希望有后悔药或者时光机的存在。<br>　　<code>rm</code>命令不像那些文件管理器中的删除操作，有个专门的“回收站”我们可以找回文件，“要是<code>rm</code>也有回收站功能就好了”，我敢说这绝对不是一个人的心声。这个功能真的可以有。</p><p>　　<code>trash-cli</code>工具就在命令行提供了类似图形界面的删除文件到回收站的功能，以<code>Ubuntu</code>为例，系统可以通过<code>sudo apt-get install trash-cli</code>命令安装。<br>　　<code>trash-cli</code>提供了如下几个命令。具体使用方法可以参见这篇<a href="https://linux.cn/article-10029-1.html">文章</a>。</p><ul><li>  <code>trash-put</code>： 删除文件和目录至回收站中。</li><li>  <code>trash-list</code>：列出回收站中文件和目录。</li><li>  <code>trash-restore</code>：从回收站中恢复文件或目录 trash。</li><li>  <code>trash-rm</code>：删除回收站中的文件。</li><li>  <code>trash-empty</code>：清空回收站</li></ul><p>　　<code>trash-put</code>命令的基本语法和<code>rm</code>类似，因此，我们可以利用上面提到的<code>alias别名</code>技巧，用<code>trash-put</code>替换<code>rm</code>命令，这样我们每一次<code>rm</code>都是将文件删除到回收站中了，怎么样，是不是很兴奋！<br>　　但是先冷静一下，这里还是有可能会有意外会发生，尤其是那些<code>root/sudo</code>的爱好者，由于<code>alias别名</code>我们是定义在当前用户的bash配置脚本中的，一旦使用<code>root/sudo</code>执行，那么<code>rm</code>还是那个<code>rm</code>，该哭的眼泪一滴也不会少。想避免这种情况的发生，我们可以尝试把<code>alias</code>添加到<code>/etc/bash.bashrc</code>文件中，这样就可以在任何用户生效了。注意，编辑该文件也需要<code>root/sudo</code>权限。</p><h3 id="最后我们再来看看万一真的发生了能做些什么把损失降到最低。"><a href="#最后我们再来看看万一真的发生了能做些什么把损失降到最低。" class="headerlink" title="最后我们再来看看万一真的发生了能做些什么把损失降到最低。"></a>最后我们再来看看万一真的发生了能做些什么把损失降到最低。</h3><p>　　在现代计算机系统中，文件在硬盘上的存储格式与硬盘分区格式有关，在我看来，<strong>文件存储的本质是索引</strong>，用户数据以特定的数据结构存储在硬盘上，不管我们用图形界面还是命令行查看到“文件”其实都是对应到硬盘上特定数据结构和数据区域，操作系统的文件删除通常不会直接抹去其对应的存储区域数据内容，而是断开了该“文件”与真实存储区域的索引关系，这样用户就找不到“文件”了。因此，<strong>只要不修改那段特定区域的数据，文件就是有机会恢复的。</strong><br>　　那么，在不小心删除数据之后，我们需要做的<strong>第一件事情一定是保证不再向该文件所在硬盘写入数据！</strong><br>　　通常我们可以选择<code>umount卸载</code>该硬盘分区，或者重新<code>mount挂载</code>为只读分区，如果你不知道或者忘记了命令或者操作，那么<code>关机断电</code>是最明智的选择。那些慌里慌张去浏览器搜索恢复软件、下载安装软件一个个尝试的行为是不可取的，这样有可能会导致操作系统向该文件区域写入数据。<br>　　之后的操作可以选择用<code>LiveCD</code>（操作系统的安装光盘）或者<code>PE U盘</code>进行启动，把当前电脑的硬盘以只读分区挂载。也可以选择把硬盘拆下来找个USB硬盘盒装上，连接到另外的电脑上，以只读形式挂载。<br>　　后面的就是根据出事故的硬盘分区格式选择合适的恢复软件进行操作了。具体能不能完全恢复，还是要看缘分了。如何选择和使用恢复软件可以参见这篇<a href="https://wiki.archlinux.org/index.php/File_recovery#Extundelete">文章</a>。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>　　每天等娃睡了写一点，除去工作上的乱七八糟事情，写了三天总算写完了😂😂，相信能做到上面这几点，<code>rm -rf</code>误删这种事情发生的可能就会小很多，希望这种事情离我们越远越好。<br>　　今天是国庆节，第一篇微信文章，祝祖国生日快乐🎂，祝各位假期愉快！</p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rm -rf</tag>
      
      <tag>恢复</tag>
      
      <tag>技术总结</tag>
      
      <tag>经验分享</tag>
      
      <tag>误删</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>世界，您好！</title>
    <link href="/2019/10/03/hello-world-1/"/>
    <url>/2019/10/03/hello-world-1/</url>
    
    <content type="html"><![CDATA[<p>欢迎使用WordPress。这是您的第一篇文章。编辑或删除它，然后开始写作吧！</p>]]></content>
    
    
    <categories>
      
      <category>uncategorized</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
