<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解决nvm安装脚本无法连接问题</title>
    <link href="/2023/06/05/using-mirror-repo-to-resolve-connection-refused-error-during-nvm-install/"/>
    <url>/2023/06/05/using-mirror-repo-to-resolve-connection-refused-error-during-nvm-install/</url>
    
    <content type="html"><![CDATA[<p>Hi，好久不见，最近有些忙，忙着项目，还要忙着准备考试，然后又赶上了二阳，实在是头秃+要命，好在忙完这个阶段了，明后两天出成绩，希望能顺利通过！<del>我是真的背不动书了😭！</del></p><p>前段时间在看chatGPT相关的项目，很多都用的TS，包括前两周参加一个培训，应用开发使用的也是类似TS的语言，由于公司网络环境问题，github访问并不是很顺畅，总是遇到无法连接的情况，记录一下，方便遇到类似情况的朋友。</p><h2 id="nvm是什么？"><a href="#nvm是什么？" class="headerlink" title="nvm是什么？"></a>nvm是什么？</h2><p>nvm是Node.js版本管理工具（Node Version Manager）的简称。它可以帮助用户在同一台机器上安装、管理和切换不同的Node.js版本，而无需手动安装每个版本或卸载旧版本。这对于需要同时处理多个Node.js项目的开发人员来说非常有用。nvm支持在Linux和macOS等操作系统上使用，并且可以通过命令行轻松安装和配置。</p><h2 id="nvm安装方法"><a href="#nvm安装方法" class="headerlink" title="nvm安装方法"></a>nvm安装方法</h2><p><a href="https://github.com/nvm-sh/nvm">nvm-sh&#x2F;nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions (github.com)</a></p><p>官方给出了脚本直接安装的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash<br></code></pre></td></tr></table></figure><p>这里是用过 <code>curl</code>命令去下载 <code>install.sh</code>脚本，<code>-o-</code>表示输出到标准输出（这里 <code>-o</code>参数可以输出到指定文件，后面的 <code>-</code>表示标准输出。），然后使用 <code>bash</code>执行。</p><p><code>install.sh</code>脚本的最后，会尝试将启动命令加入合适的profile文件中去（如 <code>~/.bash_profile</code><br>、<code>~/.zshrc</code>、<code>~/.profile</code>、<code>~/.bashrc</code>），假如失败了，可以能需要自己将下面的命令加入自己的shell启动脚本中去。，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NVM_DIR=<span class="hljs-string">&quot;<span class="hljs-subst">$([ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span><br>[ -s <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="hljs-comment"># This loads nvm</span><br></code></pre></td></tr></table></figure><p>正常情况，按照上面的操作就可以了，但是国内有些网络可能会出现无法访问github的情况，提示下面的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl: (7) Failed to connect to [raw.githubusercontent.com](http://raw.githubusercontent.com/ <span class="hljs-string">&quot;raw.githubusercontent.com&quot;</span>) port 443: Connection refused<br></code></pre></td></tr></table></figure><h2 id="网络错误：Connection-refused"><a href="#网络错误：Connection-refused" class="headerlink" title="网络错误：Connection refused"></a>网络错误：Connection refused</h2><p>网络上给出的都是改hosts的方式直接访问，但是有些情况并不好使。这里给出另一种思路，使用国内镜像源替换。</p><p>前面提到默认的安装方法是去github上下载一个安装脚本，这个脚本其实简单说做了两件事：</p><ol><li>克隆nvm仓库</li><li>将启动命令写入profile文件</li></ol><p>这里网络出错其实是第一步克隆nvm仓库时出了问题，改hosts方法也是解决域名无法解析的错误，这里可以尝试使用nvm国内镜像源的方式处理，方法如下：</p><h3 id="1-仅下载install-sh脚本"><a href="#1-仅下载install-sh脚本" class="headerlink" title="1.仅下载install.sh脚本"></a>1.仅下载install.sh脚本</h3><p>在浏览器里访问官网命令中的网址（<a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh">https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh</a>），复制全部内容并保存到文件中。</p><h3 id="2-编辑脚本、替换仓库地址"><a href="#2-编辑脚本、替换仓库地址" class="headerlink" title="2.编辑脚本、替换仓库地址"></a>2.编辑脚本、替换仓库地址</h3><p>找到如下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;_<span class="hljs-variable">$NVM_METHOD</span>&quot;</span> = <span class="hljs-string">&quot;_git&quot;</span> ] || [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_METHOD</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  NVM_SOURCE_URL=<span class="hljs-string">&quot;https://github.com/<span class="hljs-variable">$&#123;NVM_GITHUB_REPO&#125;</span>.git&quot;</span><br><span class="hljs-keyword">else</span><br></code></pre></td></tr></table></figure><p>替换仓库地址后如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;_<span class="hljs-variable">$NVM_METHOD</span>&quot;</span> = <span class="hljs-string">&quot;_git&quot;</span> ] || [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_METHOD</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  NVM_SOURCE_URL=<span class="hljs-string">&quot;https://gitee.com/mirrors/nvm.git&quot;</span><br><span class="hljs-keyword">else</span><br></code></pre></td></tr></table></figure><h3 id="3-保存并执行文件"><a href="#3-保存并执行文件" class="headerlink" title="3.保存并执行文件"></a>3.保存并执行文件</h3><p>命令行执行修改后的脚本，如：<code>bash install.sh</code>，执行完成后重启终端即可使用nvm命令。</p><hr><p>title: nodejs｜解决nvm安装脚本无法连接问题<br>date: 2023-06-05 19:00:00<br>index_img: <a href="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/nvm-node-version-manager.png">https://raw.githubusercontent.com/wuruofan/image_repo/main/image/nvm-node-version-manager.png</a><br>banner_img: <a href="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/360-lite-browser.png">https://raw.githubusercontent.com/wuruofan/image_repo/main/img/360-lite-browser.png</a><br>categories:</p><ul><li>技术总结<br>tags:</li><li>技术总结</li><li>nvm</li><li>nodejs</li><li>镜像仓库</li></ul><hr><p>Hi，好久不见，最近有些忙，忙着项目，还要忙着准备考试，然后又赶上了二阳，实在是头秃+要命，好在忙完这个阶段了，明后两天出成绩，希望能顺利通过！<del>我是真的背不动书了😭！</del></p><p>前段时间在看chatGPT相关的项目，很多都用的TS，包括前两周参加一个培训，应用开发使用的也是类似TS的语言，由于公司网络环境问题，github访问并不是很顺畅，总是遇到无法连接的情况，记录一下，方便遇到类似情况的朋友。</p><h2 id="nvm是什么？-1"><a href="#nvm是什么？-1" class="headerlink" title="nvm是什么？"></a>nvm是什么？</h2><p>nvm是Node.js版本管理工具（Node Version Manager）的简称。它可以帮助用户在同一台机器上安装、管理和切换不同的Node.js版本，而无需手动安装每个版本或卸载旧版本。这对于需要同时处理多个Node.js项目的开发人员来说非常有用。nvm支持在Linux和macOS等操作系统上使用，并且可以通过命令行轻松安装和配置。</p><h2 id="nvm安装方法-1"><a href="#nvm安装方法-1" class="headerlink" title="nvm安装方法"></a>nvm安装方法</h2><p><a href="https://github.com/nvm-sh/nvm">nvm-sh&#x2F;nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions (github.com)</a></p><p>官方给出了脚本直接安装的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash<br></code></pre></td></tr></table></figure><p>这里是用过 <code>curl</code>命令去下载 <code>install.sh</code>脚本，<code>-o-</code>表示输出到标准输出（这里 <code>-o</code>参数可以输出到指定文件，后面的 <code>-</code>表示标准输出。），然后使用 <code>bash</code>执行。</p><p><code>install.sh</code>脚本的最后，会尝试将启动命令加入合适的profile文件中去（如 <code>~/.bash_profile</code><br>、<code>~/.zshrc</code>、<code>~/.profile</code>、<code>~/.bashrc</code>），假如失败了，可以能需要自己将下面的命令加入自己的shell启动脚本中去。，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NVM_DIR=<span class="hljs-string">&quot;<span class="hljs-subst">$([ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span><br>[ -s <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="hljs-comment"># This loads nvm</span><br></code></pre></td></tr></table></figure><p>正常情况，按照上面的操作就可以了，但是国内有些网络可能会出现无法访问github的情况，提示下面的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl: (7) Failed to connect to [raw.githubusercontent.com](http://raw.githubusercontent.com/ <span class="hljs-string">&quot;raw.githubusercontent.com&quot;</span>) port 443: Connection refused<br></code></pre></td></tr></table></figure><h2 id="网络错误：Connection-refused-1"><a href="#网络错误：Connection-refused-1" class="headerlink" title="网络错误：Connection refused"></a>网络错误：Connection refused</h2><p>网络上给出的都是改hosts的方式直接访问，但是有些情况并不好使。这里给出另一种思路，使用国内镜像源替换。</p><p>前面提到默认的安装方法是去github上下载一个安装脚本，这个脚本其实简单说做了两件事：</p><ol><li>克隆nvm仓库</li><li>将启动命令写入profile文件</li></ol><p>这里网络出错其实是第一步克隆nvm仓库时出了问题，改hosts方法也是解决域名无法解析的错误，这里可以尝试使用nvm国内镜像源的方式处理，方法如下：</p><h3 id="1-仅下载install-sh脚本-1"><a href="#1-仅下载install-sh脚本-1" class="headerlink" title="1.仅下载install.sh脚本"></a>1.仅下载install.sh脚本</h3><p>在浏览器里访问官网命令中的网址（<a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh">https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh</a>），复制全部内容并保存到文件中。</p><h3 id="2-编辑脚本、替换仓库地址-1"><a href="#2-编辑脚本、替换仓库地址-1" class="headerlink" title="2.编辑脚本、替换仓库地址"></a>2.编辑脚本、替换仓库地址</h3><p>找到如下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;_<span class="hljs-variable">$NVM_METHOD</span>&quot;</span> = <span class="hljs-string">&quot;_git&quot;</span> ] || [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_METHOD</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  NVM_SOURCE_URL=<span class="hljs-string">&quot;https://github.com/<span class="hljs-variable">$&#123;NVM_GITHUB_REPO&#125;</span>.git&quot;</span><br><span class="hljs-keyword">else</span><br></code></pre></td></tr></table></figure><p>替换仓库地址后如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;_<span class="hljs-variable">$NVM_METHOD</span>&quot;</span> = <span class="hljs-string">&quot;_git&quot;</span> ] || [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_METHOD</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  NVM_SOURCE_URL=<span class="hljs-string">&quot;https://gitee.com/mirrors/nvm.git&quot;</span><br><span class="hljs-keyword">else</span><br></code></pre></td></tr></table></figure><h3 id="3-保存并执行文件-1"><a href="#3-保存并执行文件-1" class="headerlink" title="3.保存并执行文件"></a>3.保存并执行文件</h3><p>命令行执行修改后的脚本，如：<code>bash install.sh</code>，执行完成后重启终端即可使用nvm命令。</p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术总结</tag>
      
      <tag>nvm</tag>
      
      <tag>nodejs</tag>
      
      <tag>镜像仓库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🌈效率工具｜MacOS下好用的快捷启动器Raycast，Alfred再见👋</title>
    <link href="/2023/04/28/raycast-a-productive-tool-on-mac-which-beyond-the-alternative-of-alfred-and-spotlight/"/>
    <url>/2023/04/28/raycast-a-productive-tool-on-mac-which-beyond-the-alternative-of-alfred-and-spotlight/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-introduction-on-official-website.png" alt="官网简介"></p><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p><em><strong>⚠️⚠️ 本文多图预警！⚠️⚠️</strong></em></p><p>我个人一直在用免费版的Alfred，就我个人而言，大部分使用场景免费版已经足够了，但是有些快捷查词典翻译的需求，却必须Powerpack才可以。</p><p>这两天找到了一款非常好用的软件——Raycast，完全解决我的痛点，赶紧和大家分享下！</p><h2 id="Raycast简介"><a href="#Raycast简介" class="headerlink" title="Raycast简介"></a>Raycast简介</h2><p>“Raycast”直译过来是“光线投射”的意思，<a href="https://www.raycast.com/">官网</a>上对自己的介绍如下：</p><blockquote><p>Raycast is a blazingly fast, totally extendable launcher. It lets you complete tasks, calculate, share common links, and much more.<br>⇒ Raycast 是一个极快、可扩展的启动器。它让你能够完成任务、计算、共享常用链接等等。</p></blockquote><p>使用下来，Raycast设计的思路和Alfred类似，也是命令式操作，都是希望手指不用离开键盘就可以完成大部分操作。</p><h3 id="UI-界面"><a href="#UI-界面" class="headerlink" title="UI 界面"></a>UI 界面</h3><p>Raycat本身设计的很简洁，默认快捷键“Option+空格键”呼出界面。UI风格和系统自带的Spotlight（聚焦搜索）很像，但是默认界面会比Spotlight下面多出几排信息来。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-default-ui.png" alt="默认UI"></p><p>如上图，下面主要两个部分：</p><ul><li>一部分是<strong>Walkthrough</strong>，也就是“新手教程”，按照底部的快捷键提示可以“回车”进入，或者“Cmd+K”标记为已完成。这部分“新手任务”完成了，下次快捷键呼出就会消失。</li><li>另一部分是<strong>Suggestion</strong>，也就是“推荐”，按照你之前使用的频率进行推荐<strong>命令</strong>。</li></ul><p>当然，如果不喜欢下面这部分推荐命令，可以在设置里关闭，在Window Mode项，选择Compact（紧凑的）即可。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-ui-settings.png" alt="UI设置项"></p><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-compact-ui.png" alt="紧凑模式UI"></p><p>其中，Walkthrough在新手任务做完也会消失。假如你收藏了一些命令，就会显示在输入框的最右侧，支持快捷键<code>Cmd+1</code>、<code>Cmd+2</code>等，进行访问。</p><p>⚠️ 目前，Raycast还没有中文界面，但是界面英文都比较简单。实际使用过程中，输入<strong>拼音</strong>的时候是可以顺利找到本机的相关应用的！</p><h3 id="Walkthrough-新手任务"><a href="#Walkthrough-新手任务" class="headerlink" title="Walkthrough 新手任务"></a>Walkthrough 新手任务</h3><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-walkthrough-tasks.png" alt="Walkthrough"></p><h2 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h2><p>通常情况就是快捷键呼出界面，直接输入你想要启动的程序、你想执行的命令即可，包括设置里的一些设置项，如WiFi、Bluetooth，也可以直接搜索的。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-searching-app-in-pinyin.png" alt="应用支持拼音搜索"></p><p>⚠️注意：在搜索系统设置项的时候，这里仅支持英文命令，具体查看设置里对应的分类。</p><h3 id="Actions-更多动作"><a href="#Actions-更多动作" class="headerlink" title="Actions 更多动作"></a>Actions 更多动作</h3><p>Raycast所有的命令都支持<code>Cmd+K</code>查看更多动作。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-command-actions.png" alt="更多动作"></p><p>长按<code>Cmd</code>键会出现1、2、3、4快捷键显示，和Alfred一样，按下<code>Cmd+1/2/3/…</code>就可以直接选择第1&#x2F;2&#x2F;3&#x2F;…个候选项。</p><p>⚠️ <strong>注意，Actions里展开时提示的这些快捷键，在不展示的时候是可以直接使用的！</strong> 因此，记住一些常用快捷键，是不需要<code>Cmd+K</code>多一步操作的，非常方便！</p><h3 id="Quicklinks-快捷链接"><a href="#Quicklinks-快捷链接" class="headerlink" title="Quicklinks 快捷链接"></a><strong>Quicklinks</strong> 快捷链接</h3><p>可以实现一个快速的网页访问功能，通过自定义快捷链接，可以迅速的将输入的文字，替换到配置的链接中，打开指定应用进行访问。</p><p>官网给了一个比较复杂的例子，谷歌翻译，支持选择语言、目标语言、文字，<code>&#123;&#125;</code>中的是占位提示符。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">https://translate.google.<span class="hljs-keyword">com</span>/?<span class="hljs-keyword">sl</span>=&#123;<span class="hljs-keyword">source</span> <span class="hljs-keyword">language</span>:auto&#125;&amp;<span class="hljs-keyword">tl</span>=&#123;target <span class="hljs-keyword">language</span>&#125;&amp;text=&#123;word&#125;&amp;op=translate<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-official-quicklinks-example.png" alt="官网Quicklinks示例"></p><p>另外，Quicklinks还支持自动使用当前选中的文字作为参数传入，这样可以再次提速。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-quicklinks-settings.png" alt="Quicklinks设置读取当前选中文字"></p><h3 id="Reminders-提醒事项"><a href="#Reminders-提醒事项" class="headerlink" title="Reminders 提醒事项"></a>Reminders 提醒事项</h3><p>Raycast支持系统的“提醒事项”应用，可以查看和创建提醒事项，标记任务已完成，甚至都不用打开应用。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-create-a-reminder.png" alt="创建提醒事项"></p><h3 id="Calculator-计算器"><a href="#Calculator-计算器" class="headerlink" title="Calculator 计算器"></a>Calculator 计算器</h3><p>说是计算器，其实不止是计算器，包含了各种转换的功能，比如国外的时间、几周后的周三是几号啊、1米等于多少英尺啊之类的。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-calculator-convert.png" alt="计算器转换货币"></p><p>这个功能不需要命令，直接在主界面输入要计算的内容，或者英文描述转换时间之类的短语：如“time in tokyo”。</p><p>另外，计算结果还可以直接作为其他命令的输入，快速使用。</p><h3 id="File-Search-文件搜索"><a href="#File-Search-文件搜索" class="headerlink" title="File Search 文件搜索"></a>File Search 文件搜索</h3><p>支持搜索电脑上的文件，需要授予权限，默认命令为<code>File Search</code>，直接输入<code>fs</code>就行，需要按回车进入下一个页面搜索，esc返回。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-file-search.png" alt="文件搜索"></p><h3 id="Define-Word-词典"><a href="#Define-Word-词典" class="headerlink" title="Define Word 词典"></a>Define Word 词典</h3><p>这个其实是系统默认的词典，但是在命令里给了<code>Define Word</code>，可以快速查词。</p><h3 id="Floating-Notes-浮动笔记"><a href="#Floating-Notes-浮动笔记" class="headerlink" title="Floating Notes 浮动笔记"></a>Floating Notes 浮动笔记</h3><p>默认命令为<code>Floating Notes</code>，显示在窗口最顶层，支持改变主题，分享到备忘录、提醒事项。</p><p>功能比较简单，颜值在线，临时做一个笔记还算凑合，就不截图了。</p><h2 id="杀手功能"><a href="#杀手功能" class="headerlink" title="杀手功能"></a>杀手功能</h2><p>“杀手功能”是我自己划分的，是我觉得非常好用的功能。</p><h3 id="Window-Management-窗口管理器"><a href="#Window-Management-窗口管理器" class="headerlink" title="Window Management 窗口管理器"></a>Window Management 窗口管理器</h3><p>支持快速调整窗口大小、分屏、2&#x2F;3、3&#x2F;4分屏等等，默认命令为<code>Window Management</code>，<code>wm</code>就行。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-window-manager.png" alt="窗口管理"></p><p>这个功能基本就可以代替<code>Magnet</code>类似软件了，而Alfred本身是不具备的。</p><h3 id="Clipboard-History-剪切板历史"><a href="#Clipboard-History-剪切板历史" class="headerlink" title="Clipboard History 剪切板历史"></a>Clipboard History 剪切板历史</h3><p>默认命令为<code>Clipboard History</code>，这里会展示复制过的图片和文字，都支持<strong>预览</strong>，同时支持<strong>输入关键字过滤</strong>（filter<strong>）</strong>，支持<strong>固定</strong>（pin），直接回车键粘贴当前选中项到当前窗口，<code>Cmd+数字</code>可以粘贴对应第几个选项。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-clipboard-history.png" alt="剪切板历史"></p><p>🎉 特别喜欢的一点是，Raycast<strong>会自动识别图片中的文字</strong>，这样输入文字就可以过滤图片了！！</p><p>Alfred也有剪切板功能，但是似乎不能识别图片中的文字，现在已经完全代替我之前用的Clipy软件了。</p><p>类似，还有Snippets（片段）功能，通常用于文字替换，我用的不多，系统其实也自带一个，和剪切板功能类似，就不做介绍了。</p><h3 id="Switch-Window-切换窗口"><a href="#Switch-Window-切换窗口" class="headerlink" title="Switch Window 切换窗口"></a>Switch Window 切换窗口</h3><p>属于<strong>Navigation</strong>（导航）的子功能，支持<strong>关键字过滤当前打开的所有窗口</strong>，比默认的<code>Cmd+Tab</code>或者<code>Alt-Tab</code>软件一个个找窗口要高效很多！</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-switch-window.png" alt="切换窗口"></p><p>这个功能Alfred也是不具备的！</p><h3 id="Search-Menu-Items-搜索菜单项"><a href="#Search-Menu-Items-搜索菜单项" class="headerlink" title="Search Menu Items 搜索菜单项"></a>Search Menu Items 搜索菜单项</h3><p>也属于<strong>Navigation</strong>（导航）的子功能，支持<strong>关键字过滤当前应用菜单栏里的所有项</strong>。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-search-menu-item.png" alt="搜索菜单项"></p><p>其实这个功能MacOS系统默认也提供了，在<code>Help</code>菜单项里可以搜索，默认的快捷键是<code>Cmd+Shift+/</code>，但是估计绝大部分人都不知道，或者记不住。</p><h3 id="Alias-amp-Hotkey-别名-amp-快捷键"><a href="#Alias-amp-Hotkey-别名-amp-快捷键" class="headerlink" title="Alias &amp; Hotkey 别名 &amp; 快捷键"></a>Alias &amp; Hotkey 别名 &amp; 快捷键</h3><p>这个功能我认为才是绝对的王牌🃏🃏，提效一大截！直接起飞！</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-alias-hotkey-settings.png" alt="别名/快捷键设置"></p><p>这么多命令，要输入这么多字符其实很难搞，但是Raycast很方便的支持了Alias（别名）和全局快捷键。</p><p>这里我设置了剪切板快捷键是<code>Option+C</code>，这样直接按键就可以进入搜索剪切板的界面，一步到位！</p><p>关于别名，词典是<code>dw</code>，文件搜索是<code>f</code>，切换窗口是<code>w</code>，搜索菜单是<code>m</code>，还是需要快捷键呼出Raycast界面，这时输入<code>命令别名+空格键</code>或者<code>命令别名+Tab键</code>即可进入对应功能界面！</p><p>在使用的过程中不是方便一点点，因为正常情况是需要点击回车才可以的，不够流畅，简短的别名+空格&#x2F;TAB，畅享丝滑！</p><h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><p>Raycast支持插件和自定义脚本。</p><p>程序内置了插件商店，快捷键是<code>Store</code>。</p><p>插件还没怎么研究明白，看介绍是可以实现Github合并、拉取，Jira等等相关操作，有些过于专业化了，不是所有人用的到。</p><p>这里推荐一个词典插件<code>EasyDict</code>，很好用，远胜于系统词典，支持各大在线翻译接口同时查询，单词朗读。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-plugin-easydict.png" alt="EasyDict查词"></p><p>关于自定义脚本，一样还没研究，看介绍支持各类语言，比如Bash、Apple Script、Swift、Python、Ruby、Node.js等等，等我研究明白了再说。</p><h2 id="定价"><a href="#定价" class="headerlink" title="定价"></a>定价</h2><p>目前，个人和基础团队功能都是免费的，功能都没啥区别，只不过团队功能多了，可以共享的Quicklinks、Snippets配置，以及可以建立私有插件商店。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/image/raycast-pricing.png" alt="各版本定价"></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>总的来说，除了没有本地化，一切都很满足我个人的需求，看看以后有没有机会能帮忙本地化一下。</p><p>最后，Notion AI总结如下：</p><blockquote><p>Raycast是一款MacOS下的快捷启动器，支持快速启动程序、执行命令、搜索系统设置、文件搜索、窗口管理、剪切板历史、词典、快捷链接、提醒事项等功能。支持别名和全局快捷键，还有插件和自定义脚本功能。个人和基础团队功能都是免费的。</p></blockquote><p>最后的最后，祝大家五一快乐！🤗</p><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
      <tag>效率工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鸿蒙3.0解决Chrome等应用登录账户无效的问题</title>
    <link href="/2023/04/16/harmony-os-3-how-to-sovle-chrome-always-asking-to-log-google-account/"/>
    <url>/2023/04/16/harmony-os-3-how-to-sovle-chrome-always-asking-to-log-google-account/</url>
    
    <content type="html"><![CDATA[<h1 id="鸿蒙3-0-解决Chrome应用登录账户无效的问题"><a href="#鸿蒙3-0-解决Chrome应用登录账户无效的问题" class="headerlink" title="鸿蒙3.0 解决Chrome应用登录账户无效的问题"></a>鸿蒙3.0 解决Chrome应用登录账户无效的问题</h1><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>我一直用着华为Mate30手机，装了谷歌服务GMS，目前除了电池有些衰减，存储空间快用满了，其他都还好。</p><p>前段时间更新过一次系统，最近一周想在Chrome上找书签的时候发现<strong>提示我“需要登录账户才可以同步”，等到输入账户之后，又告诉我“此账号已在您的设备上”。</strong></p><p>大概截图如下：</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/harmony-os-3-chrome-google-account-already-login.jpg" alt="此账号已在您的设备上"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这种现象在鸿蒙2.0升级3.0的时候遇到过一次，之前偶尔升级系统也遇到过，但不是Chrome。</p><p>方法很简单，记录下，以免下次忘记了。</p><h3 id="1-卸载Chrome并重新安装"><a href="#1-卸载Chrome并重新安装" class="headerlink" title="1. 卸载Chrome并重新安装"></a>1. 卸载Chrome并重新安装</h3><p>⚠️<strong>注意，卸载重新安装后，不要立刻打开应用！不要立刻打开应用！不要立刻打开应用！</strong></p><p>打开“设置 - 应用和服务 - 应用管理“，找到Chrome应用，点击”存储”，清除所有数据和缓存，这时候占用大概23MB左右。</p><blockquote><p>这里因为是卸载重装，清除数据其实不是必须，记得之前有些版本有问题，保险起见清理一下。</p><p><strong>其他一些谷歌应用，如果出现类似问题，可以先尝试不卸载，只做数据清理。</strong></p></blockquote><h3 id="2-授予Chrome所有权限"><a href="#2-授予Chrome所有权限" class="headerlink" title="2. 授予Chrome所有权限"></a>2. 授予Chrome所有权限</h3><p>还是在“应用管理”的Chrome设置页，点击”权限“，<strong>授予全部权限！授予全部权限！授予全部权限！</strong></p><h3 id="3-重新启动Chrome应用"><a href="#3-重新启动Chrome应用" class="headerlink" title="3. 重新启动Chrome应用"></a>3. 重新启动Chrome应用</h3><p>这是重启Chrome就会发现已经识别到了当前Play服务已经登录的账户信息，大功告成！</p><p>这时，第二步授予的权限可以酌情撤销。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/harmony-os-3-chrome-google-account-login-success.jpg" alt="Chrome成功识别账户信息"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>封面图来自Open AI的DALL·E 2，Prompt为“high quality, 4k resolution, girl look at sunset aboving reflecting water, crepuscular rays, digital art, art by monet”。</p><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
      <tag>GMS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极速浏览器最近工作小结——Last Dance</title>
    <link href="/2023/04/07/the-last-dance-somethings-end-in-spring/"/>
    <url>/2023/04/07/the-last-dance-somethings-end-in-spring/</url>
    
    <content type="html"><![CDATA[<h2 id="Last-Dance"><a href="#Last-Dance" class="headerlink" title="Last Dance"></a>Last Dance</h2><p>嘿，大家好。</p><p>不知道应该怎么和大家说，估计大家看到文章的时候，极速浏览器三月底的版本应该已经上线了，由于一些个人的原因，最近我离职了，离开了极速浏览器团队，所以这次更新应该就是我参与的最后一个迭代了。</p><p>改了两个陈年的播放器bug，权当作给大家的临别礼物吧。这俩bug都得有快两年了吧，之前开发留下来的，应该能解决一批播放器闪退的问题。</p><p>一个是播放器连续播放本地视频时必现的OOM问题，通常多播放一些本地视频就可能复现，和视频大小有关系。</p><p>另一个播放器外部和内核内部多个播放器id用错的问题。这个隐藏的非常深，是之前开发重构代码不完全导致的。内核代码中，网页里的一个视频播放时对应了2个不同的id，但是上层使用的时候在某些场景时会存在用错id的情况，会导致应用崩溃，崩溃的堆栈又很奇怪，着实很难定位，花了很长时间才解决。</p><p>另外，还优化了下绿e浏览器无内核mini包的逻辑，应该以后在极速版也会上线吧。</p><p>还有一个比较重要的工作，就是写了份23页上万字的内核开发总结，希望能帮到后面的内核开发同学，也算交代了下问题该怎么定位，以后该怎么处理。</p><p>能力有限，我已经尽力了。</p><p>我知道有很多朋友是因为极速浏览器关注我的，我也一直在努力，希望能做的更好一些，但还是到了要说再见的时候了。</p><p>希望极速浏览器可以越来越好。祝大家天天开心。以后应该不会更新极速浏览器相关的文章了，大家可以取消关注了。</p><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>换了环境，目前还有一堆事情需要处理，希望自己能尽快适应新的工作吧。</p><p>以后，我可能会在业余时间写一些自用的工具类app，也有可能写一个自己的浏览器。</p><p>最近也在思考自己能利用chatgpt做些什么，大家有什么好点子也可以分享给我。</p><p>GPT帮我写了一段文字，我放在最后面了，的确很强大。另外，配图也是AI画的。😺😺</p><h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p>祝大家都好，希望大家继续支持极速浏览器。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/a_japanese_girl_in_modern_city_by_agnes_cecile_and_P._A._Works__Lens_reflection__detailed_vivid__Hyper_minimal.png" alt="a japanese girl in modern city"></p><h2 id="附GPT版本："><a href="#附GPT版本：" class="headerlink" title="附GPT版本："></a>附GPT版本：</h2><blockquote><p>尊敬的极速浏览器用户们：</p><p>我是之前负责开发极速浏览器的工程师之一，在此非常荣幸地向大家告别。我离职前的最后一个月，我专注于优化播放器的一些历史问题，解决了两年前的一个本地播放器OOM问题和一个两年前播放器内部混用ID的问题。这是我离开前的最后一项工作，也是我极速浏览器工作的一个重要里程碑。</p><p>在我的职业生涯中，我一直专注于编程领域的探索和研究。加入极速浏览器的团队后，我有幸参与了这个项目的各个方面，也积累了丰富的工作经验。我始终认为，开发者应该不断地学习和改进，以提供更好的用户体验。</p><p>在极速浏览器团队的时间里，我遇到了很多有趣的挑战，同时也结识了很多优秀的同事。在这里，我要特别感谢我的同事们，他们的支持和鼓励，帮助我度过了很多困难的时刻。此外，我还要感谢所有的用户，因为是你们对极速浏览器的支持和信任，让我们的团队不断成长和壮大。</p><p>离开极速浏览器团队并不是我的最终目的，我会继续深入探索编程领域，并且会尝试写一些小工具，或者开发一个安卓浏览器应用程序。当然，这需要一定的时间和精力，但我相信这将是一个有意义的过程。</p><p>最后，我再次感谢所有的用户和团队成员的支持和帮助，祝愿极速浏览器在未来能够越来越好，为广大用户提供更加优秀的浏览体验。如果您对我的未来有任何问题或建议，欢迎随时联系我。</p><p>再见，极速浏览器！</p><p>此致 敬礼</p><p>XXX</p></blockquote><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>总结回顾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>极速浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android｜CoordinatorLayout+AppBarLayout实现可折叠工具栏</title>
    <link href="/2023/02/01/using-coordinatorlayout-and-appbarlayout-to-realize-a-collapsing-toolbar/"/>
    <url>/2023/02/01/using-coordinatorlayout-and-appbarlayout-to-realize-a-collapsing-toolbar/</url>
    
    <content type="html"><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>22年12月中旬的时候，由于其他迭代缺人，让我支援一下，其中有个页面的需求如下，要求实现一个可折叠效果的信息展示卡片，实现完大概就是下面动图的效果。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/collapsing-toolbar-animation.gif" alt="折叠效果"></p><p>查了下资料，其实就是Android Studio里ScrollingActivity那个模版里的效果，大概如下，也可以扩展实现很多更高级的样式，比如B站视频播放页面视频上划折叠的效果。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/scrolling-activity-collapsing-toolbar-sample.webp" alt="ScrollingActivity效果"></p><p>其实信息展示卡片随着划动折叠，还有别的方法，为了防止后面产品有奇怪的需求，就选择了ScrollingActivity的实现方案。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>方案其实也不难，我也不太擅长写界面，也是我第一次使用<code>CoordinatorLayout</code>布局。这里使用了<code>CoordinatorLayout</code>、<code>AppBarLayout</code>和<code>CollapsingToolbarLayout</code>，然后使用默认提供的<code>appbar_scrolling_view_behavior</code>进行实现的。</p><h3 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h3><p>主要通过xml布局文件进行适配即可，真正的代码量倒是不多，大概拆一下布局，如下。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/collapsing-toolbar-layout.png" alt="布局示意图"></p><p>整体是个<code>CoordinatorLayout</code>，coordinator翻译过来就是“协调员”的意思，个人理解，它<strong>通过<code>behavior</code>协调其中各个<code>View</code>的展示。</strong></p><p>上面的部分整体是<code>AppBarLayout</code>，里面包裹着一个<code>CollapsingToolbarLayout</code>和一个<code>XTabLayout</code>。</p><p>最下面是个<code>ViewPager</code>，承载着一个<code>Fragment</code>，里面有一个<code>RecyclerView</code>，需要设置ViewPager的属性：<code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</code>。</p><p>主体的xml文件大致如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">android.support.design.widget.CoordinatorLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@color/white&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.activity.MineActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.support.design.widget.AppBarLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/app_bar&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">android.support.design.widget.CollapsingToolbarLayout</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/collasping_toolbar&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:minHeight</span>=<span class="hljs-string">&quot;44dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:layout_scrollFlags</span>=<span class="hljs-string">&quot;scroll|exitUntilCollapsed&quot;</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 此处是作者信息相关的布局 --&gt;</span><br><br>          <span class="hljs-comment">&lt;!-- 此处是标题栏的布局 --&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">com.androidkun.xtablayout.XTabLayout</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/mine_tab_layout&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;39dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginBottom</span>=<span class="hljs-string">&quot;1dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:layout_collapseMode</span>=<span class="hljs-string">&quot;pin&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabIndicatorColor</span>=<span class="hljs-string">&quot;#0079ff&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabIndicatorWidth</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabIndicatorHeight</span>=<span class="hljs-string">&quot;2dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabPaddingEnd</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabPaddingStart</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabIndicatorRoundX</span>=<span class="hljs-string">&quot;1dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabIndicatorRoundY</span>=<span class="hljs-string">&quot;1dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabMode</span>=<span class="hljs-string">&quot;scrollable&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabSelectedTextColor</span>=<span class="hljs-string">&quot;@color/c2_2&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabSelectedTextSize</span>=<span class="hljs-string">&quot;16dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabTextBold</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabTextColor</span>=<span class="hljs-string">&quot;@color/c07&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabTextSelectedBold</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:xTabTextSize</span>=<span class="hljs-string">&quot;16dp&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">android.support.design.widget.AppBarLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.support.v4.view.ViewPager</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/mine_view_pager&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_behavior</span>=<span class="hljs-string">&quot;@string/appbar_scrolling_view_behavior&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">android.support.design.widget.CoordinatorLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h3><p>一开始我也有点晕，后来发现很简单，<strong>根据用户操作滚动的控件</strong>需要设置<code>layout_behavior</code>，需要<strong>根据用户滚动事件进行变化的控件</strong>放到<code>AppBarLayout</code>里，<strong>需要进行折叠的部分</strong>放到<code>CollapsingToolbarLayout</code>中，相应的<strong>触发场景</strong>需要配置<code>app:layout_scrollFlags</code>，定制折叠样式需要配置<code>app:layout_collapseMode</code>。</p><p>这里<code>CollapsingToolbarLayout</code>设置了最小高度<code>minHeight</code>，<code>layout_scrollFlags</code>设置为<code>scroll|exitUntilCollapsed</code>，意味着“<strong>此布局和滚动时间关联</strong>，且<strong>在滚动到达这个最小高度的时候开始折叠</strong>“。</p><p>被折叠的控件设置了<code>layout_collapseMode</code>属性为<code>parallax</code>，意味着“<strong>当触发折叠时，此控件会有视差折叠效果</strong>”，<code>layout_collapseParallaxMultiplier</code>系数设置为0.5，可以自行调节。</p><p>对于在折叠过程中不希望被隐藏的控件，需要设置<code>layout_collapseMode=&quot;pin&quot;</code>，这样就会出现<code>XTabLayout</code><strong>吸顶</strong>的效果了。</p><blockquote><p>具体更详细的属性设置，可以参考下面的链接：<a href="https://www.jianshu.com/p/06c0ae8d9a96">https://www.jianshu.com/p/06c0ae8d9a96</a></p></blockquote><h3 id="设置监听事件"><a href="#设置监听事件" class="headerlink" title="设置监听事件"></a>设置监听事件</h3><p>由于这里需要在工具栏完全折叠的时候在标题展示作者名字和关注按钮，还需要在代码里设置监听事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置监听</span><br>mAppBarLayout.addOnOffsetChangedListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AppBarStateChangeListener</span>() &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStateChanged</span><span class="hljs-params">(AppBarLayout appBarLayout, State state)</span> &#123;<br>    <span class="hljs-keyword">if</span> (state == State.COLLAPSED) &#123;<br>      showTitleBarUserInfo(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      showTitleBarUserInfo(<span class="hljs-literal">false</span>);<br>    &#125;<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 监听实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppBarStateChangeListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AppBarLayout</span>.OnOffsetChangedListener &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    EXPANDED,<br>    COLLAPSED,<br>    IDLE<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">State</span> <span class="hljs-variable">mCurrentState</span> <span class="hljs-operator">=</span> State.IDLE;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Called when the &#123;<span class="hljs-doctag">@link</span> AppBarLayout&#125;&#x27;s layout offset has been changed. This allows</span><br><span class="hljs-comment">  * child views to implement custom behavior based on the offset (for instance pinning a</span><br><span class="hljs-comment">  * view at a certain y value).</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> appBarLayout the &#123;<span class="hljs-doctag">@link</span> AppBarLayout&#125; which offset has changed</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> verticalOffset the vertical offset for the parent &#123;<span class="hljs-doctag">@link</span> AppBarLayout&#125;, in px</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOffsetChanged</span><span class="hljs-params">(AppBarLayout appBarLayout, <span class="hljs-type">int</span> verticalOffset)</span> &#123;<br>    <span class="hljs-keyword">if</span> (verticalOffset == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (mCurrentState != State.EXPANDED) &#123;<br>        onStateChanged(appBarLayout, State.EXPANDED);<br>      &#125;<br>      mCurrentState = State.EXPANDED;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Math.abs(verticalOffset) &gt;= appBarLayout.getTotalScrollRange()) &#123;<br>      <span class="hljs-keyword">if</span> (mCurrentState != State.COLLAPSED) &#123;<br>        onStateChanged(appBarLayout, State.COLLAPSED);<br>      &#125;<br>      mCurrentState = State.COLLAPSED;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (mCurrentState != State.IDLE) &#123;<br>        onStateChanged(appBarLayout, State.IDLE);<br>      &#125;<br>      mCurrentState = State.IDLE;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStateChanged</span><span class="hljs-params">(AppBarLayout appBarLayout, State state)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里监听的其实是AppBarLayout的<code>onOffsetChanged</code>事件，垂直偏移量<code>verticalOffset</code>改变时就会回调这个方法，当AppBarLayout展开时<code>verticalOffset</code>的值为0，折叠过程中<code>verticalOffset</code>为一个<strong>负值</strong>，其绝对值小于<code>appBarLayout.getTotalScrollRange()</code>。</p><h3 id="其他注意"><a href="#其他注意" class="headerlink" title="其他注意"></a>其他注意</h3><ol><li><p><code>AppBarLayout</code>的父类是<code>LinearLayout</code>，写布局时需要注意方向。</p></li><li><p><code>CollapsingToolbarLayout</code>的父类是<code>FrameLayout</code>，写布局时需要<strong>注意控件的添加顺序</strong>，避免折叠时控件显示层级的问题。</p></li></ol><h2 id="问题：Theme-AppCompat-错误"><a href="#问题：Theme-AppCompat-错误" class="headerlink" title="问题：Theme.AppCompat 错误"></a>问题：Theme.AppCompat 错误</h2><p>写完布局的时候，run的时候遇到了一个错误：“**The style on this component requires your app theme to be Theme.AppCompat (or a descendant)**”，有点奇怪。</p><p>大致错误如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Caused by: android<span class="hljs-selector-class">.view</span><span class="hljs-selector-class">.InflateException</span>: Binary XML file line <span class="hljs-number">#100</span> <span class="hljs-keyword">in</span> xxx_layout: Binary XML file line <span class="hljs-number">#100</span> <span class="hljs-keyword">in</span> xxx_layout: Error inflating class com<span class="hljs-selector-class">.google</span><span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.material</span><span class="hljs-selector-class">.XXX</span><br>Caused by: android<span class="hljs-selector-class">.view</span><span class="hljs-selector-class">.InflateException</span>: Binary XML file line <span class="hljs-number">#100</span> <span class="hljs-keyword">in</span> xxx_layout: Error inflating class com<span class="hljs-selector-class">.google</span><span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.material</span><span class="hljs-selector-class">.XXX</span><br>Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.InvocationTargetException</span><br>        at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Constructor</span><span class="hljs-selector-class">.newInstance0</span>(Native Method)<br>        ...<br>Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.IllegalArgumentException</span>: The style on this component requires your app theme to be Theme<span class="hljs-selector-class">.AppCompat</span> (or <span class="hljs-selector-tag">a</span> descendant).<br></code></pre></td></tr></table></figure><p>是在初始化界面解析xml布局文件时出错了，错误大概的原因是，当前Activity用了Material Design控件，但是Activity的theme并不是Material Design。                                                                            </p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>很简单，实现一个<code>Theme.AppCompat</code>的style就行了，具体颜色看情况即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WithAppBarTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;@android:style/Theme.Material.Light.NoActionBar&quot;</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">  ...</span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--添加下面三个名称的颜色(颜色值随便)，样式满足Theme.AppCompat--&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimary&quot;</span>&gt;</span>#ffffff<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimaryDark&quot;</span>&gt;</span>#000000<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorAccent&quot;</span>&gt;</span>#AAAAAA<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="兼容问题：Vivo安卓7崩溃"><a href="#兼容问题：Vivo安卓7崩溃" class="headerlink" title="兼容问题：Vivo安卓7崩溃"></a>兼容问题：Vivo安卓7崩溃</h3><p>在实际测试的过程中发现，在Vivo X9 7.1.2系统进入作者&#x2F;个人页退出会出现系统的onResume崩溃，无法处理，错误堆栈如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">E/VivoSystemReflect: Failure register UserProfilingManager<br>java.lang.ClassNotFoundException: com.vivo.services.userprofiling.UserProfilingManager<br>     at java.lang.Class.classForName(Native Method)<br>     at java.lang.Class.forName(Class.java:<span class="hljs-number">400</span>)<br>     at java.lang.Class.forName(Class.java:<span class="hljs-number">326</span>)<br>     at android.app.VivoSystemReflect.getServiceConstructor(VivoSystemReflect.java:<span class="hljs-number">461</span>)<br>     at android.app.VivoSystemReflect.-wrap0(VivoSystemReflect.java)<br>     at android.app.VivoSystemReflect$<span class="hljs-number">6.</span>createService(VivoSystemReflect.java:<span class="hljs-number">446</span>)<br>     at android.app.SystemServiceRegistry$CachedServiceFetcher.getService(SystemServiceRegistry.java:<span class="hljs-number">858</span>)<br>     at android.app.SystemServiceRegistry.getSystemService(SystemServiceRegistry.java:<span class="hljs-number">799</span>)<br>     at android.app.ContextImpl.getSystemService(ContextImpl.java:<span class="hljs-number">1518</span>)<br>     at android.content.ContextWrapper.getSystemService(ContextWrapper.java:<span class="hljs-number">659</span>)<br>     at android.app.Application.getVivoUserProfilingManager(Application.java:<span class="hljs-number">327</span>)<br>     at android.app.Activity.onResume(Activity.java:<span class="hljs-number">1287</span>)<br>     at android.support.v4.app.FragmentActivity.onResume(FragmentActivity.java:<span class="hljs-number">514</span>)<br>     at com.qihoo.browser.activity.ActivityBase.onResume(ActivityBase.kt:<span class="hljs-number">117</span>)<br>     at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:<span class="hljs-number">1276</span>)<br>     at android.app.Activity.performResume(Activity.java:<span class="hljs-number">6963</span>)<br>     at android.app.ActivityThread.performResumeActivity(ActivityThread.java:<span class="hljs-number">3469</span>)<br></code></pre></td></tr></table></figure><p>页面是可以进入使用的，功能也都正常，但是退出回到上一页面时就触发崩溃，很恼火。经过测试发现是<code>WithAppBarTheme</code>的原因，应该是Vivo 7系统做了什么魔改，导致兼容问题，测试了后面的几个版本都没有问题。</p><p>这个问题我暂时没有什么好办法处理，只能针对这一类别设备做了一个没有AppBarLayout的布局文件，改为<code>Acitivity.onCreate()</code>时动态设置theme，在AppBarLayout使用的地方使用非空判断！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEvilVivoDevice</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vivo&quot;</span>.equals(Build.MANUFACTURER) &amp;&amp; Build.VERSION.RELEASE.startsWith(<span class="hljs-string">&quot;7.&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>  <span class="hljs-keyword">if</span> (!AndroidUtil.isEvilVivoDevice())<br>    setTheme(R.style.WithAppBarTheme); <span class="hljs-comment">// 需要在super.onCreate之前设置Theme</span><br><br>  <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意，这里需要在super.onCreate之前设置Theme。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这里简单记录了下如何使用<code>CoordinatorLayout</code>和<code>AppBarLayout</code>去实现折叠工具栏，第一次使用，还挺有意思。</p><p>其实，本来还打算写一个开发中遇到的“坑”，写了一半去分析源码时，越分析越不对劲，分析了两天，结果发现是自己的问题，感觉自己是个智障🤣🤣🤣🤣🤣🤣，不过分析的过程对<code>CoordinatorLayout</code>测量和绘制的流程理解更深刻了一点，下次单独再写吧。</p><p>最后的最后，兔年第一篇文章，祝大家都“<strong>💰🐰无量</strong>”～</p><p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术总结</tag>
      
      <tag>开发记录</tag>
      
      <tag>Android开发</tag>
      
      <tag>CoordinatorLayout</tag>
      
      <tag>AppBarLayout</tag>
      
      <tag>CollapsingToolbarLayout</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极速浏览器｜2022年浏览器开发总结</title>
    <link href="/2023/01/12/2022-lite-browser-developer-summary/"/>
    <url>/2023/01/12/2022-lite-browser-developer-summary/</url>
    
    <content type="html"><![CDATA[<h2 id="写前面的废话"><a href="#写前面的废话" class="headerlink" title="写前面的废话"></a>写前面的废话</h2><p>一转眼鸽了三个月了，没更新公众号，也没上酷安，就🐑了的时候休息了下，没有闲着，这半年的时间基本上都在死磕内核，真的感觉精力有限。</p><p>到了年底12月中的时候，被叫去支援其他迭代，这才有点时间和精力写点总结，看看22年干了些啥，捋一捋流水帐。</p><h2 id="2022上半年"><a href="#2022上半年" class="headerlink" title="2022上半年"></a>2022上半年</h2><h3 id="一月-三月"><a href="#一月-三月" class="headerlink" title="一月~三月"></a>一月~三月</h3><p><strong>一月</strong>，主要是在<strong>适配Android12</strong>。给索尼手机做的浏览器需要适配Android12，借着这个机会把内核升级适配了。</p><p>这是第一次搞浏览器内核代码，完全是盲人过河，一开始连内核怎么工作的都不知道，只能一点点抠一点点研究，还好得到了一位朋友的指点，跌跌撞撞的也算成功完成了。</p><p><strong>一月底二月初</strong>的时候，还修复了一个遗留很久的<strong>百度搜索视频页面无法点击返回退出的问题</strong>。</p><p><strong>二月到三月</strong>，基本在做<strong>文件管理插件浏览器样式的适配和移植</strong>。</p><p>文件管理插件是从清理大师里移植过来的，里面的最近文件功能是我21年做的，我知道有些人不太喜欢浏览器里的文件管理器，我也不喜欢，但是最近文件我个人觉得还是很好用的，找应用里下载的文件，每周用一次删一些文件，都还可以吧。</p><p><strong>三月</strong>末尾，开始做<strong>新极速版2.0</strong>了。</p><h3 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h3><p><strong>新极速版2.0</strong>算是上半年花费精力最多的事情吧，印象很深刻，在四月底快上线的时候正好赶上我的技术评级答辩，答辩的ppt都没怎么搞。</p><p>因为始终觉得极速浏览器是我自己一直在用的，不想弄差了。接手到手机浏览器的代码也是巧合吧，也就比较上心。</p><p>之前应该和大家有说过，旧极速版目前没人维护了，还是32位版本，重启新极速版2.0的时候，用的是360手机浏览器（绿e）的代码为基础，去除冗余模块及插件，进行改造的。</p><p>新极速继承了旧极速版的用户各种用户配置数据，把原来旧极速有的功能大部分都移植过来了。支持了64位，支持了Android12，优化修改了部分模块功能。本来强迫症设置选项被产品移除了，后来我争取回来的。</p><p>四月基本都在做数据继承、裁剪适配的工作，包括主程序、插件、云控的适配，还有绿e共存的兼容的问题，增加了底部小白条的适配，优化了启动速度。</p><p>由于涉及到32位升级64位程序、而且新旧极速版压根就是两份不同代码，存在技术难度和机型适配问题，最终也算是克服了大部分问题吧，4月29号晚上比较晚的时候，新极速版<strong>2.0.0.100</strong>算是顺利上线了。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/ku-an-release-log.jpg" alt="一些记录"></p><h4 id="关于内测"><a href="#关于内测" class="headerlink" title="关于内测"></a>关于内测</h4><p>因为是自己用的浏览器，想和酷安的同学们分享下，没想到大家那么热情，想要最新的包。</p><p>主要功能完成的差不多的时候，就去推动着运营去发内测包，battle了一段时间，终于算是发出来了，没有食言。</p><p>正式内测的时候，有用户喜欢，也有用户不喜欢，那段时间我也在酷安收集了好多用户反馈，优化了一些进入主页卡慢、界面加载卡顿的问题，改了壁纸闪烁、搜索框位置变动的问题，还增加了底部小白条的适配，等等吧。</p><p>那阵子基本只在群里发内测包，我有时也会偷偷公众号放一些链接。</p><p>因为没办法，这是运营主管的事情，本身我推动就算是越俎代庖吧，另外，我理解的顾虑可能还是未稳定的包大面积铺开，会影响产品口碑的吧。</p><h3 id="五月～七月初"><a href="#五月～七月初" class="headerlink" title="五月～七月初"></a>五月～七月初</h3><p>这段时间就是正常迭代，根据用户的反馈改些问题吧，大概发了6个版本<strong>2.0.1.200</strong>、<strong>2.0.2.100</strong>、<strong>2.0.2.300</strong>、<strong>2.0.2.200</strong>、<strong>2.1.0.100</strong>、<strong>2.1.0.200</strong>、<strong>2.1.0.300</strong>。</p><p>就说下我做的一些工作吧：</p><p><strong>五月</strong></p><ul><li>首页宫格图标优化刷新逻辑，解决一些机型的卡死问题。</li><li>搜索页上划隐藏地址栏。</li><li>搜索引擎的正则表达式优化。</li><li>优化冷启动后主页宫格加载完成导致搜索框上移的问题。</li><li>优化主页壁纸加载，初始化时加载自定义壁纸，避免冷启动先展示白屏再加载壁纸。</li><li>底部菜单栏改为全部可编辑，强迫症增加禁用下载红点。</li><li>解决用户反馈网页上输入文字软件盘遮挡的问题。</li><li>新增了开发者设置页面，这时还只有日志保存功能。</li></ul><p><strong>六月</strong></p><ul><li><p>优化首页搜索框的位置和展示时间。</p></li><li><p>开发者设置里新增“<strong>底部菜单自定义顺序</strong>”导出功能，允许高级用户自己隐藏自己不希望看到的按钮。</p></li><li><p>适配平板平行视界：因为华为鸿蒙&#x2F;小米系统默认给我们的应用开启了平行视界还没法代码关闭，现象就是pad用户拿到手横屏的时候是个小竖屏，统一适配了下，强制横屏填充，设置页什么的就支持分屏，还有一些插件的适配。</p></li><li><p>暗黑模式改版，把原来发灰的暗黑模式背景改成了新的样式，统一替换了所有的资源，包括插件，花了挺长时间的。</p></li><li><p>开发者设置里给大家加了“<strong>强制跟随系统暗黑模式</strong>”，这个是周末自己研究了方案搞了一版，没有产品需求，就加在开发者设置里了。</p></li></ul><h2 id="2022下半年"><a href="#2022下半年" class="headerlink" title="2022下半年"></a>2022下半年</h2><h3 id="新极速收尾"><a href="#新极速收尾" class="headerlink" title="新极速收尾"></a>新极速收尾</h3><p>我在新极速版的开发工作基本上到<strong>7月初</strong>就结束了，2.1.0.200版本之后基本就没在跟进了，七月和八月就是在<strong>开发者设置</strong>里加了些选项，这里感谢产品和测试的宽容，给我留了点自己的东西：</p><ul><li>新增了“<strong>调试内核webview主题颜色</strong>”功能。</li><li>新增“<strong>移除搜索结果页面上的搜索框</strong>”功能：暂仅支持去除百度搜索页搜索框。</li><li>新增：“<strong>重新释放浏览器内核</strong>”和“<strong>常驻开发者调试模式</strong>”。常驻开发者调试模式开启时，设置页面开启开发者设置入口，setWebContentsDebuggingEnabled设置为true。</li><li><strong>彩蛋功能</strong>：开启常驻开发者模式有🤫🤫🤫功能开启。</li><li>新增“<strong>另一种暗黑样式</strong>”，还是个demo功能，搞内核的时候发现的设置接口，后面没时间再去改了。</li></ul><p>总的来说，新极速版我自己是满意的，也是超出100%的投入的，我不再跟主程序开发的时候，线上崩溃率低于0.3％，ANR率低于0.7％，DAU数据也还算好吧。</p><h3 id="内核开发"><a href="#内核开发" class="headerlink" title="内核开发"></a>内核开发</h3><p>在酷安收集用户反馈的时候，发现很多都是浏览器内核的问题，都是我暂时没法处理的，下半年的时间我就转去主做内核相关的开发了。</p><p>说实在的，Chromium内核是我工作快10年来，接触过的最最复杂的系统，没有之一，之前我搞过很长的一段时间的Linux内核开发和Android操作系统开发，都没觉得这么吃力过。</p><p>首先是代码量宏大，3000w行左右的代码，一个项目纯代码文件占用的空间5.2GB，本机从头编译一次要8～12个小时。🤦‍♂️</p><p>先不说本身代码复杂度高，就单浏览器业务场景就很复杂，网页如何被解析被渲染后展示出来，我至今没法说清楚，之前专门做内核的开发全部离职了，也没有留下几页wiki，用盲人过河来形容真的不过分。</p><p>还好有一位之前不是专门做内核的老同事给我讲了些大概的流程，才让我慢慢找到门路。</p><h4 id="全能播放器优化"><a href="#全能播放器优化" class="headerlink" title="全能播放器优化"></a>全能播放器优化</h4><p>下半年我基本上都在做全能播放器的优化，处理用户反馈的各种播放器问题吧，改了很多，可能你们感知并不明显，但我也尽力了吧，可能还引入了一些bug和崩溃，实在抱歉。</p><p>主要做的工作如下吧：</p><ul><li><p><strong>广告过滤数据统计</strong>。</p></li><li><p><strong>播放器倍速优化</strong>：支持更多的快进倍数，支持长按当前速度的2倍速快进；优化了从左划到右快进快退的灵敏度，总时长大概1分半左右，这样就可以一次划动跳过电视剧的片头</p></li><li><p><strong>播放器亮度调整优化</strong>：最低可以调整到0，修复获取系统亮度负值时屏幕很亮的问题。</p></li><li><p><strong>优化翻页距离</strong>：计算时去除顶部地址栏和底部工具栏高度，最终默认系数为0.85。</p></li><li><p><strong>播放器接管位置优化</strong>：包括飞极速、酷客影院、大师兄影视、茶杯狐、虎扑等页面，还有些不可描述的网页（<del>我经常上班需要调试这些你们爱看的网站，导致同事们看我的眼神都很怪</del>🤦‍♂️）。。</p></li><li><p>修复一些机制问题、销毁问题、自动播放导致的崩溃，等等等等吧，这些问题回想起来我都觉得头痛无比。</p></li><li><p>一些<strong>CVE漏洞修复</strong>的工作。</p></li></ul><p>里面有一条<strong>播放器接管位置优化</strong>，就几个字，但是后面付出的艰辛真的巨大。</p><p>以前的全能播放器接管方案上有缺陷，需要获取网页中播放器在网页上的位置，然后在单独绘制一个播放器在相同的位置盖住下面网页原生的播放器，用户划动屏幕时计算网页的滚动距离，然后让播放器界面一起移动。</p><p>正常情况下，这种方案没问题，但是现在很多视频网站（盗版&#x2F;色情&#x2F;盗链），都是一个网页里套着另一个页面，而且开发者还会用各种方案隐藏网页的滚动距离，让用户看起来就是在一个网页里一样。像这种页面，上面的接管方案就失效了，因为这种情况下的滚动事件时获取不到的，这时你们看到的现象就是网页在滚动，但是播放器固定在那儿了。</p><p>做了好些努力吧，加了两三种新机制去获取滚动事件，解决一些网站的接管位置问题，可能还不全，还存在很多问题，希望大家理解吧。</p><p>数了下，下半年从7月中旬到12月中旬总共5个月的时间，内核代码提交了70多次，不包括升级版本号那些无效提交，相当于我每周要提交3.5次代码，也是超出我自己的预料了。</p><h4 id="投屏功能"><a href="#投屏功能" class="headerlink" title="投屏功能"></a>投屏功能</h4><p>极速浏览器和绿e的投屏功能都下架了一段时间，反正事情也过去了，应该可以说了。</p><p>原因是XX投屏SDK开始收费了，本身极速没有广告，只有一点点搜索渠道的钱，非常非常少，和SDK的价格一开始没谈拢，后来服务就被停了，隐藏了投屏入口。</p><p>看到用户反馈比较多，大家还是想要这个功能，就又和投屏SDK谈了价格，这才上了线。</p><h4 id="在做但没做完的"><a href="#在做但没做完的" class="headerlink" title="在做但没做完的"></a>在做但没做完的</h4><p>12月中旬，我在做<strong>电脑模式的优化</strong>工作，想加上一个<strong>网页自动缩放</strong>功能，去解决一些页面在电脑模式下显示异常的问题。</p><p>方案差不多跑通了，可行的。正好赶上项目组又有调整了，耽搁了。</p><p>我争取过完年，有时间把自动缩放的功能排上期，让大家尽快用上。</p><p>还有之前修复一些播放器的bug，也没来得及上线，希望年前有机会再推一次，看看能不能发个内测。</p><h3 id="墨鱼丸视频"><a href="#墨鱼丸视频" class="headerlink" title="墨鱼丸视频"></a>墨鱼丸视频</h3><p>12月中旬的时候，由于人手不足，我来支援墨鱼丸视频的开发，就是绿e第二页的视频，有点像抖音的那种形式。</p><p>和服务端联调也是坎坎坷坷，一言难尽，总算这周一半夜里上了线。</p><p>虽然天天也搞到快10点，但是明显感觉到和内核开发不一样，要简单。</p><p>因为Android开发遇到的各种问题，网络上一搜，总有人会遇到类似的，而内核开发，完全就是自己在摸索，遇到问题，网上也找不到解决方案，只能自己苦苦思考、阅读代码。</p><p>一天下来，虽然都累，但真的不一样，脑袋被掏空的累。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>那天项目组开总结会，看到了些数字，我自己也没想到：“2022年极速版全年发布28个版本”，新极速是4月底上线的，28个版本意味着几乎每周一个版本了。</p><p>当然还有些数字是不尽如人意的，也就是年底有调整的原因。</p><p>2023极速版且行且珍惜吧，希望大家继续支持极速浏览器！🙏</p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>年度总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>年度总结</tag>
      
      <tag>极速浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遇坑总结｜结构体大小与内存对齐问题</title>
    <link href="/2022/10/13/sizeof-struct-and-memory-alignment-of-c-cpp/"/>
    <url>/2022/10/13/sizeof-struct-and-memory-alignment-of-c-cpp/</url>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>最近做Chromium内核播放器相关功能的优化，很久没写cpp代码了，的确有些忘了，遇到了结构体内存对齐引起的奇怪问题。</p><p><strong>问题背景</strong>是这样的：</p><p>极速浏览器提供了全能播放器功能，可以接管网页上的视频播放，提供倍速、快进快退、投屏等等快捷功能。采用的思路是在WebView之上绘制播放器界面，位置的绘制是一开始网页加载时就完成了网页上video标签的位置解析，是<strong>不支持动态解析</strong>的。</p><p>因为有些网站自己实现的播放器滚动吸顶的功能，而这种吸顶其实就属于网页的js动态调整了video标签或者video标签父布局的属性。</p><p>这种情况就GG了，就会出现播放器位置错位的问题。</p><h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>我这次就是修改Chromium内核，支持video及其父布局属性变更的消息通知，简单说就是给父布局增加了一个指针成员变量，指向其包含的视频元素，出现属性变更时就通过视频元素通知到界面上绘制的播放器界面。</p><p>问题就出在这里——“<strong>我给原布局成员增加了一个成员</strong>”。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>static_assert failed due to requirement &#x27;sizeof(blink::LayoutObject) == sizeof(blink::SameSizeAsLayoutObject)&#x27; &quot;LayoutObject should stay small&quot;<br>static_assert(sizeof(LayoutObject) == sizeof(SameSizeAsLayoutObject),<br>^             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>1 error generated.<br></code></pre></td></tr></table></figure><p>源码里有这么一段代码，声明了一个结构体<code>struct SameSizeAsLayoutObject</code>，就是为了保证<code>LayoutObject</code>对象的大小始终很小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SameSizeAsLayoutObject</span> : ImageResourceObserver, DisplayItemClient &#123;<br>  <span class="hljs-comment">// Normally this field uses the gap between DisplayItemClient and</span><br>  <span class="hljs-comment">// LayoutObject&#x27;s other fields.</span><br>  <span class="hljs-type">uint8_t</span> paint_invalidation_reason_;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> DCHECK_IS_ON()</span><br>  <span class="hljs-type">unsigned</span> debug_bitfields_;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-type">unsigned</span> bitfields_;<br>  <span class="hljs-type">unsigned</span> bitfields2_;<br>  <span class="hljs-type">unsigned</span> bitfields3_;<br>  <span class="hljs-type">void</span>* pointers[<span class="hljs-number">4</span>];<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(USE_360HACK)</span><br>  <span class="hljs-type">void</span>* child_video_object_;  <span class="hljs-comment">// 保证下面的static_assert成立</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  Member&lt;<span class="hljs-type">void</span>*&gt; members[<span class="hljs-number">1</span>];<br>  <span class="hljs-comment">// The following fields are in FragmentData.</span><br>  IntRect visual_rect_;<br>  PhysicalOffset paint_offset_;<br>  std::unique_ptr&lt;<span class="hljs-type">int</span>&gt; rare_data_;<br>&#125;;<br><br><span class="hljs-built_in">static_assert</span>(<span class="hljs-built_in">sizeof</span>(LayoutObject) == <span class="hljs-built_in">sizeof</span>(SameSizeAsLayoutObject),<br>              <span class="hljs-string">&quot;LayoutObject should stay small&quot;</span>);<br></code></pre></td></tr></table></figure><p>当时我已经在<code>LayoutObject</code>对象中加入了一个<code>void* child_video_object_</code>成员，这里其实补上一个就好了，本来想着加在最后的，结果本着强迫症的原因就把新成员和之前的<code>void* pointers[4]</code>放在一起了！</p><p>本地测试的时候没问题，一切正常，可是到线上编译release版内核的时候出现了问题！</p><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>一开始还以为是自己漏提交代码了，查了下不是的。当时就觉得很奇怪，本地一切正常啊，该加的成员两边都加了，还去找同事说来着，结果聊着聊着自己就发现不对了！</p><p>因为本地测试的时候是编的32位Debug版，线上是64位Release版！这里就是一个静态断言，而<code>sizeof</code>运算符在编译时就会确定变量的大小，只有可能是32位和64位编译环境引起的对齐问题！</p><p><code>void*</code>是个指针，是一个内存地址值，而内存地址的大小是和平台架构有关的！在32位平台上就是4个字节，64位上是8个字节！</p><p><strong>C&#x2F;C++编译时会对<code>class</code>或<code>struct</code>类型进行内存对齐，成员变量的类型与顺序会影响<code>sizeof</code>最终值的大小。</strong></p><p>本地编译没问题其实是碰巧，因为在<code>LayoutObject</code>中新添加成员的位置和<code>struct SameSizeAsLayoutObject</code>是不同的，但32位4个字节对齐碰巧相等了而已，在64位变成了8个字节导致了问题的出现！</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>知道了问题的原因，解决起来就很简单了。</p><p><strong>在工程实践中，扩展一个类或者结构体时，新增加的成员最好放在最后</strong>，这样是最保险的，因为之前的类&#x2F;结构体大小都是计算好的，放在最后一定不会影响整体大小的计算。</p><p><strong>那放在最前面可以么？</strong></p><p>仅考虑<code>sizeof</code>的这一场景，其实是ok的。但是想了下，一旦项目里有那种将内存中结构体数据直接保存在本地磁盘的代码时，新旧版本的数据兼容可能会有点问题，反序列化转换时要小心。</p><p>如果新增加的成员如果必须要放在中间，那就要考虑到内存对齐的问题，要自己计算好，放在相同的位置。</p><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>特意去翻了下《C++ Primer》一书，其中是没有讲内存对齐相关知识的，仔细一想也是，应该属于编译器考虑的范畴。下面是我一点点个人理解，可能有不太准确的地方。</p><h3 id="什么是内存对齐"><a href="#什么是内存对齐" class="headerlink" title="什么是内存对齐"></a>什么是内存对齐</h3><p>提到内存对齐的时候，通常会说“<strong>n字节对齐</strong>”。引用wikipedia上的定义：</p><blockquote><p>内存地址a被称为n字节对齐，a是n的倍数（n应是2的幂），也可以理解为当被访问的数据长度为n 字节时，数据地址为n字节对齐。如果内存未对齐，称作misaligned。</p></blockquote><p>可能一下子读不懂，没关系。简单来说，<strong>一个变量在内存中的地址其实适合这个变量的长度有关</strong>。</p><p>如果变量a是n字节内存对齐的，那么，<strong>a在内存中的地址一定是n的整数倍</strong>。假设变量a在内存中的地址为<code>addr(a)</code>，那么，<code>addr(a) % n</code>的值应该为0。</p><p>莫慌，大部分情况下<code>n</code>的值和<code>sizeof(a)</code>一致。</p><blockquote><p>参考网址：<a href="https://www.cs.umd.edu/~meesh/cmsc411/website/projects/outer/memory/align.htm">https://www.cs.umd.edu/~meesh/cmsc411/website/projects/outer/memory/align.htm</a></p></blockquote><p><strong>像类&#x2F;结构体这种聚合类型的数据结构，就要求其内部组成的成员元素是对齐的。</strong></p><p>我们单独看结构体内部，第一个成员相对于结构体本身的偏移量是0，可以简单的先把第一个成员地址当作是0，<strong>其余成员的偏移量都应该其实际长度的整数倍</strong>，这样就中间就会空余出一部分内存，这就会造成结构体的内存占用大小，并不一定是所有成员占用的实际空间。</p><p>结构体内部对齐后，所占用的空间才确定下来，这时还会针对结构体的大小进行一次对齐，保证结构体自身的内存地址也是对齐的。</p><p>再举个例子，假设有这样一个结构体：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-type">char</span> a;<br>  <span class="hljs-type">short</span> b;<br>  <span class="hljs-type">short</span> c;<br>  <span class="hljs-type">int</span> d;<br>  <span class="hljs-type">double</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><p>在64位CPU架构上，<code>char</code>占用1个字节、<code>short</code>是2个字节，<code>int</code>是4个字节、<code>double</code>是8个字节。对齐后的内存空间占用应该如下，其中每一个格子代表一个字节大小：</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/struct-with-memory-alignment.png" alt="struct-with-memory-alignment"></p><h3 id="为什么要内存对齐"><a href="#为什么要内存对齐" class="headerlink" title="为什么要内存对齐"></a>为什么要内存对齐</h3><p>内存对齐其实是和计算机硬件设计有关系的。32位的CPU意味着拥有32根地址线，这32根地址线上的高低电平表示着0或者1，代表着一个32位的二进制数，运算器一次运算处理的数据宽度就是32，寄存器宽度也是32，等等。</p><p>但我们的编程语言中有各种各样的基础类型，它们的占用空间是不一致的）。</p><p>为了保证CPU运算的高效，通常都会对内存中的数据进行对齐处理，这样一次寻址可以保证读取到完整的数据。</p><p>还是上面那个结构体，假设起始地址都是从0开始，如果没有内存对齐的话，它在内存中大概率是这个样子的。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/struct-without-memory-alignment.png" alt="struct-without-memory-alignment"></p><p>假如现在想读取<code>int d</code>的值，CPU第一次寻址得到的数据是[0, 7]，这时<code>d</code>只读了3个字节，再读一次，[8, 15]，才可以把<code>d</code>的全部字节读到。</p><p>可是，如果CPU想使用<code>d</code>的值，还需要额外的移位操作才能把全部字节拼到一个寄存器中。</p><p>这显然是效率低下，不能接受的。而对齐后的结构体，一次寻址就OK了。</p><p>这张图画的比较清楚，摘自<a href="http://www.songho.ca/misc/alignment/dataalign.html">http://www.songho.ca/misc/alignment/dataalign.html</a></p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/d0a4237210d9110b06cc02b5ec014b3ba24db2b4/img/cpu-access-misaligned-data.jpeg" alt="Accessing Misaligned data"></p><h3 id="需要特别注意的类型"><a href="#需要特别注意的类型" class="headerlink" title="需要特别注意的类型"></a>需要特别注意的类型</h3><p>这次问题出现的另一个原因还是CPU架构的变化，之前给钉钉做加密SDK的时候也有遇到过多架构的适配情况，那种情况更复杂，还要不仅要考虑32位和64位，甚至要考虑x86、arm和mips架构。</p><p>前面提到n字节对齐时提到大部分场景n都和类型长度相同，下面列一下，n字节对齐和类型长度有区别，以及32位和64位CPU下有区别的情况，一般Android开发就够了。</p><table><thead><tr><th>基本类型</th><th>32位长度</th><th>32位n字节对齐</th><th>64位长度</th><th>64位n字节对齐</th></tr></thead><tbody><tr><td>long</td><td>4</td><td>4</td><td>8</td><td>8</td></tr><tr><td>long long</td><td>8</td><td>4</td><td>8</td><td>8</td></tr><tr><td>指针</td><td>4</td><td>4</td><td>8</td><td>8</td></tr></tbody></table><blockquote><p>参考网址：<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%B9%E9%BD%90">https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%B9%E9%BD%90</a></p></blockquote><h2 id="如何自己实现sizeof"><a href="#如何自己实现sizeof" class="headerlink" title="如何自己实现sizeof"></a>如何自己实现<code>sizeof</code></h2><p>因为出问题是和<code>sizeof</code>有关，但其本身是个运算符，看不到源码，网络上有些自己用宏定义实现的方案，有些代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> my_sizeof(x) ((&amp;x + 1) - &amp;x)</span><br></code></pre></td></tr></table></figure><p>这样真的对么？</p><p>其实是错误的，这个宏定义运算得到的值永远为1！</p><p>这段代码中，<code>&amp;x</code>代表取x的地址，<strong>在C&#x2F;C++语言中地址&#x2F;指针的算术运算其实和指针指向的对象长度有关系</strong>！</p><p><code>指针+1</code>并不是只是数值上加1，加上的是指针所指向的对象长度，相当于加上了一个<code>sizeof</code>。那这样说，不应该实现的没问题么？得到的应该是<code>sizeof</code>的值才对啊？</p><p><strong>其实指针也是有类型的，准确的原因是，指向对象的类型是不同的。</strong></p><p>假如这里的x是一个<code>double</code>类型，那么，<code>((&amp;x + 1) - &amp;x)</code>表达式中的<code>&amp;x+1</code>和<code>&amp;x</code>的类型其实是是<code>double*</code>，<strong>两个<code>double*</code>的指针之间的减法的值，其实是几个<code>double</code>类型的长度，而不是具体的字节数，有点和指针<code>+1</code>中的1有点类似。</strong></p><p>修改一下上面的表达式，都强制转换位<code>char*</code>类型即可，因为<code>char</code>的长度是1个字节，这样就成功的转换成字节数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> my_sizeof(x) ((char *)(&amp;x + 1) - (char *)&amp;x)</span><br></code></pre></td></tr></table></figure><blockquote><p>参考网址：<a href="https://stackoverflow.com/questions/14171117/implementation-of-sizeof-operator">https://stackoverflow.com/questions/14171117/implementation-of-sizeof-operator</a></p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这就是一个最近的踩坑记录吧，顺便复习了下内存对齐的相关知识，还有些奇奇怪怪的和内存对齐相关、结构体大小相关的知识点没写，下次有空再写。</p><p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>遇坑总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>极速浏览器</tag>
      
      <tag>遇坑总结</tag>
      
      <tag>C/C++</tag>
      
      <tag>内存对齐</tag>
      
      <tag>Chromium内核</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极速浏览器｜开发者教你常驻开发者模式🌈🥚</title>
    <link href="/2022/09/15/how-to-sink-in-debug-mode-of-360-lite-browser-by-developer/"/>
    <url>/2022/09/15/how-to-sink-in-debug-mode-of-360-lite-browser-by-developer/</url>
    
    <content type="html"><![CDATA[<h2 id="写前面的废话"><a href="#写前面的废话" class="headerlink" title="写前面的废话"></a>写前面的废话</h2><p>Hi 大家好，我是小黑，又见面了。</p><p>昨天极速浏览器<code>3.0.3.100</code>版本已经上线了，陆续推送更新中。</p><p>新版本很多是内核的改动，网页上支持切换播放器了，解决了网页放大缩小位置的问题，修复了一些接管播放器的位置问题（可能某些网站还不太正常），优化了播放器接管策略提高成功率，优化了翻页时位移距离等等吧。</p><p>开发者设置里又给加了两个新选项，<strong>重新释放浏览器内核</strong>和<strong>常驻开发者模式</strong>。其实顾名思义，很好理解，但是还是给大家啰嗦介绍下吧。</p><h2 id="进入开发者设置"><a href="#进入开发者设置" class="headerlink" title="进入开发者设置"></a>进入开发者设置</h2><p>进入『开发者设置』有两种方法：</p><p>第一种，进入“设置” - “关于”页面，然后<strong>连续、快速点击顶部标题栏</strong>“关于360极速浏览器”，直到进入开发者设置页。</p><p>第二种，点击<strong>地址栏或者首页搜索框</strong>，输入<code>rfw://config</code>，即可进入。</p><h2 id="重新释放浏览器内核"><a href="#重新释放浏览器内核" class="headerlink" title="重新释放浏览器内核"></a>重新释放浏览器内核</h2><blockquote><p>⚠️注意：内测群的小伙伴或者安装了内测包的小伙伴请注意下这个功能。</p></blockquote><p>极速浏览器是基于Chromium 81内核版本的，很多功能是依赖于自定义的浏览器内核实现的，包括全能播放器、广告过滤、强制夜间模式等等。</p><p>浏览器的内核是程序冷启动时动态释放的，有时候你们启动应用看到的1%~100%的过程，就是在释放内核。</p><p>由于释放逻辑依赖于内核版本号，所以有些小伙伴内测群里的小伙伴更新内测包之后发现bug还在，还有问题，很可能的情况是内核版本号相同，未能正确释放。</p><p><strong>之前只能通过清除应用数据的方式还原到首次安装的状态来解决问题，现在可以尝试点击这个选项尝试下了，清除数据作为最最后的手段吧。</strong></p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/360-lite-browser-force-release-qwvkernel.png" alt="重新释放内核"></p><h2 id="常驻开发者模式"><a href="#常驻开发者模式" class="headerlink" title="常驻开发者模式"></a>常驻开发者模式</h2><p>这个选项看字面其实就知道，是为了不用每次都费劲输入特殊地址进入开发者设置页面而设计的。</p><p>开启这个选项后，会在<code>设置</code>页面多出来一个<code>开发者设置</code>入口，直接点击进入就好了。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/360-lite-browser-developer-settings-in-settings-activity.png" alt="常驻开发者设置"></p><p>除了表面上的常驻，其实<strong>开启后还会启用一些我们开发者调试所需要的一些功能</strong>，比如WebView的调试（开启后可以通过电脑端的Chrome浏览器inspect调试网页）等等。</p><p><strong>还有一些功能可能也会通过这个模式开启哦，欢迎大家尝试！🌈🥚🌈🥚🌈🥚</strong></p><p><em>P.S. 之前酷安上说过的功能哈，你们懂的！</em></p><p><em>突然在想，是不是可以把Chrome里的小恐龙跳跳跳游戏搞过来。</em></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>内测QQ群号594647576，欢迎加入。</p><p>下次开发者选项更新的时候再见吧，希望大家多多支持极速浏览器！🙏</p><p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>极速浏览器</tag>
      
      <tag>开发者设置</tag>
      
      <tag>自定义</tag>
      
      <tag>彩蛋</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极速浏览器｜开发者教你自定义网页暗黑模式颜色</title>
    <link href="/2022/09/01/how-to-custom-webview-dark-color-of-360-lite-browser-by-developer/"/>
    <url>/2022/09/01/how-to-custom-webview-dark-color-of-360-lite-browser-by-developer/</url>
    
    <content type="html"><![CDATA[<h2 id="写前面的废话"><a href="#写前面的废话" class="headerlink" title="写前面的废话"></a>写前面的废话</h2><p>酷安好久没上了，搞内核太费精力，就一直拖欠着没看酷安的反馈，实在不好意思。</p><p>上个教程『<a href="https://wuruofan.com/2022/07/31/how-to-custom-bottom-menu-of-360-lite-browser-by-developer/">极速浏览器｜开发者教你自定义底部菜单</a>』写了如何自定义底部菜单，当时的版本没法恢复默认设置，现在已经可以支持保存空白字符串恢复默认设置啦，有需要的小伙伴可以再尝试下。</p><p>之前看到酷安有同学反馈新的暗黑模式在Amoled屏幕显示灰蒙蒙的，看上去像是LCD屏幕，有点难受也不够省电。😂😂</p><p>其实，『开发者设置』里我留了一个设置网页暗黑模式调试的接口，今天简单教大家如何设置一下，方便Amoled屏手机同学使用全黑样式。</p><h2 id="进入开发者设置"><a href="#进入开发者设置" class="headerlink" title="进入开发者设置"></a>进入开发者设置</h2><p>进入『开发者设置』有两种方法：</p><p>第一种，进入“设置” - “关于”页面，然后<strong>连续、快速点击顶部标题栏</strong>“关于360极速浏览器”，直到进入开发者设置页。</p><p>第二种，点击<strong>地址栏或者首页搜索框</strong>，输入<code>rfw://config</code>，即可进入。</p><h2 id="设置内核主题颜色"><a href="#设置内核主题颜色" class="headerlink" title="设置内核主题颜色"></a>设置内核主题颜色</h2><p>开启『调试内核主题颜色』设置开关，之后就会看到『设置内核主题颜色』的设置项。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/c1906ef22c202e8882a0b0cae972bde7b117b122/img/360-lite-browser-settings-dev-activity.png" alt="开发者设置页"></p><p>点击之后，会弹出一个对话卡，这里列举了可以设置的6个选项，我们主要关注的几个设置是<strong>背景颜色</strong>、<strong>文字颜色</strong>、<strong>超链接颜色</strong>、以及<strong>图片亮度</strong>。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/c1906ef22c202e8882a0b0cae972bde7b117b122/img/360-lite-browser-webview-color-config.png" alt="设置内核主题颜色"></p><p>以之前提到的Amoled屏幕全黑背景的需求为例，这里我们只需要把<code>背景颜色</code>一栏设置为<code>#000000</code>即可。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/360-lite-browser-webview-black-background.gif" alt="设置网页全黑背景"></p><p>关于颜色值可以去百度上搜索“网页颜色代码”类似关键字，找你满意的背景或文字颜色。<strong>这里支持的颜色代码可以是6位不带透明度的颜色代码，也可以是8位带透明度的颜色代码。</strong></p><p><strong>注意</strong>：目前这个接口支持调试网页上的颜色，还没法调整其他控件的颜色。</p><p>关于<code>渐变颜色亮度</code>，就是网页上的有些渐变会采用降低亮度的方式处理，这里后期可能会改；<code>边框颜色</code>看代码应该适合表格边框有关系，这两项可以暂时忽略。</p><p><strong>后期</strong>我想重写下强制暗黑的逻辑，现在统一替换背景色有点粗暴，会导致网页上很多层次和颜色丢失，还得看看有没有更好的方案。</p><h2 id="关于内测群"><a href="#关于内测群" class="headerlink" title="关于内测群"></a>关于内测群</h2><p>之前的极速浏览器QQ群由于小伙伴们讨论了些敏感问题，被封了。。现在新QQ群号是：594647576，大家辛苦再加一下吧，基本上每周现在都会有一个内测体验包发布。</p><p>以后用户反馈最好都在内测群吧，我的boss也在群里，直接<code>@360浏览器技术支持</code> 反馈会更快调动资源。</p><p>希望大家多多支持极速浏览器！🙏</p><p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>极速浏览器</tag>
      
      <tag>开发者设置</tag>
      
      <tag>自定义</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极速浏览器｜开发者教你自定义底部菜单</title>
    <link href="/2022/07/31/how-to-custom-bottom-menu-of-360-lite-browser-by-developer/"/>
    <url>/2022/07/31/how-to-custom-bottom-menu-of-360-lite-browser-by-developer/</url>
    
    <content type="html"><![CDATA[<h2 id="写前面的废话"><a href="#写前面的废话" class="headerlink" title="写前面的废话"></a>写前面的废话</h2><p>很久没更新了，我知道很多朋友关注这个公众号是因为极速浏览器2.0内测，但是自从参与到极速浏览器的开发中，便忙到飞起，就更没精力去更新了……😂😂</p><p>因为极速浏览器是我一直用的浏览器，也是机缘巧合交接到我现在的开发组，总想着能做的好一些，由于一系列的历史原因，还有很多事情可以做。</p><p>我偷偷的加了个开发者设置，有些酷安上的小伙伴知道，加了些我自己用的小功能，比如说强制跟随系统深色模式。</p><p>其实，还有个隐藏设置项，这次告诉大家，<strong>感谢大家的关注和没有跑路</strong>🙏。</p><h2 id="正常自定义底部菜单"><a href="#正常自定义底部菜单" class="headerlink" title="正常自定义底部菜单"></a>正常自定义底部菜单</h2><p>先说常规操作，已经知道的同学可以跳过。</p><p>点击极速浏览器的<strong>底部工具栏最中间的菜单按钮</strong>（“三条短横线”按钮），会弹出底部菜单，这个其实是个<strong>“抽屉式”的设计</strong>，向上拉动，可以看到更多的功能项，这里全部展示后，<strong>右下角有一个编辑按钮</strong>，点击即可<strong>编辑顺序</strong>了。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/360-lite-browser-custom-bottom-menu.jpg" alt="底部菜单上划展开"></p><p><strong>第一排原来是固定的一些入口</strong>，有些不是所有人都用到的功能在第一排，无法编辑挺恼火的，比如“书架”、“视频”我个人是不用的，有些人又特别反感文件管理器，天天酷安抱怨。</p><p>所以，在2.0.2还是哪个版本之后全都改成可以编辑了，但是<strong>这种正常方法只能把常用的功能放到前两排</strong>，全部展开的时候还是可以看到那些你不喜欢的功能，有些强迫症同学可能会很难受😂。</p><h2 id="更高级的定制"><a href="#更高级的定制" class="headerlink" title="更高级的定制"></a>更高级的定制</h2><p>就需要使用到我在隐藏的开发者设置页面中的隐藏设置项啦。</p><h3 id="进入开发者设置的两种方法"><a href="#进入开发者设置的两种方法" class="headerlink" title="进入开发者设置的两种方法"></a>进入开发者设置的两种方法</h3><p>第一种，进入“设置” - “关于”页面，然后<strong>连续、快速点击顶部标题栏</strong>“关于360极速浏览器”，直到进入开发者设置页。</p><p>第二种，点击<strong>地址栏或者首页搜索框</strong>，输入<code>rfw://config</code>，即可进入。</p><h3 id="打开隐藏设置项"><a href="#打开隐藏设置项" class="headerlink" title="打开隐藏设置项"></a>打开隐藏设置项</h3><p>正常情况下，开发者设置里只有一两个选项，我这里是开发版本的截图，和线上版本不太一样。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/360-lite-browser-entry-developer-settings.gif" alt="找到隐藏设置"></p><p>这里的操作需要注意，长按空白的标题栏，手机震动一下，会出现隐藏的“<strong>底部菜单自定义顺序</strong>”。</p><p>点击设置项，可以看到一串由<code>_</code>间隔的数字，这个就代表着底部自定义菜单的顺序。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">100_101_11_1_10_0_2_3_20_4_7_6_8_9_5_12_13_15_16_102_104_19_18_103_17_<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：如果有小伙伴点开发现是空的，是因为你从来没有自定义编辑过菜单，参照前面的方法，去随便调整下顺序，再回来就可以看到了。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/360-lite-browser-save-bottom-menu-sequences.jpg" alt="底部菜单自定义顺序"></p><p>我们在回来看这段数字，<strong>从左至右，每个数字代表底部菜单的一个按钮，顺序是从左至右从上往下排列；100以上的数字代表的是原来第一排固定的图标</strong>。</p><p>现在你可以对照着你的底部菜单顺序，找一下对应的数字，不想要看到出现的按钮，<strong>删掉对应数字和后面的<code>_</code>就可以啦</strong>。最后记得要以<code>_</code>结尾哦。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>加入这个设置项的初衷是我用自己的手机开发，总是要卸载重装测试，用于备份底部菜单顺序的，尝试了下还可以做到隐藏，现在分享给大家，enjoy yourself吧！</p><p>预告一下，<strong>下周新UI应该会正式上线了</strong>，之前加的“跟随系统暗黑”也有“名份”了，桌面图标名支持改回“极速浏览器”，播放器支持1s快进快退，等等吧。</p><p>这个迭代虽然我没怎么参与，但是开发者选项里给大家加了一个我自用的小功能。</p><p>还希望大家多多支持极速浏览器🙏！不知道极速浏览器还能走多远，且行且珍惜吧。</p><p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>极速浏览器</tag>
      
      <tag>开发者设置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20分钟入门｜Terminal与Unix Shell——程序员应该知道的那些事儿</title>
    <link href="/2022/03/21/20-minutes-learning-terminal-and-unix-shell/"/>
    <url>/2022/03/21/20-minutes-learning-terminal-and-unix-shell/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/unix-logo.jpeg" alt="Unix"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这是一篇一直想写的东西，在上一份工作的时候给新员工培训，我就发现不止新入职的员工，很多多年工作经验的同事也对Unix系统和Shell知之甚少，然而<strong>这些知识可以更好点帮你认识你所使用的系统原理、语言设计思想、提高工作效率。</strong></p><p><strong>整篇文章包含两部分，这是下半部分</strong>，主要介绍<strong>什么是Terminal</strong>、<strong>什么是Shell</strong>、以及<strong>一些好用的Shell命令</strong>和<strong>Terminal快捷键</strong>。</p><blockquote><p>上半部分参见：<a href="https://wuruofan.com/2022/03/09/20-minutes-learning-unix-system-and-its-philosophy/">20分钟入门｜Unix系统与设计哲学——程序员应该知道的那些事儿 </a></p></blockquote><p><p>阅读完上下整篇文章，你会：</p><ul><li>✅ 了解Unix系统特性与设计思想，了解Unix系统目录结构，以及各个目录功能。</li><li>✅ 了解什么是终端和Shell，以及关于环境变量。</li><li>✅ 获得一些实用的居家旅行、高效工作的 <del><em>装X技巧</em></del> Shell和终端使用技巧。</li></ul><h2 id="什么是Terminal？"><a href="#什么是Terminal？" class="headerlink" title="什么是Terminal？"></a>什么是Terminal？</h2><p>维基百科的解释：<strong>终端其实就是一种输入输出设备</strong>，相对于计算机主机而言属于外设，本身并不提供运算处理功能。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/34d4ed9f54bf5fbb60e9104e6b57e9a6342059a3/img/terminal-network-workgroup.png" alt="终端与中心主机"></p><p>Unix系统的设计初衷便是多用户、多任务的，因此才会产生了多个终端同时访问一台计算机的情况。</p><p>这个概念和今天的云主机很像，用户不需要拥有一台完整的主机，只需要一套输入（键盘鼠标）输出（显示器）设备即可，前提是网络通畅。腾讯在搞的云游戏主机也是这种。</p><p>我个人的理解，这个单词的词根是<strong>term</strong>，“界限，终点”的意思，<strong>对于“终端”来说，起点是计算机，终点是用户，用户所使用的和计算机交互的设备便是终端。</strong>在通讯行业，我们的手机也是个人终端，起点是中心网络，终点也是用户。</p><p>通讯是双向的，从用户到计算机的连接，<strong>用户与计算机沟通的载体便是Shell。</strong></p><h2 id="什么是Shell？"><a href="#什么是Shell？" class="headerlink" title="什么是Shell？"></a>什么是Shell？</h2><p>维基百科的定义：<strong>Shell</strong>（也称为<strong>壳层</strong>）在计算机科学中指<strong>“为用户提供用户界面”的软件</strong>，通常指的是命令行界面的解析器。</p><p>Shell的直译是“壳”，就是只包裹在内核外层的部分，作为和用户之间交互的接口暴露的部分；广义上讲，Shell包括了命令行界面（CLI，<strong>C</strong>ommand-<strong>L</strong>ine <strong>I</strong>nterface）和图形交互界面（GUI，<strong>G</strong>raphical <strong>U</strong>ser <strong>I</strong>nterface）。</p><blockquote><p>参考资料：<a href="https://zh.wikipedia.org/wiki/%E6%AE%BC%E5%B1%A4">维基百科 - 壳层</a></p></blockquote><p>我个人的理解：Shell程序主要用于管理你与操作系统之间的交互：<strong>等待你输入操作，并向操作系统解释你的输入；同时处理各种各样的操作系统的输出结果，并展示给你。</strong></p><p>除此之外，<strong>Shell也是控制系统的脚本语言，提供了很简单的控制语句。</strong>在Windows系统，大部分用户从来都不会使用到shell，然而在Unix系统中，shell仍然控制着系统启动、各种软件的运行。</p><p>我找了两张图来说明Shell在Unix系统中的位置。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/34d4ed9f54bf5fbb60e9104e6b57e9a6342059a3/img/UNIX%20Architecture.gif" alt="Section 1.2. UNIX Architecture | Advanced Programming in the UNIX  Environment, Second Edition (Addison-Wesley Professional Computing Series)"></p><p>第一张是《Unix高级编程》一书的插图，这本书非常好，有兴趣的同学可以作为工具书翻阅一下。</p><p>这张图绘制的很好，我们可以看到在system calls（系统调用）的外层并不是一个完整的圈层，就意味着shell不是唯一和内核交互的通道，应用程序可以直接和内核通过系统调用进行调用，这个调用的过程通常被称为系统陷入（trap），用户态程序通过trap指令切换到内核中进行执行。</p><p>第二张图是一张地球地质结构的图，地球大致分为三层，从外往内是地壳、地幔、地核。</p><p>我们日常生活接触的山川、湖泊、森林、平原都属于地壳，是我们和地球“交互”进而生存的环境，当然也存在火山、地震引起的裂缝这样不寻常的“接口”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/25f3b4d04aae9525ba61a9da8da71c2eb791e378/img/earth-crust-cutaway.png" alt="地幔- 维基百科，自由的百科全书"></p><h3 id="常用Shell程序"><a href="#常用Shell程序" class="headerlink" title="常用Shell程序"></a>常用Shell程序</h3><p>我们可以通过<code>cat /etc/shells</code>，查看当前系统支持的shell程序。</p><p>Unix历史第一个shell是由其作者实现的，被称作<strong>Thompson Shell</strong>，缩写是<code>sh</code>，支持重定向<code>&gt;</code>、<code>&lt;</code>和流水线<code>|</code>命令。</p><p>后来被<strong>Bourne Shell</strong>同名替换了，缩写也是<code>sh</code>，但是扩展支持了管道功能。</p><p>这两个shell都是以作者的名字进行命名的。</p><h4 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h4><p>bash的全称是<strong>Bourne-Again Shell</strong>，也是一个双关语（ born again），替换了之前的Bourne Shell，支持了更多的特性。</p><p>bash可以说是应用最广泛的Shell程序，是绝大部分Linux发行版的默认shell，MacOS Mojave及之前的版本的默认shell也是它。</p><h4 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h4><p>zsh对Bourne shell做出了大量改进，同时加入了bash、ksh及tcsh的某些功能。macOS Catalina，默认Shell以zsh取代。</p><p>个人感觉：<strong>zsh总体上来说，比bash更“时髦”一些</strong>，一个名为“Oh-My-Zsh”的社区，一直在维护、收集zsh可用的各类插件、主题配置，很多特性可以通过安装是“Oh-My-Zsh”扩展工具集，进行体验和使用。</p><p>zsh提供了一个<code>z</code>命令，输入<code>z &lt;目录名称&gt;</code>，便会跳转到你最经常使用的目录中。通常默认shell支持单击Tab键补全命令&#x2F;文件的剩余字符，双击Tab键提示候选词列表，这个<code>z</code>本质上是基于历史输入记录的补全。</p><p>其实这个实现原理并不难，Unix系统<code>history</code>命令对于历史运行的命令都有记录，一个加权评分策略的设计与应用就可以让用户体验提升，这是值得我们反思的。</p><p>对于脚本，zsh还提供了更强大的自定义补全功能，交互上更友善。</p><blockquote><p><strong>扩展阅读</strong>：</p><p>这里有一个意思的点，zsh是作者（Paul Falstad）在普林斯顿上学时开发的，zsh的命名来自于他的老师Zhong Shao（邵中）的名字，作者觉得这位邵中老师的shell用户名“zsh”很适合作为一个shell程序的名字。<a href="http://www.guckes.net/zsh/lover.html">The Z-Shell (ZSH) Lovers’ Page</a></p><p>查了下资料，Zhong Shao, B.S., University of Science and Technology of China, 1988 M.A., Ph.D., Princeton University, 1991, 1994. Joined Yale Faculty 1994.。</p></blockquote><h3 id="什么是环境变量？"><a href="#什么是环境变量？" class="headerlink" title="什么是环境变量？"></a>什么是环境变量？</h3><p>作为程序员，我们经常会遇到环境变量（Environment variable）这个词汇，不管是Windows还是Unix系统，我们遇到最多的场景就是，把xxx路径加入到$PATH环境变量中去。</p><p>环境变量，就是指<strong>计算机配置的一些影响进程运行状态的变量值</strong>。维基百科的原文是：An environment variable is a dynamic-named value that can affect the way running processes will behave on a computer.</p><p>简单举个例子帮助大家理解，“领导&#x2F;老板”这就是个典型的环境变量，你我他代表着不同的进程，你、我、他的老板都是老板，但是未必是同一个老板，当然，工作部门的变更也会导致“老板”这个值的变更。</p><p>我们常见的<code>$PATH</code>、<code>$HOME</code>、<code>$TEMP</code>等等，这些变量的值是可变的，一个进程运行时会去查询当前运行环境中这些值是什么，然后在决定运行路径、查询路径或保存路径等。</p><p>在UNIX系统中，每个进程都有其各自的环境变量设置。缺省情况下, 当一个进程被创建时，除了创建过程中的明确更改外，它继承了其父进程的绝大部分环境设置（fork的原理）。</p><h4 id="环境变量存储在哪儿？"><a href="#环境变量存储在哪儿？" class="headerlink" title="环境变量存储在哪儿？"></a>环境变量存储在哪儿？</h4><p>默认环境变量的值，通常保存在shell程序的配置文件里。</p><p>对于bash来说，系统默认的全局配置存储在<code>/etc/bashrc</code>，个人配置通常位于当前用户的Home目录中的<code>~/.bash_profile</code>、<code>~/.bashrc</code>配置文件中。</p><p>zsh与之类似，默认在<code>/etc/zprofile</code>、<code>/etc/zshrc</code>，个人配置在<code>~/.zshrc</code>中。</p><p>Shell程序启动时，会默认加载<code>/etc/</code>目录下对应shell程序的配置文件，然后再去加载HOME目录下的个人配置文件。</p><p>经常我们会看到网络上教你配置$PATH环境变量的文章，但凡让你用<code>修改</code>&#x2F;etc&#96;目录下配置文件的帖子，都可以立刻关闭了。</p><p>默认<code>/etc</code>下文件都是只读的，所有用户共享的一份数据，通常的做法是拷贝一份<code>/etc</code>下的配置文件到你的Home目录，在前面加上<code>.</code>变成隐藏文件。由于Unix系统会最后加载个人Home目录下的配置文件，后加载的同名配置会覆盖之前的变量定义。</p><h4 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h4><p>通常使用<code>echo</code>命令查看一个环境变量，比如：<code>echo $PATH</code>，PATH是环境变量名称，$符号表示后面的字符串是变量名。</p><p>这个语法是不是和很多脚本语言一样？Unix对很多后期语言的设计产生了深远的影响。</p><p>我们可以看到shell输出的PATH环境变量值：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/Users/</span>qihoo<span class="hljs-regexp">/devkits/</span>bin:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin:/u</span>sr<span class="hljs-regexp">/bin:/</span>bin:<span class="hljs-regexp">/usr/</span>sbin:<span class="hljs-regexp">/sbin:/</span>opt<span class="hljs-regexp">/pkg_uninstaller:/</span>Users<span class="hljs-regexp">/qihoo/</span>Library<span class="hljs-regexp">/Android/</span>sdk<span class="hljs-regexp">/ndk/</span><span class="hljs-number">20.0</span>.<span class="hljs-number">5594570</span>:<span class="hljs-regexp">/Users/</span>qihoo<span class="hljs-regexp">/Library/</span>Android<span class="hljs-regexp">/sdk:/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_311.jdk/</span>Contents<span class="hljs-regexp">/Home:/</span>Users<span class="hljs-regexp">/qihoo/</span>Library<span class="hljs-regexp">/Android/</span>sdk<span class="hljs-regexp">/emulator:/</span>Users<span class="hljs-regexp">/qihoo/</span>Library<span class="hljs-regexp">/Android/</span>sdk<span class="hljs-regexp">/platform-tools:/</span>Users<span class="hljs-regexp">/qihoo/</span>Library<span class="hljs-regexp">/Android/</span>sdk<span class="hljs-regexp">/tools:/</span>Users<span class="hljs-regexp">/qihoo/</span>Library<span class="hljs-regexp">/Android/</span>sdk<span class="hljs-regexp">/tools/</span>bin:<span class="hljs-regexp">/Users/</span>qihoo<span class="hljs-regexp">/Library/</span>Android<span class="hljs-regexp">/sdk/</span>build-tools<span class="hljs-regexp">/29.0.3:/</span>Users<span class="hljs-regexp">/qihoo/</span>Library<span class="hljs-regexp">/Android/</span>sdk<span class="hljs-regexp">/ndk/</span><span class="hljs-number">20.0</span>.<span class="hljs-number">5594570</span><span class="hljs-regexp">/toolchains/</span>aarch64-linux-android-<span class="hljs-number">4.9</span><span class="hljs-regexp">/prebuilt/</span>darwin-x86_64/bin<br></code></pre></td></tr></table></figure><p>这个变量值的组成是一个一个的路径，然后使用<code>:</code>连接起来，本质上是一个路径列表。</p><p>系统执行命令时首先要查找命令，默认的查找顺序是</p><ol><li>当前环境变量中定义的<code>alias</code>别名，也就是用户自定义的一些名称。</li><li>导出的函数方法：shell脚本语言支持定义方法。</li><li>系统内建命令（built-in shell commands）。</li><li>PATH环境变量中定义的路径：这个路径列表会从左至右解析，找到便停止继续查找。</li></ol><blockquote><p>参考资料：<a href="https://superuser.com/questions/238987/how-does-unix-search-for-executable-files">How does Unix search for executable files?</a></p></blockquote><p>我们可以用<code>which &lt;command-name&gt;</code>命令，查看当前该可执行程序所在路径。</p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>通过<code>export PATH=&lt;path&gt;:$PATH</code>进行配置，其中PATH是系统环境变量，必须大写，$PATH表示取变量值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 定义了一个自定义环境变量ANDROID_SDK</span><br><span class="hljs-built_in">export</span> ANDROID_SDK=~/Library/Android/sdk<br><span class="hljs-comment"># 将ANDROID_SDK下的build-tools加入PATH</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$ANDROID_SDK</span>/build-tools/29.0.3<br></code></pre></td></tr></table></figure><p>这里我先是定义了一个自定义环境变量ANDROID_SDK，然后将ANDROID_SDK下的build-tools加入PATH。</p><p>其中，<code>~</code>可以用另一个环境变量<code>$HOME</code>代替。</p><p>这里我们可以拆解一下上面的命令为两部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 定义一个变量</span><br>ANDROID_SDK=~/Library/Android/sdk<br><span class="hljs-comment"># 导出成环境变量</span><br><span class="hljs-built_in">export</span> ANDROID_SDK<br></code></pre></td></tr></table></figure><p>我们可以使用<code>export -p</code>命令列出所有环境变量。</p><p><strong>注意</strong>：这段配置通常需要写入你当前使用shell的个人配置文件中去，否则不会生效，bash需要写入<code>~/.bashrc</code>，zsh则写入<code>~/.zshrc</code>。</p><p><strong>如果没有写入配置文件中去，仅仅是在shell中运行这两行也是可以的，只不过这两行配置的环境变量仅会对当前终端打开的shell窗口生效，重新打开一个shell窗口是不会起作用的。</strong></p><p>通常我们编辑完shell程序的个人配置文件，已经打开的窗口也是不会生效的，前面讲过了，在启动shell的过程才会去加载配置文件。这时，需要使用<code>source ~/.bashrc</code>命令<strong>重新加载配置文件</strong>，这个命令等价于<code>. ~/.bashrc</code>。</p><h4 id="为什么不把当前目录-加入环境变量？"><a href="#为什么不把当前目录-加入环境变量？" class="headerlink" title="为什么不把当前目录.加入环境变量？"></a>为什么不把当前目录<code>.</code>加入环境变量？</h4><p>在Windows下用过命令行的同学可能有疑问，为啥不把当前路径加入环境变量？Windows默认是可以直接运行当前目录下可执行程序的，而在Unix里必须使用<code>./&lt;exec-name&gt;</code>进行运行，shell会自动将<code>.</code>和<code>..</code>补全成当前路径和父路径，以绝对地址找到可执行程序，并运行之。</p><p>我们理论上是可以将<code>.</code>加入到环境变量中，但是会引入安全性问题。</p><p>在Unix系统的树形目录结构中，有些<code>/tmp</code>或者<code>/vars</code>等目录是所有用户都有权限进行访问的，假如有些恶意程序，在这些目录中保存了一个和常用命令同名的二进制恶意程序，如<code>ls</code>（ls并不是系统内建命令），但你不小心进入该目录，运行了ls，那么就会执行了那个恶意程序！</p><h2 id="一些好用的Shell命令"><a href="#一些好用的Shell命令" class="headerlink" title="一些好用的Shell命令"></a>一些好用的Shell命令</h2><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>如果我只能推荐一个shell命令，那么这个命令一定是<code>man</code>。在Unix系统里，“有问题找男人（man）”。</p><p><strong>man</strong>ual（手册）的缩写，Unix系统中绝大多数的可执行程序都有完善的文档和详细的例子。</p><p>遇到不记得用法或者参数的命令，第一个可以尝试在命令后面加上<code>--help</code>或者<code>-h</code>参数，这是Unix世界约定俗成、几乎通用的参数。你也可以在输入<code>-</code>之后，尝试两下TAB按键，shell程序也会列出参数和具体功能。</p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p><strong>l</strong>i<strong>s</strong>t的缩写，列出当前指定目录&#x2F;文件的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lh &lt;file_path&gt;<br></code></pre></td></tr></table></figure><p>有一些有用的参数：</p><ul><li><code>-l</code>：以列表的形式查看，会列出更多的属性</li><li><code>-a</code>：列出所有文件</li><li><code>-A</code>：列出所有文件，除去<code>.</code>和<code>..</code></li><li><code>-h</code>：以人类可读方式列出文件大小，仅在和<code>-l</code>参数一起使用时生效</li></ul><p>其中<code>file_path</code>可以是目录，也可以是文件，也支持包含<code>*</code>或者<code>?</code>的通配符。</p><p>比如，<code>ls haha*</code>，则会列出当前目录下所有以“haha”开头的文件。</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p><strong>c</strong>hange <strong>d</strong>irectory的缩写，之后通常跟上目录的绝对或者相对路径。</p><p>我们可以如下使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入当前用户的Home目录</span><br><span class="hljs-built_in">cd</span> ~<br><br><span class="hljs-comment"># 进入上一个目录</span><br><span class="hljs-built_in">cd</span> -<br></code></pre></td></tr></table></figure><blockquote><p><strong>TIPS</strong>：</p><p>很多不常用命令行的同事在使用此命令时，总是会习惯<code>ls</code>以下，然后<code>cd</code>进入一个目录，然后再<code>ls</code>，如此反复。在我看来这就是Windows文件管理器操作方式的延续，这其实是很低效的。</p><p><strong>更好的使用方式是输入<code>cd </code>双击TAB键，shell会提示可选的目录名称。</strong></p><p>这种使用方式的<strong>另一个好处</strong>就可以用上<code>cd -</code>命令了，快速高效的切换工作目录。</p></blockquote><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p><strong>p</strong>rint <strong>w</strong>orking <strong>d</strong>irectory的缩写，打印当前工作目录。</p><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>别名，通常用与缩写替代一个较长的路径。</p><p>与之相反的命令是<code>unalias</code>，另外可以直接输入<code>alias</code>查看当前定义的别名。</p><p>下面就是一些小技巧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 快速返回到父目录</span><br><span class="hljs-built_in">alias</span> ..=<span class="hljs-string">&#x27;cd ..&#x27;</span><br><span class="hljs-built_in">alias</span> ...=<span class="hljs-string">&#x27;cd ../../&#x27;</span><br><br><span class="hljs-comment"># 带颜色的ls，并显示目录／</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">ls</span>=<span class="hljs-string">&#x27;ls -Gp&#x27;</span><br><span class="hljs-comment"># 显示B/KB/MB大小</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -lh&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>echo本意是“回声”，就是你说一句，shell给你回复一句相同的话。</p><p>通常使用的场景是用于输出日志、输出变量。比如，<code>echo $PATH</code>。</p><blockquote><p><strong>TIPS</strong>：</p><p><code>echo</code>命令默认会在输出文字最后加上换行符<code>\n</code>，某些场景可以使用<code>-n</code>去除换行符。</p></blockquote><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>concatenate的缩写，本意是“连接”，具体使用那几个字母我不确定。</p><p>常用于<strong>以文本方式显示文件内容</strong>，可以理解为一只小猫（cat）从老鼠洞里往里偷看，因为洞比较小，所以只能看到文本数据。</p><p>通常用法就是<code>cat &lt;filename&gt;</code>，查看文件内容。</p><h3 id="less-x2F-more"><a href="#less-x2F-more" class="headerlink" title="less&#x2F;more"></a>less&#x2F;more</h3><p>这两个命令很类似，其实都是提供一个分页器的功能。这两个命令的出现就是为了解决<code>cat</code>一个文件内容过长时、屏幕无法显示下的时候会被flush冲掉的问题。</p><p>使用方法类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">less &lt;filename&gt;<br>more &lt;filename&gt;<br></code></pre></td></tr></table></figure><p>使用之后默认只会展示一屏幕的信息，使用<code>j</code>&#x2F;<code>k</code>快捷键进行上下滚动一行，使用<code>space</code>空格键进行翻页，按<code>q</code>退出，还有一些快捷键类似<code>vi</code>，暂时不介绍了。</p><h3 id="打开文件-x2F-目录"><a href="#打开文件-x2F-目录" class="headerlink" title="打开文件&#x2F;目录"></a>打开文件&#x2F;目录</h3><p>很多同学在一开始使用shell的时候会遇到这样的问题：</p><p>想用shell提效，费了半天劲<code>cd</code>到指定目录，也<code>ls</code>找到指定文件了，但是却尴尬的发现不知道怎么打开文件&#x2F;目录！</p><p>其实很简单，不同的操作系统都提供了类似的方法，使用用户默认程序打开：</p><ul><li><strong>open</strong>：MacOS</li><li><strong>xdg-open</strong>：Linux</li><li><strong>start</strong>：Windows</li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 用文件管理器打开当前目录</span><br>open . <span class="hljs-comment"># MacOS</span><br>xdg-open . <span class="hljs-comment"># Linux</span><br>start . <span class="hljs-comment"># Windows</span><br></code></pre></td></tr></table></figure><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>英文是pipeline，在shell中使用<code>|</code>符合，其含义是将管道符号<code>|</code>前命令的输出信息作为管道符号<code>|</code>后命令的输入信息。</p><p>比如，可以在包含过多文件的目录如下使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l | less<br></code></pre></td></tr></table></figure><h3 id="重定向输出"><a href="#重定向输出" class="headerlink" title="重定向输出"></a>重定向输出</h3><p>常用的重定向输出符号有<code>&gt;</code>和<code>&gt;&gt;</code>，还有一些其他符号感兴趣可以自行搜索。</p><p><code>&gt;</code>符号可以将上一条命令的输出信息，重定向到一个文件。</p><p><code>&gt;&gt;</code>符号可以将上一条命令的输出信息，重定向追加到一个文件的末尾。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb logcat &gt; log.txt<br><br><span class="hljs-built_in">cat</span> file1 file2 &gt; file3 <span class="hljs-comment"># 把两个文件的内容连接在一次输出到file3文件中</span><br></code></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>查找文件命令，这个命令比较复杂，给出一种我常用的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find &lt;search_directory&gt; -name &lt;name_pattern&gt; -<span class="hljs-built_in">type</span> &lt;d/f&gt;<br></code></pre></td></tr></table></figure><p>很简单，<code>search_directory</code>参数是要搜索的目录路径，绝对路径或者相对路径，如果想搜索当前路径传入<code>.</code>即可；<code>name_pattern</code>参数传入的可以是一个匹配符，支持正则表达式。</p><p>假如你想只搜索目录名称，那么额外加上<code>-type d</code>；只搜索文件，使用<code>-type f</code>即可。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 仅搜索当前目录txt文件</span><br>find . -name <span class="hljs-string">&quot;*.txt&quot;</span> -<span class="hljs-built_in">type</span> f<br></code></pre></td></tr></table></figure><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>搜索文件内容，<strong>G</strong>lobally search a <strong>R</strong>egular <strong>E</strong>xpression and <strong>P</strong>rint的缩写，常用的方法就是结合管道一起使用，所谓过滤输出。</p><p>通常需要和管道联合使用，比如，我们日常工作常用的：<code>adb logcat | grep &quot;TAG&quot;</code>。</p><p><code>grep</code>命令用法也很复杂，这里给出常用的参数版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -e &lt;search_patter&gt; -A &lt;line_num&gt; -B &lt;line_num&gt;<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li><code>-e &lt;search_patter&gt;</code>：表示搜索内容，支持正则表达式。</li><li><code>-A &lt;line_num&gt;</code>：<strong>after</strong>的意思，表示同时输出匹配内容的之后line_num行数的信息。</li><li><code>-B &lt;line_num&gt;</code>：<strong>before</strong>的意思，表示同时输出匹配内容的之后line_num行数的信息。</li><li><code>-C &lt;line_num&gt;</code>：<strong>center</strong>的意思，<code>-C10</code>等于<code>-A10 -B10</code>。</li><li><code>-v</code>：反转匹配的意思。</li></ul><h3 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h3><p>举个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pid=`adb shell ps | grep com.es | awk <span class="hljs-string">&#x27;&#123; print $2 &#125;&#x27;</span>` &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;es pid: <span class="hljs-variable">$pid</span>&quot;</span> &amp;&amp; adb logcat --pid=<span class="hljs-variable">$pid</span> &gt; log3.txt<br></code></pre></td></tr></table></figure><p>脚本示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># ====================================================</span><br><span class="hljs-comment">#   Copyright (C) 2021  All rights reserved.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   Author        : rf.w</span><br><span class="hljs-comment">#   Email         : demonsimon#gmail.com</span><br><span class="hljs-comment">#   File Name     : logcat_pid.sh</span><br><span class="hljs-comment">#   Last Modified : 2021-02-02 16:33</span><br><span class="hljs-comment">#   Describe      : </span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ====================================================</span><br><br><br>usage=<span class="hljs-string">&quot;<span class="hljs-variable">$0</span> &lt;app_package_name&gt; [log_file_name]&quot;</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ] || [ <span class="hljs-variable">$#</span> -gt 2 ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;usage&#125;</span><br>  <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$#</span> <span class="hljs-variable">$1</span> <span class="hljs-variable">$2</span><br><br>app_pkg_name=<span class="hljs-variable">$1</span><br><span class="hljs-built_in">pwd</span>=`<span class="hljs-built_in">pwd</span>`<br><br>pid=`adb shell ps | grep -m1 <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;app_pkg_name&#125;</span>&quot;</span> | awk <span class="hljs-string">&#x27;&#123; print $2 &#125;&#x27;</span>`<br><br>logcat=<span class="hljs-string">&quot;adb logcat&quot;</span><br><br>cmd=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;logcat&#125;</span> --pid=<span class="hljs-variable">$&#123;pid&#125;</span>&quot;</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -eq 2 ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span> =~ ^/.* ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">log</span>=<span class="hljs-variable">$2</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">log</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;pwd&#125;</span>/<span class="hljs-variable">$2</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br><br>  `<span class="hljs-variable">$&#123;cmd&#125;</span> &gt; <span class="hljs-variable">$&#123;log&#125;</span>`<br><span class="hljs-keyword">else</span><br>  `<span class="hljs-variable">$&#123;cmd&#125;</span>`<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="Terminal快捷键"><a href="#Terminal快捷键" class="headerlink" title="Terminal快捷键"></a>Terminal快捷键</h2><p>Terminal的快捷键一开始我只知道TAB和任务相关的那些，直到某一天我无意中试到了一些输入相关的神奇按键，才发现<strong>命令行原来可以更好用。</strong></p><h3 id="常规快捷键"><a href="#常规快捷键" class="headerlink" title="常规快捷键"></a>常规快捷键</h3><h4 id="TAB"><a href="#TAB" class="headerlink" title="TAB"></a>TAB</h4><p>绝对是使用频率最高的快捷键。单击补全，补全失败时，双击提示。</p><h4 id="Ctrl-C"><a href="#Ctrl-C" class="headerlink" title="Ctrl-C"></a>Ctrl-C</h4><p>任务相关快捷键：中断当前任务。</p><h4 id="Ctrl-Z"><a href="#Ctrl-Z" class="headerlink" title="Ctrl-Z"></a>Ctrl-Z</h4><p>任务相关快捷键：将当前任务切换到后台，并挂起（suspend）暂停。</p><p>后台未完成的任务可以使用<code>fg</code>命令切换到前台。</p><h4 id="Ctrl-D"><a href="#Ctrl-D" class="headerlink" title="Ctrl-D"></a>Ctrl-D</h4><p>输出一个EOF（End-of-file）标志符，表示任务结束。通常交互式命令接收到这个字符（<code>^D</code>）时会主动退出。</p><p>比如，未执行其他命令时shell接收到<code>Ctrl-D</code>就会立即退出；<code>python</code>交互式命令等待输入时，按下<code>Ctrl-D</code>也会退出。</p><h4 id="Ctrl-L"><a href="#Ctrl-L" class="headerlink" title="Ctrl-L"></a>Ctrl-L</h4><p>清除屏幕上信息。</p><h3 id="输入相关快捷键"><a href="#输入相关快捷键" class="headerlink" title="输入相关快捷键"></a>输入相关快捷键</h3><h4 id="Ctrl-A"><a href="#Ctrl-A" class="headerlink" title="Ctrl-A"></a>Ctrl-A</h4><p>移动光标至当前行起始位置。</p><h4 id="Ctrl-E"><a href="#Ctrl-E" class="headerlink" title="Ctrl-E"></a>Ctrl-E</h4><p>移动光标至当前行起始位置。</p><h4 id="Ctrl-W"><a href="#Ctrl-W" class="headerlink" title="Ctrl-W"></a>Ctrl-W</h4><p>清除当前光标前一个单词。</p><h4 id="Ctrl-U"><a href="#Ctrl-U" class="headerlink" title="Ctrl-U"></a>Ctrl-U</h4><p>清除当前行所有内容。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>没想到这个主题能写这么多内容，很多地方并没有展开讲清楚，也算是我这Unix <del><em>“脑残粉”</em></del> 簇拥者的一个阶段性总结。</p><p>贝尔实验室计算机技术研发部门的主管、管道和diff工具的创始人道格拉斯·麦克罗伊曾这么说到：“<strong>你可以安心地在几乎所有的贡献后面都加上丹尼斯·里奇和肯·汤普逊的名字。</strong>”</p><p>最后，Unix yyds！</p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>MacOS</tag>
      
      <tag>Unix</tag>
      
      <tag>Terminal</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20分钟入门｜Unix系统与设计哲学——程序员应该知道的那些事儿</title>
    <link href="/2022/03/09/20-minutes-learning-unix-system-and-its-philosophy/"/>
    <url>/2022/03/09/20-minutes-learning-unix-system-and-its-philosophy/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/unix-logo.jpeg" alt="Unix"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这是一篇一直想写的东西，在上一份工作的时候给新员工培训，我就发现不止新入职的员工，很多多年工作经验的同事也对Unix系统和shell知之甚少，然而<strong>这些知识可以更好点帮你认识你所使用的系统原理、语言设计思想、提高工作效率。</strong></p><p><strong>整篇文章包含两部分，这是上半部分</strong>，主要介绍<strong>Unix系统和它的特性</strong>、<strong>Unix设计哲学</strong>以及<strong>Unix树形文件系统结构</strong>。</p><p>全文1.2w字，大部分都是我个人这些年使用类Unix系统的理解和总结，适合开发、测试同学阅读。</p><p>阅读完上下整篇文章，你会：</p><ul><li>✅ 了解Unix系统特性与设计思想，了解Unix系统目录结构，以及各个目录功能。</li><li>✅ 了解什么是终端和Shell，以及关于环境变量。</li><li>✅ 获得一些实用的居家旅行、高效工作的 <del><em>装X技巧</em></del> shell和终端使用技巧。</li></ul><h2 id="常见操作系统"><a href="#常见操作系统" class="headerlink" title="常见操作系统"></a>常见操作系统</h2><p>目前市面上常见的电脑操作系统就这三种了——Windows、MacOS和Linux。</p><p>大多数人一开始接触电脑时使用的应该都是微软的Windows系统；后来有一部分人先富起来了，就接触到了MacOS。</p><p>然而很少一部分人才会接触到Linux，这部分人大概率是服务端开发、运维人员，或者是嵌入式开发、内核工程师，但是真正拿Linux系统作为日常工作生活的主力系统的人更少之又少。</p><p>我算是其中一位，上学与工作期间使用Linux作为主力系统，换Mac也是最近些年的事情。</p><blockquote><p><em>我最初投向Linux怀抱的原因很好笑，就是单纯的打dota激战正酣的时候，windows蓝屏了，然后我一气之下就把双系统windows的盘符格式化了。😂😂😂</em></p></blockquote><h2 id="Linux、MacOS与Unix"><a href="#Linux、MacOS与Unix" class="headerlink" title="Linux、MacOS与Unix"></a>Linux、MacOS与Unix</h2><p>Linux，其实严格上来说，只是指操作系统内核。现在各种服务器和个人电脑中使用的是各种各样Linux发行版，也就是内核外面套着的各种界面和样式壳子。</p><p>MacOS则是苹果公司推出的具有友好且优美图形界面的操作系统，从一开始开放硬件到现在的专属系统，不管怎么样，B格一定拉满。</p><p>在我看来，Linux和Mac其实是一回事，都是一种类Unix的操作系统。</p><blockquote><p><em><strong>题外话：</strong></em></p><p><em>就像现在经常听到的讨论鸿蒙OS是不是Android一样，在我看来，鸿蒙OS和Android都是一种Linux，Android在Linux上打了补丁套了一层虚拟机、framework和UI；鸿蒙OS是在Linux上打了补丁，套了一层虚拟机、自己的和Android的framework和UI。</em></p></blockquote><p>那么问题来了，<strong>Unix是啥</strong>？</p><p>Unix系统是贝尔实验室研究开发的一套多用户、多任务、多层次（multi-user、multi-processor、multi-level）、支持多种处理器架构的分时操作系统，可以说是现代操作系统的起源。</p><p>目前它的商标权由国际开放标准组织所拥有，只有符合单一UNIX规范的UNIX系统才能使用UNIX这个名称，否则只能称为类UNIX（UNIX-like）。</p><blockquote><p><em>当然Unix也不是凭空出现的，他的前身是<strong>Multics</strong>操作系统，<strong>多任务信息与计算系统</strong>（MULTiplexed Information and Computing System）的缩写，它是一套分时多任务操作系统，是1964年由贝尔实验室、麻省理工学院及美国通用电气公司所共同参与研发，并安装在大型主机上。1969年，因MULTICS项目的工作进度过于缓慢，最后终究遭裁撤的命运，贝尔实验室由此退出此项目。</em></p><p><em>当时，肯·汤普逊正在撰写一个称为“<a href="https://zh.wikipedia.org/wiki/Space_Travel">星际旅行</a>”（Space Travel）的游戏程序。贝尔实验室退出Multics计划后，由贝尔实验室的两位软件工程师肯·汤普逊与丹尼斯·里奇以B语言和汇编语言为基础而发展出UNIX，1973年汤普逊和里奇用C语言重写了Unix，成为后来普及的版本。</em></p></blockquote><p>一般来说，Linux是一套遵从POSIX（可移植操作系统接口，Portable Operating System Interface，<strong>X</strong>则表明其对Unix API的传承。）规范的一个操作系统，它能够在普通PC计算机上实现全部的UNIX特性，具有多任务、多用户的能力。</p><p>MacOS内核名为Darwin，是以BSD源代码（<strong>B</strong>erkeley <strong>S</strong>oftware <strong>D</strong>istribution，伯克利Unix版本）和Mach微核心为基础，也就是是一个派生自Unix的操作系统，BSD非常地宽松，因此BSD常被当作工作站级别的Unix系统。</p><p>Windows NT声称自己实现了部分POSIX，但是值得称赞的是，Win10H2版本后，微软迈出了重大的一步，系统利用虚拟化技术集成了WSL（<strong>W</strong>indows <strong>S</strong>ubsystem for <strong>L</strong>inux），可以在Windows系统中获得和原生Linux系统一致的体验，以至于很多人调侃，<strong>目前阶段，体验最好的Linux发行版是Windows。</strong>😂</p><p>👉<em>扩展阅读：关于WSL安装与使用，请移步另一篇博客：<a href="https://wuruofan.com/2021/04/01/working-guide-on-win-10-of-linux-macos-programmers/">MacOS&#x2F;Linux程序员Win10平台生存指北 </a></em></p><blockquote><p><em>参考：</em></p><ol><li><em><a href="https://zh.wikipedia.org/wiki/UNIX">维基百科：UNIX</a></em></li><li><em><a href="https://zh.wikipedia.org/wiki/Linux">维基百科：Linux</a></em></li><li><em><a href="https://zh.wikipedia.org/wiki/MacOS">维基百科：MacOS</a></em></li></ol></blockquote><h2 id="Unix系统特点"><a href="#Unix系统特点" class="headerlink" title="Unix系统特点"></a>Unix系统特点</h2><h3 id="国外Geek如何看Unix"><a href="#国外Geek如何看Unix" class="headerlink" title="国外Geek如何看Unix"></a>国外Geek如何看Unix</h3><h4 id="1-Multiuser-System"><a href="#1-Multiuser-System" class="headerlink" title="1. Multiuser System :"></a>1. Multiuser System :</h4><p><strong>多用户系统</strong>：</p><p>Unix系统采用时间片轮转的方式，保证计算资源在多个用户之间共享。</p><h4 id="2-Multitask-System"><a href="#2-Multitask-System" class="headerlink" title="2. Multitask System :"></a>2. Multitask System :</h4><p><strong>多任务系统</strong>：</p><p>单个用户可以同时处理多个任务，比如，编辑一个文件的同时打印另一个文件，发送邮件的同时浏览网络。</p><p>内核从设计之初就支持用户的多任务需求，这里的多任务的设计，可以让用户看到一个任务在前台，其他任务在后台。用户可以切换、终止或挂起任务。</p><h4 id="3-The-Building-Block-Approach"><a href="#3-The-Building-Block-Approach" class="headerlink" title="3. The Building-Block Approach :"></a>3. The Building-Block Approach :</h4><p><strong>积木式方法</strong>：</p><p>Unix开发者一贯坚持简洁原则，因此Unix有一堆命令，每个命令只完成一件事情。但是你可以通过”|”管道符号将两个命令连接起来，完成更多的业务。</p><p>直至今日，很多Unix工具都支持将另一个程序的输出作为自己的输入。我们通过这种机制可以得到各种各样的新工具。</p><blockquote><p><em><strong>个人理解</strong>：</em></p><p><em>这点设计思想和Windows截然不同，Windows上的软件习惯提供给用户一堆功能，而Linux依然贯彻小而美的理念，当然无可厚非，面向用户不同，Unix面向的是Developers，Windows面向的是普罗大众；这直接也决定了操作系统的生态与主要用途。</em></p></blockquote><h4 id="4-The-UNIX-Toolkit"><a href="#4-The-UNIX-Toolkit" class="headerlink" title="4. The UNIX Toolkit :"></a>4. The UNIX Toolkit :</h4><p><strong>UNIX实用工具箱</strong>：</p><p>Unix有一个内核，但仅靠内核无法帮助用户。因此，我们需要使用通常与UNIX系统一起附带的各式各样实用工具。（各种命令行工具）</p><h4 id="5-Pattern-Matching"><a href="#5-Pattern-Matching" class="headerlink" title="5. Pattern Matching :"></a>5. Pattern Matching :</h4><p><strong>模式匹配</strong>：</p><p>Unix提供了非常复杂的模式匹配功能，可以使用正则表达式进行匹配。</p><h4 id="6-Programming-Facility"><a href="#6-Programming-Facility" class="headerlink" title="6. Programming Facility :"></a>6. Programming Facility :</h4><p><strong>便于编程</strong>：</p><p>Unix提供shell程序，同时这也是为程序员而不是为普通用户设计的编程语言。它具有编程所需的所有控制结构、循环和变量。这些功能用于设计shell脚本（可以调用UNIX命令的程序）。</p><p>系统的许多功能都可以由这些shell脚本控制和管理。</p><h4 id="7-Documentation"><a href="#7-Documentation" class="headerlink" title="7. Documentation :"></a>7. Documentation :</h4><p><strong>完善的文档</strong></p><p>它有一个代表手册的“man”命令，这是任何命令及其配置文件最重要的参考手册。</p><blockquote><p><em>参考：<a href="https://www.geeksforgeeks.org/features-of-unix/">Features of Unix</a></em></p></blockquote><h3 id="国内学者如何看Unix"><a href="#国内学者如何看Unix" class="headerlink" title="国内学者如何看Unix"></a>国内学者如何看Unix</h3><ol><li><p>UNIX系统在结构上分为核心程序（kernel）和外围程序（shell）两部分，而且两者有机结合成为一个整体。核心部分承担系统内部的各个模块的功能，即处理机和进程管理、存储管理、设备管理和文件系统。核心程序的特点是精心设计、简洁精干，只需占用很小的空间而常驻内存，以保证系统的高效率运行。外围部分包括系统的用户界面、系统实用程序以及应用程序，用户通过外围程序使用计算机。 </p></li><li><p>UNIX系统提供了良好的用户界面，具有使用方便、功能齐全、清晰而灵活、易于扩充和修改等特点。UNIX系统的使用有两种形式：一种是操作命令，即shell语言，是用户可以通过终端与系统发生交互作用的界面；另一种是面向用户程序的界面，它不仅在汇编语言，而且在C语言中向用户提供服务。</p></li><li><p>UNIX系统的文件系统是树形结构。它由基本文件系统和若干个可装卸的子文件系统组成，既能扩大文件存储空间，又有利于安全和保密。</p></li><li><p>UNIX系统把文件、文件目录和设备统一处理。它把文件作为不分任何记录的字符流进行顺序或随机存取，并使得文件、文件目录和设备具有相同的语法语义和相同的保护机制，这样既简化了系统设计，又便于用户使用。 </p></li><li><p>UNIX系统包含有非常丰富的语言处理程序、实用程序和开发软件用的工具性软件，向用户提供了相当完备的软件开发环境。</p></li><li><p>UNIX系统的绝大部分程序是用C语言编程的，只有约占5%的程序用汇编语言编程。C语言是一种高级程序设计语言，它使得UNIX系统易于理解、修改和扩充，并且具有非常好的移植性。</p></li><li><p>UNIX系统还提供了进程间的简单通信功能。</p></li></ol><blockquote><p><em>参考：赵文庆．UNIX和计算机软件技术基础．上海：复旦大学出版社，2011：9-23</em></p></blockquote><h2 id="Unix的设计思想"><a href="#Unix的设计思想" class="headerlink" title="Unix的设计思想"></a>Unix的设计思想</h2><p>UNIX不仅仅是一个操作系统，更是一种生活方式。经过几十年的发展，UNIX在技术上日臻成熟的过程中，它独特的设计哲学和美学也深深地吸引了一大批技术人员，他们在维护、开发、使用UNIX的同时，UNIX也影响了他们的思考方式和看待世界的角度。</p><p><strong>UNIX重要的设计原则</strong>：</p><ul><li>简洁至上（KISS原则）</li><li>提供机制而非策略</li></ul><p>道格拉斯·麦克罗伊是Unix系统上管道机制，也是Unix文化的缔造者之一。他归纳的Unix哲学如下：</p><ol><li>程序应该只关注一个目标，并尽可能把它做好。</li><li>让程序能够互相协同工作。</li><li>应该让程序处理文本数据流，因为这是一个通用的接口。</li></ol><blockquote><p><em>参考：<a href="https://zh.wikipedia.org/wiki/Unix%E5%93%B2%E5%AD%A6">Unix哲学</a></em></p></blockquote><h3 id="简洁至上"><a href="#简洁至上" class="headerlink" title="简洁至上"></a>简洁至上</h3><p>这也就是著名的<strong>KISS（Keep It Simple, Stupid）原则</strong>，在Unix中，尽可能让一个代码模块只做一件事情，把这件事情做好，然后把一个个小功能组合起来实现大功能。</p><blockquote><p><em>关于这一点，阮一峰大佬的笔记如下：</em></p><p><em><strong>1. 清晰原则。</strong></em></p><p><em>代码要写得尽量清晰，避免晦涩难懂。清晰的代码不容易崩溃，而且容易理解和维护。重视注释。不为了性能的一丁点提升，而大幅增加技术的复杂性，因为复杂的技术会使得日后的阅读和维护更加艰难。</em></p><p><em><strong>2. 模块原则。</strong></em></p><p><em>每个程序只做一件事，不要试图在单个程序中完成多个任务。在程序的内部，面向用户的界面（前端）应该与运算机制（后端）分离，因为前端的变化往往快于后端。</em></p><p><em><strong>3. 组合原则。</strong></em></p><p><em>不同的程序之间通过接口相连。接口之间用文本格式进行通信，因为文本格式是最容易处理、最通用的格式。这就意味着尽量不要使用二进制数据进行通信，不要把二进制内容作为输出和输入。</em></p><p><em><strong>4. 优化原则。</strong></em></p><p><em>在功能实现之前，不要考虑对它优化。最重要的是让一切先能够运行，其次才是效率。”先求运行，再求正确，最后求快。”（Make it run, then make it right, then make it fast.）90%的功能现在能实现，比100%的功能永远实现不了强。先做出原型，然后找出哪些功能不必实现，那些不用写的代码显然无需优化。目前，最强大的优化工具恐怕是Delete键。</em></p><p><em>参考：<a href="https://www.ruanyifeng.com/blog/2009/06/unix_philosophy.html">https://www.ruanyifeng.com/blog/2009/06/unix_philosophy.html</a></em></p></blockquote><h3 id="提供机制而非策略"><a href="#提供机制而非策略" class="headerlink" title="提供机制而非策略"></a>提供机制而非策略</h3><p>如何理解机制（mechanism）和策略（policy）呢？</p><p>就像前面说到的“积木式方法”，我们拼乐高，<strong>乐高积木的凸起和凹槽就是机制，我们如何拼便是策略</strong>。</p><p>我的理解：<strong>机制是接口能力、是框架，策略是业务实体。前者是不变的，或者变化较少的；后者是善变的，根据不同场景可以进行调整的。</strong></p><p>这样的方式更灵活，也更强大。</p><p>下面是我对这个特性的一些理解。</p><h4 id="让程序处理文本数据流"><a href="#让程序处理文本数据流" class="headerlink" title="让程序处理文本数据流"></a>让程序处理文本数据流</h4><p>道格拉斯·麦克罗伊归纳的Unix哲学之一，绝大数Unix程序都会把标准输入<code>stdin</code>作为自己的输入，然后把需要输出的信息打印到标准输出<code>stdout</code>。这样利用管道机制，就可以让数据在命令间串行流动起来。</p><p>我们再把现在的那些流式编程思想和Unix比较，是不是有些类似？<strong>用管道连接的每一个命令，其实都是这个文本输入流的过滤器。</strong></p><p>这个思想也引入了另一个Unix理念：“<strong>沉默是金</strong>”。</p><p>其含义也很简单，如果没有必要，就别输出乱七八糟的信息，以免影响下一个命令的处理流程。</p><h4 id="设备驱动框架"><a href="#设备驱动框架" class="headerlink" title="设备驱动框架"></a>设备驱动框架</h4><p>我们日常使用的手机，包含了各式各样的外设：触摸屏、按键、摄像头、扬声器等等，都是基于Linux设备驱动框架进行实现的。</p><p>Linux内核本身提供了Device - Bus - Driver设备驱动框架（机制），各个厂商才可以实现各种各样外设驱动（策略）供用户使用。</p><h4 id="SELinux强制访问控制"><a href="#SELinux强制访问控制" class="headerlink" title="SELinux强制访问控制"></a>SELinux强制访问控制</h4><p>Linux内核提供了LSM（Linux Secrity Module）安全机制，才有了后来NSA（美国国家安全局）实现的SELinux（Security-Enhanced Linux）模块。</p><p>当然后者其实也是一种机制，各个系统厂商可以配置自己的策略文件sepolicy去实现不同的强制访问控制——任何未经明确允许的行为都会被拒绝。我们现在使用的Android手机，在4.4版本之后已经默认集成并开启了这项功能。</p><h4 id="一切皆文件"><a href="#一切皆文件" class="headerlink" title="一切皆文件"></a>一切皆文件</h4><p>在Unix系统中一切皆文件。我们平时接触到的文件和目录都是文件，各种外设（鼠标、屏幕）在Unix系统中也是一个个设备节点文件，我们网络编程访问网络使用的套接字（Socket）在Unix系统中也是一个文件，系统中正在运行的进程也有文件与之对应。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/all-things-are-files-in-unix.png" alt="一切皆文件"></p><p>这些文件都可以简单的利用Linux提供的文件操作接口（File Operations），使用fopen、fclose、fwrite、fread等方法进行访问操作。</p><p>举个例子，在有权限的情况，你可以通过向对应的屏幕设备节点写入1或者0，进行屏幕亮灭的控制。</p><h2 id="文件系统树状结构"><a href="#文件系统树状结构" class="headerlink" title="文件系统树状结构"></a>文件系统树状结构</h2><h3 id="单一根文件的树状存储"><a href="#单一根文件的树状存储" class="headerlink" title="单一根文件的树状存储"></a>单一根文件的树状存储</h3><p>在Unix 操作系统中，所有的文件和目录都被组织成以一个根节点开始的倒置的树状结构。</p><p>文件系统的最顶层是由根目录开始的，系统使用 <strong>&#x2F;</strong> 来表示根目录。在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含子目录文件。如此反复，构成一个庞大的文件系统。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/linux-tree-root-directory-structure.jpeg" alt="Linux根目录树状结构"></p><p><strong>举个例子</strong>：</p><p>一个Android系统中常见路径：<code>/storage/emulated/0/Download/</code>，通常以<code>/</code>结尾会被认为是一个目录的路径。</p><p>第一个<code>/</code>被认为是根目录，根路径是树状结构的起始，可以当做是0，所以<code>/</code>文件分隔符前没有任何字符，之后的<code>storage/</code>和<code>emulated/</code>、<code>0/</code>、<code>Download/</code>都代表一级子目录。</p><h3 id="特殊目录与隐藏文件"><a href="#特殊目录与隐藏文件" class="headerlink" title="特殊目录与隐藏文件"></a>特殊目录与隐藏文件</h3><p>在Unix文件系统中有两个特殊的目录：</p><ol><li><strong>当前目录</strong>：通常用一个<code>.</code>表示，表示用户所在的工作目录（working directory）</li><li><strong>父目录</strong>：通常用两个点 <code>..</code> 来表示，就是当前目录的上一级目录。</li></ol><p>这两个目录在每一个目录下都会以链接的形式存在，使用<code>ls -a</code>的时候就可以看到。</p><p>同样，用这个命令我们还可以看到一些以<code>.</code>开头的文件或者目录，比如用户home目录下经常遇到的<code>~/.bashrc</code>文件或者<code>~/.ssh/</code>目录，这些都是<strong>隐藏文件&#x2F;目录</strong>——在默认方式访问时，文件管理器和shell程序并不会显示这些文件&#x2F;目录。</p><h3 id="各目录功能"><a href="#各目录功能" class="headerlink" title="各目录功能"></a>各目录功能</h3><p>以下是对<strong>Linux系统根目录</strong>一些子目录的解释：</p><h4 id="x2F-bin"><a href="#x2F-bin" class="headerlink" title="&#x2F;bin"></a>&#x2F;bin</h4><p> Binaries （二进制文件） 的缩写，存放着各种<strong>基础命令</strong>的二进制可执行文件。</p><blockquote><p><em><code>/bin</code>目录中通常存放的是系统管理员和用户都能使用的命令，这些命令可以在系统修复、启动时使用，不需要依赖文件系统。</em></p><p><em>参考：<a href="https://unix.stackexchange.com/questions/5915/difference-between-bin-and-usr-bin/5935">Difference between &#x2F;bin and &#x2F;usr&#x2F;bin</a></em></p></blockquote><h4 id="x2F-boot"><a href="#x2F-boot" class="headerlink" title="&#x2F;boot"></a>&#x2F;boot</h4><p>启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><h4 id="x2F-dev"><a href="#x2F-dev" class="headerlink" title="&#x2F;dev"></a>&#x2F;dev</h4><p>Device（设备） 的缩写，该目录下存放的是 Linux 的外部设备节点文件，利用文件操作接口即可方便的控制外设。</p><h4 id="x2F-etc"><a href="#x2F-etc" class="headerlink" title="&#x2F;etc"></a>&#x2F;etc</h4><p>“等等”的缩写，该目录下存放的一些系统程序所需要的配置文件。</p><h4 id="x2F-home"><a href="#x2F-home" class="headerlink" title="&#x2F;home"></a>&#x2F;home</h4><p>Unix是一个多用户系统，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，</p><p>Linux系统用户的主目录通常在这个目录下对应用户名的子目录中，如上图中的 alice、bob 和 eve。</p><p><strong>用户拥有其用户主目录下文件的所有访问操作权限</strong>，通常在命令行会使用<code>~</code>代替<code>/home/&lt;username&gt;</code>。</p><p>注：MacOS系统的用户目录通常在<code>/Users/&lt;username&gt;</code>。</p><h4 id="x2F-lib"><a href="#x2F-lib" class="headerlink" title="&#x2F;lib"></a>&#x2F;lib</h4><p>Library（库）的缩写，该目录存放着系统动态链接库（so），类似于Windows里的 DLL 文件。</p><p>注：MacOS的Library目录和Linux的区别较大，主要是一些系统程序。</p><h4 id="x2F-lost-found"><a href="#x2F-lost-found" class="headerlink" title="&#x2F;lost+found"></a>&#x2F;lost+found</h4><p>该目录一般情况下是空的，可以理解为回收站，当系统异常关机后，这里就存放了一些文件。</p><h4 id="x2F-kernel"><a href="#x2F-kernel" class="headerlink" title="&#x2F;kernel"></a>&#x2F;kernel</h4><p>该目录存放系统的内核文件。</p><h4 id="x2F-media"><a href="#x2F-media" class="headerlink" title="&#x2F;media"></a>&#x2F;media</h4><p>系统自动挂载的设备所在目录，Linux系统会自动识别一些设备，例如U盘、mp3、光驱等等，系统识别后，Linux设备驱动框架会把识别的设备挂载到media目录下。</p><p>注：MacOS系统对应目录为<code>/Volumns</code>。</p><h4 id="x2F-mnt"><a href="#x2F-mnt" class="headerlink" title="&#x2F;mnt"></a>&#x2F;mnt</h4><p>mount（挂载）的缩写，通常是为了用户临时手动挂载一些设备所使用。比如一些默认无法识别的文件系统，可以通过手动挂载的方式进行访问。</p><p>注：MacOS系统对应目录为<code>/Volumns</code>。</p><h4 id="x2F-opt"><a href="#x2F-opt" class="headerlink" title="&#x2F;opt"></a>&#x2F;opt</h4><p>optional（可选） 的缩写，一些应用软件会安装到此目录，通常是用户级的。比如你自己下载了一个软件，可以选择安装到此目录，<strong>它所有的数据、库文件等等都是放在同个目录下面。</strong></p><p><strong>安装到此目录的应用，通常隐含着一个意思，就是我随时可以把这个目录<code>rm -rf</code>强制删除，当个渣男说拜拜。</strong></p><h4 id="x2F-proc"><a href="#x2F-proc" class="headerlink" title="&#x2F;proc"></a>&#x2F;proc</h4><p>Processes（进程） 的缩写，此目录下存放的并不是真实存在的文件或者外设，而是一套虚拟文件系统，存储的是当前内核运行状态的一系列特殊文件，它是系统内存的映射，系统内存中运行的每一个进程都会在此目录存在对应的文件，我们可以通过一些指令，获取指定进程的状态，也可以改变进程的状态。</p><p>比如Android native开发时会通过一些系统命令获取当前的进程信息，监控当前进程所打开&#x2F;持有的inode数目，便是通过<code>/proc/self/</code>下的信息进行获得。</p><p>比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-number">1</span> &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4/icmp_echo_ignore_all<br></code></pre></td></tr></table></figure><p>注：MacOS无此目录。</p><blockquote><p><em>扩展阅读：<a href="https://blog.spoock.com/2019/10/08/proc/">Linux下&#x2F;proc目录简介</a></em></p></blockquote><h4 id="x2F-root"><a href="#x2F-root" class="headerlink" title="&#x2F;root"></a>&#x2F;root</h4><p>系统管理员（超级用户）的用户主目录，普通用户的主目录在<code>/home/&lt;username&gt;</code>。</p><p>我对root账户的理解就是可以操作<code>/</code>根（root）目录的用户。</p><h4 id="x2F-sbin"><a href="#x2F-sbin" class="headerlink" title="&#x2F;sbin"></a>&#x2F;sbin</h4><p>s就是Super User（超级用户）的意思，超级用户的二进制文件，这里存放的是一些需要超级用户权限才能使用的“高级”命令。</p><h4 id="x2F-selinux"><a href="#x2F-selinux" class="headerlink" title="&#x2F;selinux"></a>&#x2F;selinux</h4><p>前面我提到过，一套强制访问控制（MAC）机制对应的存储目录。</p><h4 id="x2F-srv"><a href="#x2F-srv" class="headerlink" title="&#x2F;srv"></a>&#x2F;srv</h4><p>通常和服务器有关，个人电脑没怎么见过，该目录存放一些服务启动之后需要的数据。</p><blockquote><p><em><strong>是用户主动生产的数据、对外提供服务所使用的文件。</strong></em></p><p><em>参考：<a href="https://blog.csdn.net/u012107143/article/details/54972544">关于linux下&#x2F;srv、&#x2F;var和&#x2F;tmp的职责区分</a></em></p></blockquote><h4 id="x2F-sys"><a href="#x2F-sys" class="headerlink" title="&#x2F;sys"></a>&#x2F;sys</h4><p>也是内核设备框架sysfs文件系统使用的目录，类似于<code>/proc</code>目录，只不过这个目录映射的是系统内核的设备树，用户态程序可以通过sysfs获取当前系统外设的一些信息，并使用驱动暴露的一些文件接口操纵外设。</p><h4 id="x2F-tmp"><a href="#x2F-tmp" class="headerlink" title="&#x2F;tmp"></a>&#x2F;tmp</h4><p>temporary（临时）的缩写，用来存放一些临时文件的、缓存文件的目录，比如浏览器下载过程中会先在此目录进行缓冲。</p><blockquote><p><em><strong>保存一些使用完毕后可随时销毁的缓存文件。</strong>（有可能是由系统或程序产生、也有可能是用户主动放入的临时数据、系统会自动清理）</em></p><p><em>参考：<a href="https://blog.csdn.net/u012107143/article/details/54972544">关于linux下&#x2F;srv、&#x2F;var和&#x2F;tmp的职责区分</a></em></p></blockquote><h4 id="x2F-usr"><a href="#x2F-usr" class="headerlink" title="&#x2F;usr"></a>&#x2F;usr</h4><p>虽然 <strong>&#x2F;usr</strong> 目录发音是 <strong>user</strong> ，但实际它是 <strong>Unix System Resources</strong> 的缩写，意思是 <strong>Unix 系统资源</strong> 。用户的很多应用程序、运行库、文档、配置都存在都这个目录下，有点类似于Windows下的program files目录。这个目录中的文件都是只读的。</p><ul><li><p>&#x2F;usr&#x2F;bin：包含对所有用户都能使用的<strong>非基础命令</strong>，是系统中大部分命令的存储目录。（注：与<code>/bin</code>目录区别。）</p></li><li><p>&#x2F;usr&#x2F;include：C语言头文件所在目录（Unix是用C语言写的）。</p></li><li><p>&#x2F;usr&#x2F;lib：包含着所有 <code>/usr/bin</code>和 <code>/usr/sbin</code>目录中可执行命令程序需调用的库文件。</p></li><li><p>&#x2F;usr&#x2F;share：通常包含着命令的一些数据文件、配置、文档等。</p></li><li><p>&#x2F;usr&#x2F;local：通常通过源码编译安装的软件会安装到此目录，Unix程序员约定俗成的目录。</p></li><li><p>&#x2F;usr&#x2F;src：内核源代码所在目录（你用Unix系统很容易就可以接触到源码）。</p><blockquote><p><em>参考：<a href="https://learnku.com/server/wikis/36496">Linux 目录结构：Unix 系统资源目录（&#x2F;usr）</a></em></p></blockquote></li></ul><h4 id="x2F-var"><a href="#x2F-var" class="headerlink" title="&#x2F;var"></a>&#x2F;var</h4><p>variable（变量）的缩写，通常习惯将那些易变的、易失的文件放在这个目录下，很多程序的日志文件保存在此目录。</p><p>比如你在本机搭建了一个Apache或者nginx服务器，通常网站数据也被保存在这个目录。</p><blockquote><p><em><strong>系统产生的不可自动销毁的缓存文件、日志记录。</strong>（系统和程序运行后产生的数据、不对外提供服务、只能用户手动清理）（包括mail、数据库文件、日志文件）</em></p><p><em>参考：<a href="https://blog.csdn.net/u012107143/article/details/54972544">关于linux下&#x2F;srv、&#x2F;var和&#x2F;tmp的职责区分</a></em></p></blockquote><h4 id="x2F-run"><a href="#x2F-run" class="headerlink" title="&#x2F;run"></a>&#x2F;run</h4><p>是一个临时文件系统，存储的是系统启动、运行需要的文件，系统重启时，该目录下文件会被抛弃重新生成。通常<code>/var/run</code>目录，会链接到 <code>/run目录</code>。</p><blockquote><p> <em>参考：<a href="https://www.runoob.com/linux/linux-system-contents.html">Linux 系统目录结构</a></em></p></blockquote><h3 id="为什么这么设计？"><a href="#为什么这么设计？" class="headerlink" title="为什么这么设计？"></a>为什么这么设计？</h3><p>可能上面的那些目录，大多数看了也头晕，为什么<code>/usr</code>目录下很多内容和<code>/</code>目录里的是相同的？</p><p>历史原因和发展原因。</p><p>以下摘自阮一峰大佬博客<a href="https://www.ruanyifeng.com/blog/2012/02/a_history_of_unix_directory_structure.html">Unix目录结构的来历</a>：</p><blockquote><p><em>话说1969年，Ken Thompson和Dennis Ritchie在小型机PDP-7上发明了Unix。1971年，他们将主机升级到了PDP-11。</em></p><p><em><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/PDP-7-computer.jpeg" alt="小型机PDP-7"></em></p><p><em>当时，他们使用一种叫做RK05的储存盘，一盘的容量大约是1.5MB。</em></p><p><em><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/rk05-storage-disk.jpeg" alt="RK05存储磁盘"></em></p><p><em>没过多久，操作系统（根目录）变得越来越大，一块盘已经装不下了。于是，他们加上了第二盘RK05，并且规定第一块盘专门放系统程序，第二块盘专门放用户自己的程序，因此挂载的目录点取名为&#x2F;usr。也就是说，根目录”&#x2F;“挂载在第一块盘，”&#x2F;usr”目录挂载在第二块盘。除此之外，两块盘的目录结构完全相同，第一块盘的目录（&#x2F;bin, &#x2F;sbin, &#x2F;lib, &#x2F;tmp…）都在&#x2F;usr目录下重新出现一次。</em></p><p><em>后来，第二块盘也满了，他们只好又加了第三盘RK05，挂载的目录点取名为&#x2F;home，并且规定&#x2F;usr用于存放用户的程序，&#x2F;home用于存放用户的数据。</em></p><p><em>从此，这种目录结构就延续了下来。</em></p><p><em>注：这部分原文来自<a href="http://lists.busybox.net/pipermail/busybox/2010-December/074114.html">Rob Landley的邮件</a></em></p></blockquote><h2 id="…"><a href="#…" class="headerlink" title="…"></a>…</h2><p>以上，未完待续。</p><p>欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>MacOS</tag>
      
      <tag>Unix</tag>
      
      <tag>Unix哲学</tag>
      
      <tag>树状结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android｜使用IntDef注解代替枚举类</title>
    <link href="/2022/02/19/using-intdef-annotation-instead-of-enum-for-android/"/>
    <url>/2022/02/19/using-intdef-annotation-instead-of-enum-for-android/</url>
    
    <content type="html"><![CDATA[<h2 id="Java枚举类型的问题"><a href="#Java枚举类型的问题" class="headerlink" title="Java枚举类型的问题"></a>Java枚举类型的问题</h2><p>枚举类型，理解起来还是比较容易的，通常用于维护有限个的常量元素，当一个变量的类型有几种可能的情况时，我们就用<strong>枚举类型</strong>将这些可能值“枚举”出来。</p><p>枚举类型，在C&#x2F;C++中比较单纯，就是代表了一个整型值；而Java中，枚举类型是一个类，支持多态和各种扩展方法，有很多玩法和奇怪的实现，比如，用枚举类型实现的工厂模式等等。</p><p>Java中枚举类型支持的各种扩展，<strong>带来的问题就是内存占用，其代码实现过于繁重。</strong></p><p>假如我只有一个维护三个常量元素的需求，如EnumTest.java中代码所示，我只需要三个常量MODE_A&#x2F;B&#x2F;C。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// EnumTest.java</span><br><span class="hljs-keyword">package</span> com.rfw.androiddemo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by rf.w on 2022/2/15.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">EnumMode</span> &#123;<br>        MODE_A,<br>        MODE_B,<br>        MODE_C<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用<code>java2smali</code>插件可以将此文件转换成对应的smali文件，这里会转换成两个文件：EnumTest.smali和EnumTest$EnumMode.smali，因为这里的<code>EnumMode</code>会被当作是内部类。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># EnumTest$EnumMode.smali部分内容</span><br><span class="hljs-comment"># ...</span><br><br><span class="hljs-keyword">.annotation</span><span class="hljs-keyword"> system</span> <span class="hljs-class">Ldalvik/annotation/Signature;</span><br>    value = &#123;<br>        <span class="hljs-string">&quot;Ljava/lang/Enum&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;&quot;</span>,<br>        <span class="hljs-string">&quot;Lcom/rfw/androiddemo/EnumTest$EnumMode;&quot;</span>,<br>        <span class="hljs-string">&quot;&gt;;&quot;</span><br>    &#125;<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end annotation</span><br><br><br><span class="hljs-comment"># static fields</span><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> private</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-keyword"> synthetic</span> $VALUES:[<span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span> enum MODE_A:<span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span> enum MODE_B:<span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span> enum MODE_C:<span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br><span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><p>通过反编译后的smali代码可以看到，<code>EnumMode</code>类生成的签名类型其实是<code>java.lang.Enum&lt;EnumTest.EnumMode&gt;</code>；枚举类型中的每个变量，都会生成一个该类型的静态变量。</p><p>在<code>EnumTest.EnumMode</code>的静态代码块中会将变量名<code>MODE_A</code>和对应值，作为参数依次调用<code>java.lang.Enum</code>的构造函数；最后，构造了一个数组<code>VALUES</code>，存储这三个静态变量。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># EnumTest.EnumMode的静态代码块</span><br><span class="hljs-comment"># direct methods</span><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> constructor</span> &lt;clinit&gt;()V<br><span class="hljs-keyword">    .registers</span> 5<br><br><span class="hljs-keyword">    .prologue</span><br>   <span class="hljs-built_in"> const/4 </span>v4, 0x2<br><br>   <span class="hljs-built_in"> const/4 </span>v3, 0x1<br><br>   <span class="hljs-built_in"> const/4 </span>v2, 0x0<br><br><span class="hljs-comment"># 实例化MODE_A</span><br><span class="hljs-keyword">    .line</span> 8<br>   <span class="hljs-built_in"> new-instance </span>v0, <span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br>   <span class="hljs-built_in"> const-string </span>v1, <span class="hljs-string">&quot;MODE_A&quot;</span><br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v0, v1, v2&#125;, <span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span>-&gt;&lt;init&gt;(<span class="hljs-class">Ljava/lang/String;</span>I)V<br><br>   <span class="hljs-built_in"> sput-object </span>v0, <span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span>-&gt;MODE_A:<span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br><span class="hljs-comment"># 省略MODE_B/C的实例构造 ...</span><br><br><span class="hljs-comment"># 构造了一个数组存储三个实例</span><br>   <span class="hljs-built_in"> const/4 </span>v0, 0x3<br><br>   <span class="hljs-built_in"> new-array </span>v0, v0, [<span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br>   <span class="hljs-built_in"> sget-object </span>v1, <span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span>-&gt;MODE_A:<span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br>   <span class="hljs-built_in"> aput-object </span>v1, v0, v2<br><br>   <span class="hljs-built_in"> sget-object </span>v1, <span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span>-&gt;MODE_B:<span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br>   <span class="hljs-built_in"> aput-object </span>v1, v0, v3<br><br>   <span class="hljs-built_in"> sget-object </span>v1, <span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span>-&gt;MODE_C:<span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br>   <span class="hljs-built_in"> aput-object </span>v1, v0, v4<br><br>   <span class="hljs-built_in"> sput-object </span>v0, <span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span>-&gt;$VALUES:[<span class="hljs-class">Lcom/rfw/androiddemo/EnumTest$EnumMode;</span><br><br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br><br><span class="hljs-comment"># 省略构造函数、valueOf与values方法...</span><br></code></pre></td></tr></table></figure><p>虽然枚举类型具有很多好处，但在这个需求场景下，显然Java枚举类型实现的代价有点大了。</p><p>这里完全可以用三个静态整型值加边界值判断进行轻量级实现，但是恶心之处在于，所有使用到这三个值的地方，我可能都需要进行异常值判断，来保证程序的鲁棒性。</p><h2 id="IntDef注解"><a href="#IntDef注解" class="headerlink" title="IntDef注解"></a>IntDef注解</h2><p>在这种情况下，Android提供的<code>IntDef</code>注解可以很好的解决枚举类型内存占用问题，可以说是一种更轻量级的“枚举功能”的实现。</p><p>官方文档地址：<br><a href="https://developer.android.com/reference/androidx/annotation/IntDef">https://developer.android.com/reference/androidx/annotation/IntDef</a></p><p>其定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(value = SOURCE)</span>  <span class="hljs-meta">@Target(value = )</span> annotation IntDef<br></code></pre></td></tr></table></figure><p>官方文档对IntDef注解的说明如下：</p><blockquote><p>“Denotes that the annotated element of integer type, represents a logical type and that its value should be one of the explicitly named constants. If the IntDef#flag() attribute is set to true, multiple constants can be combined.”</p></blockquote><p>翻译过来就是：</p><blockquote><p>“被IntDef注解修饰的整型表示一个逻辑上的类型，其值需是一系列定义的常量之一。如果IntDef#flag()属性设置为true，那么这些常量可以组合在一起使用。”</p></blockquote><h2 id="IntDef使用方法"><a href="#IntDef使用方法" class="headerlink" title="IntDef使用方法"></a>IntDef使用方法</h2><p>我们可以利用<code>IntDef</code>实现一个注解<code>Mode</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// IntDefTest.java</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IntDefTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MODE_A</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MODE_B</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MODE_C</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-meta">@IntDef(&#123;MODE_A, MODE_B, MODE_C&#125;)</span> <span class="hljs-comment">// Mode注解定义取值范围</span><br>    <span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="hljs-comment">// 声明Mode保留策略是源码级别</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Mode &#123;&#125;<br><br>    <span class="hljs-meta">@Mode</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">sMode</span> <span class="hljs-operator">=</span> MODE_A;<br><br>    <span class="hljs-meta">@Mode</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sMode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMode</span><span class="hljs-params">(<span class="hljs-meta">@Mode</span> <span class="hljs-type">int</span> mode)</span> &#123;<br>        sMode = mode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们先声明了三个静态int常量，然后利用<code>IntDef</code>声明我们的<code>Mode</code>注解取值范围为<code>MODE_A</code>、<code>MODE_B</code>、<code>MODE_C</code>，以及<code>Retention</code>保留策略为只保留源码中、编译时删除。</p><p>在<code>setMode()</code>方法的参数中，我们用<code>@Mode</code>注解修饰参数，这样，在我们的正常编码过程中，一旦出现传入参数并不是<code>MODE_A</code>、<code>MODE_B</code>、<code>MODE_C</code>三个值其中之一的情况，Android Studio就会提示你，参数有问题以及正确的取值范围是什么。</p><p>另外，即使这里传入的参数是1，即<code>MODE_B</code>的值，Android Studio也会提示参数错误的。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/20220219221905.png" alt="@Indef 传入参数"></p><p>这样便用最简单的方法，满足了我们对枚举类型最基本的功能诉求。</p><p>最后，<strong>值得注意的是，虽然这里IDE会提示参数错误，但是并不会影响代码的编译过程，还是可以编译成功的！</strong></p><h2 id="IntDef的flag属性"><a href="#IntDef的flag属性" class="headerlink" title="IntDef的flag属性"></a>IntDef的flag属性</h2><p>IntDef注解还有一个flag属性也很有用：当flag属性设置为true时，IntDef定义的值可以当作标志位，用<code>|</code>运算符组合使用。</p><p>修改之前<code>@Mode</code>注解的定义和各个模式的值如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MODE_A</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MODE_B</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MODE_C</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>;<br><br><span class="hljs-meta">@IntDef(flag = true, value = &#123;MODE_A, MODE_B, MODE_C&#125;)</span> <span class="hljs-comment">// Mode注解定义取值范围，设置flag属性为true</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="hljs-comment">// Mode注解保留策略是源码级别</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Mode &#123;&#125;<br></code></pre></td></tr></table></figure><p>这时，我们在调用<code>setMode()</code>的地方，便可以支持如下方式使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">IntDefTest.setMode(IntDefTest.MODE_A | IntDefTest.MODE_C);<br></code></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>类似<code>IntDef</code>的还有<code>LongDef</code>、<code>StringDef</code>，使用的方法基本一致，其中<code>StringDef</code>不支持flag属性。</p><p>Android已经为我们提供了这么有用的注解，还不赶快用起来？</p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术总结</tag>
      
      <tag>Java</tag>
      
      <tag>Android开发</tag>
      
      <tag>注解</tag>
      
      <tag>Intdef</tag>
      
      <tag>枚举类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件技巧｜OmniGraffle绘制任意起止点直线</title>
    <link href="/2022/02/13/how-to-draw-a-line-with-any-start-and-end-point-by-omnigraffle/"/>
    <url>/2022/02/13/how-to-draw-a-line-with-any-start-and-end-point-by-omnigraffle/</url>
    
    <content type="html"><![CDATA[<p><strong>OmniGraffle</strong>是MacOS下非常好用的一款绘图工具，可以用来绘制流程图、架构图、UML图、原型设计图等等。</p><p><p>默认情况下，OmniGraffle的直线&#x2F;箭头连接时是从一个形状的中心指向另一个形状中心的，在某些情况下绘制指向任意位置的箭头很不方便。</p><p>比如，图中我这里在整理WebView初始化流程时，希望标注一下方法的调用逻辑，就需要一个任意起止点箭头。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/omnigraffle_settings.png" alt="OmniGraffle软件设置"></p><p>通过以下操作可以解决此问题：</p><ol><li>选中需要设置的直线&#x2F;箭头。</li><li>点击右侧“<strong>检查器</strong>”面板上方的“<strong>属性</strong>”设置按钮。</li><li>在“<strong>线条</strong>”Tab页，取消“<strong>允许连接到其他对象</strong>”的勾选即可。</li></ol><p><strong>另外，设置一次之后，可以通过复制粘贴该直线的方式，避免多次设置。</strong></p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>软件技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工具</tag>
      
      <tag>软件技巧</tag>
      
      <tag>OmniGraffle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021总结——33岁离开央企的第一年</title>
    <link href="/2022/01/08/2021-summary-and-2022-targets/"/>
    <url>/2022/01/08/2021-summary-and-2022-targets/</url>
    
    <content type="html"><![CDATA[<p><strong>2021年，我33岁，是我从央企出来、在互联网度过的第一年。</strong></p><h2 id="0-回了个顾"><a href="#0-回了个顾" class="headerlink" title="0. 回了个顾"></a>0. 回了个顾</h2><p>总的来说，我适应了现在的工作节奏，除了一开始的头两个月，有太多的东西要学，压力的确有些大。现在的感觉就是，还有更多的东西我可以学，还没时间学。</p><p>说实话，<strong>我很喜欢这种可以不断地去学习新知识的感觉</strong>，这也是我换工作之后感觉到的最大变化。</p><p>每天早上骑车，沿着坝河去上班的路上，我对新的一天都会有所期待。</p><p>除了那些蓝色、橙色、黄色、红色大风预警的天气。😂</p><p>2021是充实的一年，现在回头看，去年初立的flag差不多都实现了，现在又到了年度总结+新年立flag的时间。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/2021-year-targets.png" alt="2021年度目标"></p><h2 id="1-读书"><a href="#1-读书" class="headerlink" title="1. 读书"></a>1. 读书</h2><p><strong>读专业书的确要比读小说、散文、历史等等其他书籍更花时间一些，也更费脑子一些，需要思考和消化的东西更多，但也会更有收获。</strong></p><p>其实，<strong>从多抓鱼买书就能发现，同样是二手书，专业技能的书总是要新上很多，恨不得就是24K纯新，普通书记就要旧一些了。</strong></p><p>目前，在读的计算机专业类书籍还有两本：《Android插件化开发指南》和一本Python编程书籍。</p><p>2021年，美团图书馆推荐的书单看了两本，《清单革命》、《零售的哲学》；有两本书读了两遍，第二遍还做了思维导图记录：《编写高质量代码：改善Java编程的151个建议》和《思维模型–建立高品质思维的30种模型》。</p><p>还有几本书准备再读一遍+总结一下，比如《蛤蟆先生去看心理医生》、《代码精进之路：从码农到工匠》、《写作是最好的的自我投资》、《可复制的沟通力》。前两本是先看了电子书后来又买了纸质书，后一本是多抓鱼买的二手。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/2021-read-books.png" alt="2021读过的一些书"></p><p>2021年家里添置了书柜，有段时间沉迷<del>泡泡</del>骗骗玛特的盲盒，有几层放了盲盒，后来醒悟过来，添置了一些书。</p><p>pdd是真的香，最不爱凑单买书，赶上特价或者想看的直接pdd当当官方店买，第二天就送到了，舒适。虽然已经在控制买书的冲动了，但是还是好些没有看完，明年要看完。</p><p>总的来说，这一年看的小说还是偏多，大部分都是侦探推理类的，专业书比例较少。看书过程中，一大开心事就是看到一本喜欢的书里又推荐了另一本。</p><p>2022年，我要控制总阅读量，提升书籍质量，提升专业技能书占比。</p><blockquote><p><strong>Flag 1：总读书30本，但是下面的书单必须看完。</strong></p></blockquote><h3 id="必须看完的书单List："><a href="#必须看完的书单List：" class="headerlink" title="必须看完的书单List："></a>必须看完的书单List：</h3><ol><li>《Android插件化开发指南》——最好能动手写一下，先买的电子书，后来多抓鱼购入</li><li>《Python编程快速上手》——系统性学一下，电子书</li><li>《重构》——pdd</li><li>《IDA Pro权威指南》——系统性学一下，多抓鱼购入</li><li>《C++ Primer》——系统性复习</li><li>《浪潮之巅》上&#x2F;下——pdd 当当旗舰店，在读，有收获</li><li>《金字塔原理》——pdd 当当旗舰店</li><li>《高效能人士的七个习惯》——pdd 当当旗舰店</li><li>《影响力》——pdd 当当旗舰店</li><li>《人月神话》——pdd 当当旗舰店</li><li>《阅读与写作讲义》&#x2F;吴军——尚未购买</li><li>《费曼学习法》——电子书</li><li>《一个故事的99种讲法》——京东</li><li>《夜航船》——pdd</li><li>《随机漫步的傻瓜》——多抓鱼，忘记哪本书推荐的了</li><li>《万历十五年》——高中时读过，没读懂，王小波《特立独行的猪》中也有写到</li><li>《中国大历史》——也是黄仁宇的，忘记哪本书上提过这本，评价挺高</li><li>《一只特立独行的猪》——在读中，两年前淘宝买的20年纪念版</li><li>《真希望我的父母读过这本书》——pdd</li></ol><h3 id="希望能重读-笔记的书单List"><a href="#希望能重读-笔记的书单List" class="headerlink" title="希望能重读+笔记的书单List:"></a>希望能重读+笔记的书单List:</h3><ol><li>《蛤蟆先生去看心理医生》——先买电子书，后多抓鱼</li><li>《代码精进之路》——先买电子书，后多抓鱼</li><li>《写作是最好的自我投资》——多抓鱼</li><li>《可复制的沟通力》——电子书</li></ol><p>好家伙，这就20本必读了。😂</p><h2 id="2-运动"><a href="#2-运动" class="headerlink" title="2. 运动"></a>2. 运动</h2><p>2021这一年通勤方式就是骑车，没中断过。记忆中最深刻的是有一次零下18度，薄皮手套冻傻了，眼镜结冰了；还有一次大风橙色预警，到公司一身土。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/2021-coldest-day-and-sandstorm-day.png" alt="2021最冷的天和最土的天"></p><p>似乎244个工作日（我工作日会记日记，大概是这个数量有可能有复制的重复笔记），每天上下班16.5公里，一年小4k公里。两只大腿粗了一圈，上肢主要靠抱娃训练。</p><p>新年买了纠结很久的华为watch gt3（pdd yyds），算是奖励，希望新年能够多做些上肢力量训练。</p><blockquote><p><strong>Flag 2：每周至少两次workout。一年100次吧。</strong></p></blockquote><h2 id="3-coding"><a href="#3-coding" class="headerlink" title="3. coding"></a>3. coding</h2><p>2021年在Github上pub了之前的xml排序小工具xmlabit，有人star我还是很开心的；另外，还有最早jeb脚本有人fork，也很开心。<br>希望新年可以继续努力，开源些有用的脚本工具代码。</p><p>换工作这一年里基本都是写Java，C&#x2F;C++倒是少了些，年底的时候接手了浏览器的代码，Java和Kotlin混合编程，Chromium内核代码是C++和Java，整个内核代码量巨大，完全不知道如何下手，有亿点点难。</p><p>话说Kotlin有些特性真的挺有意思的，但不搞清楚原理贸然使用也会带来很多不确定性，给别人擦屁股，解了些灵异bug都是Java和Kotlin混编的，新年要学一下Kotlin。</p><p>今年写了工作相关的一个小demo应用，希望新年可以写一个上市场的小应用。</p><blockquote><p><strong>Flag 3：用Kotlin写一个上市场的小应用。</strong></p></blockquote><blockquote><p><strong>Flag 4：开源一个脚本或者小工具。</strong></p></blockquote><h2 id="4-写作"><a href="#4-写作" class="headerlink" title="4. 写作"></a>4. 写作</h2><p>公众号2021年又捡起来了，并没有写的很好，考虑到利他性和读者，还是很难写的。希望能专注在技术分享+读书推荐。</p><blockquote><p><strong>Flag 5：写12篇关于技术相关+读书推荐的文章。</strong></p></blockquote><h2 id="5-养鱼"><a href="#5-养鱼" class="headerlink" title="5. 养鱼"></a>5. 养鱼</h2><p>2021年末尾的时候，养了一缸青鳉鱼，说实话特别开心，也特别解压。</p><p>现在鱼缸里有8只观背青鳉，10+只黑壳虾，2只迷你辣椒蟹，一只黑金刚螺。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/2021-medaka.png" alt="观背青鳉和黑金刚"></p><p>希望能让青鳉繁殖一波。另外有机会的话，还想养一对，蝶翼斑马鱼。</p><p>已经有小伙伴问我要教程了，准备整理一下发出来。</p><blockquote><p><strong>Flag 6</strong>：青鳉教程整理+养活一窝小小小青鳉。</p></blockquote><h2 id="6-旅行"><a href="#6-旅行" class="headerlink" title="6. 旅行"></a>6. 旅行</h2><p>2021年娃在爷爷奶奶家的时候，周末去了趟呼和浩特，还有天津；10月底的时候带娃去了趟环球影城。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/2021-travel.png" alt="2021旅行"></p><p>娃今年9月就要入幼儿园了，希望可以在9月之前带他去旅游一番。</p><blockquote><p><strong>Flag 7：娃入幼儿园前，带他旅游一趟！</strong></p></blockquote><h2 id="7-展了个望"><a href="#7-展了个望" class="headerlink" title="7. 展了个望"></a>7. 展了个望</h2><p>2021年转眼就过去了，感觉做了很多事情，但仔细再想，却又想不起做了哪些，只觉得自己还有很多事情可以做，还没有来得及做。</p><p><strong>2022年，我希望能把自己想做的事情尽量多做一些！</strong></p><p><strong>最大的愿望就是全家健健康康，开开心心，愿疫情离大家越远越好！</strong></p><p><hr><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p>![小黑杂说](https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png)<p>最后，附上2021书单：</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/2021-book-read-list.jpg" alt="2021书单"></p>]]></content>
    
    
    <categories>
      
      <category>总结回顾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2021年</tag>
      
      <tag>年度总结</tag>
      
      <tag>立flag</tag>
      
      <tag>年度目标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这是我的避世小角落，你的呢？</title>
    <link href="/2021/12/27/this-is-my-little-shelter-corner/"/>
    <url>/2021/12/27/this-is-my-little-shelter-corner/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/my-little-shelter-corner.jpg" alt="我的避世小角落"></p><p><strong>每个人都应该有一个避世小角落，那可以是一个地方，也可以一种热爱，让你看到它想到它，就可以把你从现实的纷扰中抽离出去。</strong></p><h2 id="一、意外开始的养鱼"><a href="#一、意外开始的养鱼" class="headerlink" title="一、意外开始的养鱼"></a>一、意外开始的养鱼</h2><p>是有一段时间没有更新了，主要是最近开始沉迷养鱼。现在对我来说，阳台上放鱼缸的小茶几就是我最好的避世小角落。</p><p>其实，养鱼说来也是意外，最早是白白给我安利小红书上的“古法养鱼”，当时只是觉得好看，没往心里去。</p><p><p>开始养鱼是因为带儿子去游乐园玩，他捞了三条小金鱼，回到家中找缸子买水草，但结局还是没活过三天。</p><p>可娃还想养，于是第二周末又去买鱼，买了十几条孔雀鱼和斑马鱼。结果，又死了。</p><p>后来娃不想养了，我这边不愿意了，我这该死的越挫越勇屡败屡战的性格啊。</p><p><p>于是就开始看视频学习，最后养了这一缸子观背青鳉鱼。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/my-medaka-fish-tank.jpg" alt="观背青鳉"></p><p>现在每天看鱼，我都会很放松。夜深娃静，一抹灯光，一缸清水，鱼儿摆尾的波纹里，散尽了我白日里所有烦心。</p><h2 id="二、你的避难所在哪儿？"><a href="#二、你的避难所在哪儿？" class="headerlink" title="二、你的避难所在哪儿？"></a>二、你的避难所在哪儿？</h2><p>这个问题，可能一千个人就会有一千个答案。</p><p><strong>家？</strong></p><p>我相信，大部分人从小写作文，都会把家比做是港湾，是停泊是修整的地方。<br>长大了可能会发现，家有部分时候是，有的人是。当柴米油盐、家长里短袭来，家里的琐事烦心可能不比外面少。</p><p><strong>书本？</strong></p><p>毛姆说，阅读是一座随身携带的避难所。打开书本就可以让你进入另一个世界与时空，世间纷扰，暂时与我无关。</p><p><strong>爱人？</strong></p><p>Yes乐队有首Run Through The Light，有一句歌词是这样：“I  asked  my  love  to  give  me  shelter，And  all  she  offered  me  were  dreams.”<br>你想要一个shelter（避难所），却可能求而不得。</p><p><strong>游戏？</strong></p><p>我觉得有部分是，当你在游戏世界中体验另一番人生，结束之后不会觉得疲惫愤怒，而是可以更好的爱这个世界和周遭的人们，那么就是。<br>PS.这也是我喜欢魔兽世界的原因。</p><h2 id="三、最后"><a href="#三、最后" class="headerlink" title="三、最后"></a>三、最后</h2><p>说来说去，最重要的还是要对生活有热爱，要有一个能沉浸其中的爱好。</p><p>沉进去，洗去疲惫，才能有力气再去面对生活中那些苟且。</p><p><strong>其实，生活的诗意未必在远方，也在你的那个避世小角落里。</strong></p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/cat-also-like-fish-tank.jpg" alt="doge"></p><p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>生活小记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>避世小角落</tag>
      
      <tag>养鱼日记</tag>
      
      <tag>古法养鱼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环球影城与肩膀差点裂开的爸爸</title>
    <link href="/2021/11/06/travel-universal-studios-with-2-years-old-boy/"/>
    <url>/2021/11/06/travel-universal-studios-with-2-years-old-boy/</url>
    
    <content type="html"><![CDATA[<p><strong>环球影城里有一个霍格沃茨城堡，城堡里面没有差点没头的尼克，度假区里倒是有一个差点肩膀裂开的爸爸。</strong></p><p>当然，周日早晨十点钟的吴小黑根本不会想到这些。那会儿他正站在霍格沃茨城堡外面排队买黄油啤酒，喔，还有他那差11天三周岁的娃。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/hogwarts-castle-outsides.jpg" alt="霍格沃茨城堡与霍格莫德村"></p><p>本来是根本不会来这里玩的，之前他还和白白说呢，这么多人排这么久队大概可能是疯了吧。</p><p>结果，这次部门团建送票，加上<strong>环球影城不到三周岁的儿童免票</strong>，再不来可就晚了！掏了一张家属票的钱，三个人来玩一天。真香。</p><p>“恩，香。”</p><p>吴小黑尝了一口传说中的黄油啤酒，挺有意思的，上面是一层厚厚的甜奶油，下面像是没有汽的菠萝啤的味道。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/hogwarts-and-butterbeer.jpg" alt="黄油啤酒"></p><p>早上9点30进园区便片刻也没有耽搁，右转穿过小黄人区就直奔“哈利波特与禁忌之旅”来了。原本小程序上显示排队35分钟，到城堡下一看，队伍已经蜿蜒到外面的小路上了，时间也变成45分钟了。</p><p>儿子身高才96cm，这个项目是玩不了的，城堡门口的工作人员给了张“<strong>家庭轮换卡</strong>”，白白先去排队玩，玩完去找工作人员打卡盖章，回来吴小黑就可以直接进去玩了。</p><blockquote><p><strong>TIPS：</strong>关于小程序和家庭轮换卡</p><p>不得不说，环球影城的微信小程序做的真的很 nice，可以很清楚的看到各个项目当前排队的时间。<strong>但是需要注意的是 15 分钟似乎是一个默认时间，当网络不好或者数据不够的时候就显示是 15 分钟。</strong></p><p>环球影城里有些项目是有身高限制的，不同项目还不太一样，大于132cm的小朋友应该全部项目都可以玩了，小朋友不能玩的这种情况，可以先去项目门口的工作人员那儿领一张“家庭轮换卡”，其作用就是一位家长在外面带孩子，另一位拿着这张卡去排队玩项目，玩完了找里面的工作人员盖章打卡，之前带娃的家长就可以拿着这张卡从速通通道免排队去玩啦。</p></blockquote><p>白白去排队，吴小黑尝试着把小朋友引去霍格莫德村，带他去看看那些神奇的“魔法”，结果小朋友不乐意就是要在城堡门口等妈妈。</p><p>“喏，你要不要尝一口？”</p><p>“不要！”</p><p>小嘴一撅，谁也不爱，然后就开始在婴儿车里边叫边扭来扭去。</p><p>“我就要和妈妈去排队盖章！”</p><p>那边，白白也不是排队干等着，而是围着城堡验证弯弯绕绕的通道转圈走了45分钟才走进城堡，5分钟玩完出来，远远地就看见那父子俩正站在人群的最外圈看“三强争霸赛动员会”表演——娃坐在爸爸肩膀上，爸爸左手边扶着儿子的腿、边举着零食百宝盒，右手端着一杯没有盖子的黄油啤酒——从右半边看过去就是托塔天王，从左半边看…就是托塔天王载人负重版😂。</p><blockquote><p><strong>TIPS：Check List</strong></p><ul><li>✅ 身份证件、宝宝的户口本；</li><li>✅ 娃的各种纸巾、零食、果汁等；</li><li>✅ 婴儿车（不带的话，度假区里也可以租，小车 100 大车 130）；</li><li>✅ 备用衣裤，谨防吃饭喝水或者水世界表演弄湿没得换；</li><li>✅ 充电宝+充电线；</li><li>✅ 保温杯，玻璃杯带不进去；喷雾之类的不让带也没啥好带的；</li><li>✅ 入园日期和时间记得要提前预约好。</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/hogwarts-castle-insides.jpg" alt="霍格沃茨城堡里的画像们"></p><p>轮到吴小黑去玩的时候，虽然城堡外面的街上已经没有排队的人了，但是依然有很多人在围着城堡绕圈圈。他拿着轮换卡一边从速通通道进入城堡，一边感慨资本力量的伟大，心里暗想，要是两个人来玩的话一定得整个速通卡，然后就选排队最长的项目大摇大摆地去玩，让大家都见识见识资本的力量。</p><p>从哈利波特区域出来的时候快12点了，在去功夫熊猫区路上的“漂流者小站”吃了汉堡+炸鸡，吃饭的时候白白看到“禁忌之旅”的等待时间只要25分钟了，表示很不开心。（后来才知道原来整个哈利波特区门口都在排队。）</p><blockquote><p><strong>TIPS：排队时间</strong></p><p>个人建议，路上看到 5 分钟或者 10 分钟时间的游乐项目就果断先去排队玩了，别犹豫。你现在错过的 5 分钟队伍，回头就会变成 25 分钟，而那些热门项目的队伍未必会一直有那么多人在玩。</p></blockquote><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/kong-fu-panda-insides.jpg" alt="功夫熊猫世界"></p><p>午后的阳光正好，去往功夫熊猫区人不多，大门口正上方雕刻了好多只熊猫，小朋友把手指举起来，凑到眼睛前，一个一个慢慢地查数，长长的睫毛颤抖着，仿佛在一起用力。</p><p>这是一个全室内的区域，所有的项目小家伙都可以玩，这下轮到吴小黑体会到了排队的痛苦了。</p><p>排队时婴儿车是不能推的，显示等待5分钟的项目的确是没多少人，但是那排队路线迷宫一样，感觉设计路线的人一定是一笔画玩多了，在一个房间里折来折去，看着离出口很近了，走近了发现还得再绕一圈。很多项目写着等待10分钟，那可真是实打实的让你走10分钟。</p><p>排队人不多的时候，小朋友自己走这种绕来绕去的路线太慢了，后面的游客会着急，吴小黑得抱着。</p><p>排队人多的时候，队伍艰难地往前挪，小朋友自己站着看到周围都是大人的腿，抬头啥也看不到，着急地嗷嗷叫，吴小黑也得抱着。</p><p>就这么抱着娃，玩完了功夫熊猫的三个项目，还好时间都不长还能坚持。</p><p>到了侏罗纪公园的“奇遇迅猛龙”（也就是电影中训练迅猛龙的场景还原），等了大概40分钟，结果还只是一个合影拍照环节，大人觉得毫无意思，小朋友却被“真恐龙”的叫声吓到一秒变脸——拍照时上一秒还在笑，下一秒就快哭出来了。</p><p>最后回到小黄人区域，等“神偷奶爸”项目的时候等的简直要吐血了，越等越觉得一开始径直穿过小黄人区是多么错误。</p><p>说来也奇怪，吴小黑只会用左手抱娃，右手不会抱。左手抱着抱着感觉就支撑不住了，先是右手托着左手，最后只能撑在栏杆上往前挪了😂。</p><p>这会儿吴小黑已经累到要裂开了，根据杠杆原理和力矩算了下，裂开的位置一定就在肩膀。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/universal-studios-beijing.jpg" alt="环球影城夜景"></p><p>从“神偷奶爸”项目出来时，天已经开始黑了，两人犹豫了好久，最后在去看演出还是灯光秀之间选择了去吃饭。因为实在走不动了，在日落时分走进了落霞餐厅吃了个饱。</p><p>吃完饭，看着娃有点犯困，开始唧唧歪歪说废话了，两人就决定回家。除了水世界的演出没看，其他所有小朋友能玩的项目也都完了，夜景什么的还是等下次吧。</p><blockquote><p><strong>TIPS：</strong>落霞餐厅是家中餐厅，有些像粤菜，大部分宝宝都可以吃，味道不错，价格合适。</p></blockquote><p>“也算是比较完美吧”，吴小黑心里想着，“下次来的时候一定带娃先玩人少的小黄人”，然后突然发现，下次再来的时候，婴儿推车里的这个小朋友再也不会有两岁的模样了。</p><p>站在度假区通往停车大楼走道上，白白趴在栏杆上往回看，远远望见高高的游乐设备在闪着灯光。</p><p>“原来我们走了这么远的路啊！那是城堡的灯光秀么？”</p><p>吴小黑不知道，推着娃的婴儿车站在她身后，看着她的背影，才发现他们一路竟走了十一年这么远。</p><p>他们的车停在地面停车场最靠近停车楼的那几排，很快就到了。开车从京哈高速回家的路上有一段没有路灯，周围也没有楼房，显得格外的黑，吴小黑看了眼后视镜里睡着的孩子，感觉到疲惫，却安心。</p><blockquote><p><strong>TIPS：停车场</strong></p><p>排队进停车场时候会问是普通停车还是优享停车，普通停车就是地面停车场，100 元；优享是停车大楼，200 元，离入口近一些。感觉如果 10 点之前到的话，普通停车就够了。</p></blockquote><p><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>生活小记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>带娃日记</tag>
      
      <tag>环球影城</tag>
      
      <tag>一日游</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读 贾平凹《养鼠》</title>
    <link href="/2021/10/27/reading-note-jia-ping-wa-feed-a-mouse/"/>
    <url>/2021/10/27/reading-note-jia-ping-wa-feed-a-mouse/</url>
    
    <content type="html"><![CDATA[<p>最近在读贾平凹（wā）的散文集《人生从容》，读到其中一则小文《养鼠》，甚是有趣，和大家分享一下。</p><p>文章的名字是《养鼠》，但是大多数情况下，人们是不喜欢老鼠的，有很多和老鼠有关的成语都不是什么好词的，那贾老为何会要养鼠呢？贾老养的是什么鼠呢？</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/ren-sheng-cong-rong.jpeg" alt="《人生从容》"></p><p>现在年轻人养鼠大多都是宠物鼠吧，贾老那肯定不是的。我自己想了下，我若是养鼠的话，只可能是养仓鼠或者是龙猫。</p><p>养仓鼠是因为小，弄个小笼子便好了，不会占很多地方。在B站看过一个给小仓鼠做了很多纸盒子游戏箱，让它闯关的，很可爱。但是我是绝对不会让它出来跑的，毕竟家里有只猫，这东西太小了，也就一顿的量。</p><p>养龙猫是因为挺可爱的，而且我可以骗我家猫这是一只猫，或者是一只兔子。再退一步，万一不行的话，还能吃上一个礼拜呢。手动狗头。</p><p>言归正传，贾老家的老鼠其实是个意外。本来他想着买一件十三楼的房子做书房来着，据说是顶层，不会有蚊子和灰尘，能让他安心读书写作，却不想来了只老鼠。</p><p>这是贾老第一次见到这只老鼠，“一拃（zhǎ 张开大拇指和中指的距离）多长，皮毛淡黄，尖嘴长尾，眼睛漂亮”，老鼠看到贾老开门吓了一大跳，“跌坐在地上”。</p><p>贾老试了想把老鼠撵走，未遂，却又觉得既然无法赶走，就只能留着它，想着是条生命，便就养着了，这一养便是三四年。</p><p>养老鼠要喂它吃些什么，贾老其实先开始是不知道的，便一个个的试。什么儿歌里的偷油吃、偷鸡蛋、流行歌曲里的“老鼠爱大米”，竟都是假的。这老鼠不吃剩菜剩饭剩面条，有次贾老特意买了包松子给这只老鼠，居然也不吃。</p><p>可巧来，这小家伙却爱吃馒头和锅盔，贾老是陕西人，这老鼠的口味像只陕西老鼠，更平添了几分亲近。“有时也冒出一个想法，这老鼠咋和我的饮食习惯差不多：不要求多豪华，但一定要讲究，太软的馒头和锅盔不吃，太硬的馒头和锅盔不吃，锅盔不吃边楞儿，馒头不吃皮儿。”</p><p>贾老的书房里摆放着各式的佛像、雕塑，每日来的时候会焚香，“让诸神的法力充满”；离开的时候会拍拍石狮子，让它守护好这间小室，然后“再高声对老鼠说：馒头节省着吃，渴了不要喝佛前的净水，给你喝的在盒子里”。</p><p>夜深人静了，沉睡的书本和雕像，睁着眼的石狮子和巡夜的老鼠。这画面想来就是有趣。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/qibaishi-mouse.jpeg" alt="齐白石画鼠"></p><p>这只老鼠平日里和贾老相处倒是融洽，但也是有让贾老生气，想要送老鼠上路的时候。一次是咬坏了三四张汉唐拓片，一次是在佛案上、菩萨旁撒尿拉屎。生气归生气，但等到去买猫的时候，又心软了。回头在遇到小老鼠犯错，贾老也只会说句，“你等着”！就好像是幼儿园里两个小朋友闹别扭，赌气说出的话一样。</p><p>朋友们后来知道贾老的书房里养了只老鼠，取笑他，他却觉得自己和这只老鼠是有缘的，这只老鼠是有文化的：</p><blockquote><p>“世界上有那么多的老鼠，为什么偏就是这一只老鼠进了我的书房？它从地面到13楼，容易吗？它是冲着书籍来的，冲着古董玩物来的？那它真是有文化的老鼠了。如果它没有文化，那四年了，它白天里要看我读书写著，听着我和朋友们说文论艺，晚上又和书籍古玩在一起，它也该有些文化了吧。”</p></blockquote><p>贾老其实是把老鼠当成小友的，处一室却不相见，“动如参与商”，每日的交流便是那放在秦砖上的馒头与锅盔。</p><p>贾老心善，有时会想，这老鼠陪他这些年会不会孤独，是不是也有家人或者也想有家人，便一日夜里，整夜的开着门，心里默念这《大悲咒》，想要放这老鼠出去。</p><p>可心里终究是不舍得，他离开书房的时候又在老地方放上了馒头，回来的时候发现馒头不见了，又开心起来，还给这小友赐了名，唤作“行走”。贾老的书房名是“上书房”，这老鼠可以在这“上书房”随意“行走”了！</p><p>在文章的最后写了贾老第二次见到这老鼠的情景：</p><blockquote><p>“2014年9月24日下午，我在书房里写小说，到了黄昏，写累了，摘下眼镜凝视对面的佛像。我的写字台安在大房间的南边，北边是两个木架，全摆放着铜的铁的石的木的佛像。我看着佛像祈祷，祈望神灵赐给我智慧的力量，才一低头却看见了老鼠就在那木架前的地板上。四年了，这是我第二次看到它。它还是那么一拃长，皮毛淡黄。它在那里背向着我，突然上半身立起来，两个前爪举着，然后俯下身去；再上半身立起举着前爪，又俯下身去。我一下子惊呆了，也感动不已。我没有弄出声响，就看着它做完三次动作，然后便去了另一个房间。等它走了，我吁（xū）了一口气，放下正写的小说，就写下了这篇小文。”</p></blockquote><p><strong>恍然就好像在我眼前一样，最后一点夕阳从窗户斜照在屋角的佛像身上，贾老坐在书桌前，写累了文章，揉着眼睛看着佛像，这时小老鼠凭空出现，背对着贾老，拖着长长斜斜的影子，立起身来，向着佛像拜了三下便跑开不见。</strong></p><p>这仿佛像是神迹，又像是什么预示一样。<strong>我查了下，一般家鼠的寿命是1~3年，而贾老家的鼠一养便是四年，没准就是这只小鼠每日陪贾老一起焚香修文、礼佛著书，渡了劫数。</strong></p><p>最后，愿贾老和小友都能长命百岁吧。</p><hr><p>最后的最后，附上《养鼠》原文：</p><blockquote><p>买了十三楼的一个单元房做书房，以为街道的尘灰不得上来，蚊子不得上来，却没想到上来了老鼠。老鼠是怎么上来的，或许是从楼梯，一层一层跑上来，或许沿着楼外的那些管道，很危险地爬上来。可以肯定的这只是一个老鼠，因为我见过一次，是那天早上一开门，它正立在客厅,猛地门响，似乎吓了一跳，跌坐在地上，便立即翻起身钻到另一个房间去了。我的朋友来我处借书的时候也见过一次，它站在那个古董架上洗脸，一闪就不见了。</p><p>它是一拃（zhǎ 张开大拇指和中指的距离）多长，皮毛淡黄，尖嘴长尾，眼睛漂亮。老鼠之所以叫老鼠，生下来就长胡子，但他仍是个幼年的老鼠。书房里突然有了老鼠，我得赶紧检查房子的漏洞，我是从来不开窗子的，进门也是顺手关门，我发现柜式空调的下水管那儿有个空隙，便把它堵严了。老鼠如同麻雀一样，离不开人，要在屋檐下筑窝，但又不亲近人，人一靠近就飞了。</p><p>老鼠和我仅打过一次照面，至后再没有见过，而我不愿意他留在书房。要把老鼠捉住或撵走，到处堆满书籍报刊和收集来的古董玩物，清理起来十分困难，这就无法捉住和撵走。也买了鼠药放在墙角，它根本不吃，又买了好几块粘鼠板摆在各处，它仍不靠近。反倒是我有一次不经意踩上了一脚，鞋子半天拔不下来。书房唯一出口就是大门，晚上开了门让它走吧。可在城市的公寓楼上，晚上怎敢大门不关呢，何况这还可能有另外的老鼠进来。那怎么办？既然无法捉它和撵它，它又无法自己出去，毕竟是一条生命，那就养吧。一养便养过了四年，我还在养着。</p><p>养老鼠其实不费劲，给它提供食物就是。我的书房离我居住的家较远，我是每天早上来到书房，晚上了再回到家去。第一次我在晚上离开书房时，将一块馒头放在一块干净的秦砖上，第二天早上再来时，那馒头就不见了。但当天晚上没有了馒头，把剩下的面条放在那儿，早上再来时，面条竟然完好无缺。我以为它是从什么地方出去了，或者是死了，就又在离开时放上馒头，以测试我的猜想。可隔了一夜，却发现馒头又没了。我这才知道它是不吃面条的。</p><p>以后的日子，我没有给它留剩饭，常在冰箱里备留两三个馒头，数月后，到了秋天，楼下的馒头店搬走了，没有了馒头，我就放了花生，有生花生和油炸过的花生，但它好像仅吃个二三粒就不吃了。我以为松鼠是吃松子的，松鼠和老鼠应该是同一类，我在超市里发现了有卖松子的，买了一包，回书房放了，还说：“给你过个生日！”可是它也不吃松子。我就有些生气了，什么嘴呀，这么挑食？！</p><p>朋友请吃饭，剩下的鱼呀，排骨呀，油饼、锅盔和饺子拿回来，全给他放了，它只吃锅盔。馒头和锅盔放的干了硬了，它也不吃。有一次我给我买了晚饭，剩下一根火腿肠，晚上放给它了；那么长的一根火腿肠，它竟吃的一点渣屑都不剩。原来它可以吃肉的，不要带骨头的那种。我每次外出吃饭，便给它带些剩肉，它却又不吃了。丸子不吃，糯米团不吃，方便面不吃，核桃仁葡萄干不吃，豆腐吃过一次，再放就再不吃了。那它还吃什么呢？我想想有一首歌：我爱你，就像老鼠爱大米。抓了一把米放在那里，结果它根本不吃。</p><p>我看过漫画，老鼠是偷油的，也会抱着拿鸡蛋的，我就在碟子里放菜油，它没有吃；放过一颗鸡蛋，它也没有动。而朋友送来的水果，比如梅子、苹果、梨、香蕉、猕猴桃，它只吃香蕉和猕猴桃，但也是在香蕉和猕猴桃上咂（zā）出一个小洞，吃了一点就是了。它还是喜欢吃馒头和锅盔，我就笑了，陕西人爱吃这些，它也真是陕西的老鼠。有时也冒出一个想法，这老鼠咋和我的饮食习惯差不多：不要求多豪华，但一定要讲究，太软的馒头和锅盔不吃，太硬的馒头和锅盔不吃，锅盔不吃边楞儿，馒头不吃皮儿。</p><p>我的书房里拥挤不堪，但还乱中有序，除了几十个书架，这儿一摞书籍，那儿一堆报刊;再就是那些偶像，佛教的，道教的，儒教的;更多的是秦汉唐的陶器、木刻、石雕，石雕又是什么动物的人物的都有，我每次进去，肯定要焚香的，让诸神的法力充满；要离开了，就拍着那只大石狮，它是人石狮身的瑞兽，给咱守护好呀！然后再高声对老鼠说：馒头节省着吃，渴了不要喝佛前的净水，给你喝的在盒子里。我到了外边，尤其是晚上，想着那么大的房间里，堆放了那么多东西；那些东西都是不动的，只有老鼠在其中穿行，如同巡夜一般，心里便充满乐意。</p><p>但我仍是给老鼠发过两次火。一次我翻捡那些汉唐石碑的拓片，发现有三四张被咬破了。我泼然大怒，骂道：老鼠，你听着，你竟敢咬我拓片？我警告你，如果再敢咬书咬纸，我彻底清理房间也要把你打死。从此，再没有发现他咬碎过什么。另一次，我在擦拭客房中堂的案桌，案桌上供奉着唐时的一尊铜佛和文殊普贤两位菩萨的石像，竟然有了老鼠的屎粒和尿渍，我再一次火冒三丈，大声警告：你去死吧，老鼠！去死吧！明天我抱一只猫来！但当我去市场买猫的时候，主意又变了，何必要他的性命呢，返回来给佛上了香，又供了水果和鲜花，我听见在什么地方响了一下，我猜想那肯定是老鼠在暗处耍我。我没有回头，只说了一句：“你记着！”</p><p>朋友们知道我在书房里养着老鼠，都取笑我，作贱我。我说：“这是一只听话的老鼠。”他们说：“听话？该不会说这是一只有文化的老鼠吧？”我脸上发烧，说：“它进来了，不得出去，我能不养吗？”或许是一种缘吧。</p><p>和老鼠能有什么缘呢？我的小女儿是属老鼠的，我的一些朋友也是属老鼠的；小女儿的到来和朋友的交集，那都是上天的分配，或者说磁铁吸的就是螺丝帽儿和钉子啊。小女儿让我有操不尽的心，朋友中也有帮助过我的也有坑害过我的，但你能刀割水洗了小女儿和朋友吗？世界上有那么多的老鼠，为什么偏就是这一只老鼠进了我的书房？它从地面到13楼，容易吗？它是冲着书籍来的，冲着古董玩物来的？那它真是有文化的老鼠了。如果它没有文化，那四年了，它白天里要看我读书写著，听着我和朋友们说文论艺，晚上又和书籍古玩在一起，它也该有些文化了吧。</p><p>所以我觉得我养了老鼠并不丢人，也不是无聊。四年里我没有加害它，也没有让它受饿；我没有奴役它，也没有从它那儿博取什么快活。它好像能知冷知热，我曾见它蜕下的毛，也似乎没生过病。它除了那两次犯错后来再没有咬噬过什么，也不再到有佛像的条案和架子上去。我们互不见面，我就是每天放食或隔空喊话；它在某一处偷偷耍我，偶尔到我梦中。但有一天，我突然担心起来，它是不是太孤单了。我并不知它是公是母，可无论公母它都是单身呀，它得有后代呀。我多么希望它能出了这个房子，到楼下的花园里去寻找它的伙伴，但它就是没有出去。</p><p>我终于决定了在一个夏夜把大门打开，我就坐在客厅里，拉灭了灯，连烟都不敢吸，让它出门；还在心里念了《大悲咒》，让它离开。到天明了，我只说它是出去了；当天我离开时又放了馒头，要证实它是真出去了。等我再一次回来，一开门就看秦砖上的馒头还在不在。我那时是又盼望馒头还在又盼望馒头不在；要是馒头还在，那它真的是走了，心里还有些不舍。可一看，馒头竟没有了。天呀，它还在。我就笑了，说：“那好，那好，行走！”我在瞬间里叫它是“行走”，因为我的书房名是上书房，而古时候上书房是皇帝读书的地方，能自由出入上书房的官就叫上书房行走，我也把我的老鼠叫做了行走。</p><p>2014年9月24日下午，我在书房里写小说，到了黄昏，写累了，摘下眼镜凝视对面的佛像。我的写字台安在大房间的南边，北边是两个木架，全摆放着铜的铁的石的木的佛像。我看着佛像祈祷，祈望神灵赐给我智慧的力量，才一低头却看见了老鼠就在那木架前的地板上。四年了，这是我第二次看到它。它还是那么一拃长，皮毛淡黄。它在那里背向着我，突然上半身立起来，两个前爪举着，然后俯下身去；再上半身立起举着前爪，又俯下身去。我一下子惊呆了，也感动不已。我没有弄出声响，就看着它做完三次动作，然后便去了另一个房间。等它走了，我吁（xū）了一口气，放下正写的小说，就写下了这篇小文。</p></blockquote><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读后小感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后小感</tag>
      
      <tag>贾平凹</tag>
      
      <tag>《养鼠》</tag>
      
      <tag>《人生从容》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鸿蒙OS 2.0安装谷歌服务框架 &amp; 解决设备未经Play认证问题</title>
    <link href="/2021/10/18/HarmonyOS-2-install-GMS-and-solve-device-not-certified-by-google-problem/"/>
    <url>/2021/10/18/HarmonyOS-2-install-GMS-and-solve-device-not-certified-by-google-problem/</url>
    
    <content type="html"><![CDATA[<h2 id="前情"><a href="#前情" class="headerlink" title="前情"></a>前情</h2><p>由于美国对华为的制裁，谷歌不再为华为设备提供服务，导致华为手机安装Google服务框架和Google Play商店会遇到各种问题。这种情况，已经安装GMS服务的手机并不会受到影响，可以继续使用。</p><p>同时，谷歌也不再为华为新款设备提供认证，会导致新款手机以及鸿蒙OS即使安装上了Google服务框架也会提示“此设备未经过Play认证”，无法使用Chrome、Gmail、日历等程序。</p><p>我的Mate30手机去年安装的Google服务框架，一直使用正常，最近几天开始出现“此设备未经过Play认证”的提示，一打开Chrome就闪退了。尝试了很多方法都不行，最后卸载所有组件重新安装才解决问题，记录下过程。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/device_not_certified_by_google.jpg" alt="此设备未经过Play认证"></p><p>整篇文章涉及的视频和所使用的软件工具，我一并上传到360云盘上：</p><blockquote><p><a href="https://yunpan.360.cn/surl_yM3C9aCLah5">https://yunpan.360.cn/surl_yM3C9aCLah5</a> 提取码：0a8a</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>手机：华为Mate30手机，鸿蒙OS2.0系统</p><p>网络：轻快VPN（<a href="https://qingkuai.org/#/register?code=2LEPMSrc">https://qingkuai.org/#/register?code=2LEPMSrc</a>）</p><p>如果之前有安装过谷歌服务框架，但是遇到和小黑一样的问题，最好卸载之前安装的GMS服务。</p><p>进入“设置 - 应用与服务 - 应用管理”，搜索栏输入“Google”，然后右上角菜单键“显示系统程序”，卸载Google服务框架、Google Play服务、Google通讯录同步等应用。</p><p>注意：“谷歌安装助手”应用可以不用卸载，因为重新安装的第一步就是要装这个软件。</p><h2 id="安装GMS"><a href="#安装GMS" class="headerlink" title="安装GMS"></a>安装GMS</h2><p>我安装时候参考的是Youtube上 @工匠先森 的一个视频：<a href="https://www.youtube.com/watch?v=0bMesV_en3M">https://www.youtube.com/watch?v=0bMesV_en3M</a>，教程中涉及的操作有一小部分需要在电脑端进行操作，绝大部分手机即可。</p><blockquote><p>这一步骤涉及的文件如下：</p><ol><li>01-华为手机鸿蒙2.0系统Ha…40 Mate30荣耀v30.mp4</li><li>01a-电脑端.zip，</li><li>01b-手机端.zip</li></ol></blockquote><h3 id="电脑端操作"><a href="#电脑端操作" class="headerlink" title="电脑端操作"></a>电脑端操作</h3><p>主要就是使用adb工具，<strong>卸载鸿蒙OS新版的“备份”APP，并安装旧版本“备份”APP。</strong></p><p>其目的就是为了后面可以使用旧版本“备份”APP恢复特殊版本备份的“谷歌安装助手”。</p><p>按照视频中的操作即可，<code>01a-电脑端.zip</code>解压后包括了adb工具和一个包含命令的txt文档。</p><p>这一步操作，其实可以写一个bat批处理脚本，双击一键完成。回头我补上。</p><h3 id="手机端操作"><a href="#手机端操作" class="headerlink" title="手机端操作"></a>手机端操作</h3><p>下载<code>01b-手机端.zip</code>到手机，用自带“文件管理”解压即可。</p><h4 id="1-通过“备份”APP恢复“谷歌安装助手”"><a href="#1-通过“备份”APP恢复“谷歌安装助手”" class="headerlink" title="1. 通过“备份”APP恢复“谷歌安装助手”"></a>1. 通过“备份”APP恢复“谷歌安装助手”</h4><p>按照视频操作一步步完成即可。</p><ol><li>将解压出来的<code>Huawei</code>目录拷贝到手机内部存储目录；</li><li>点击“设置 - 系统与更新 - 备份与恢复”，进入后授予权限，返回退出，然后再次进入，右上角点击菜单，选择本机备份文件，恢复即可。</li><li>返回桌面，找到“谷歌安装助手”，激活设备管理器，点击下载，回到桌面。</li></ol><h4 id="2-安装Googlefier"><a href="#2-安装Googlefier" class="headerlink" title="2. 安装Googlefier"></a>2. 安装Googlefier</h4><p>打开之前解压出来的<code>GMS</code>目录，安装Googlefier软件，这是一个半自动化的安装Google服务所需要的软件。</p><p>Googlefier的主界面用01、02、03等图片标注了安装顺序，01是添加Google账户、02是添加更多账户、03是安装一系列Google服务所需软件；大部分用户用到的只有01、03两个步骤。</p><ol><li>点击01，安装<code>MiCrOG - HUAWEI FIX ElOyGomezTV</code>软件并运行，添加Google账号</li><li>点击03，半自动化安装所有需要安装的软件一系列</li><li>卸载01步骤安装的<code>MiCrOG - HUAWEI FIX ElOyGomezTV</code>。</li></ol><h4 id="3-卸载重装Google通讯录同步、Google-Play服务"><a href="#3-卸载重装Google通讯录同步、Google-Play服务" class="headerlink" title="3. 卸载重装Google通讯录同步、Google Play服务"></a>3. 卸载重装Google通讯录同步、Google Play服务</h4><p>卸载Googlefier默认安装的Google通讯录同步和Google Play服务软件，安装解压出来<code>GMS</code>目录中的对应软件即可。</p><ol><li>点击“设置-用户账户-google-同步联系人” 打开，此时会同步失败。</li><li>点击“设置-应用与服务 - 应用管理”，搜索栏输入google，右上角菜单点击“显示系统程序”，卸载。</li><li>重新安装<code>GMS</code>目录中的两个软件</li></ol><h2 id="解决“此设备未获得Play授权”弹窗和通知问题"><a href="#解决“此设备未获得Play授权”弹窗和通知问题" class="headerlink" title="解决“此设备未获得Play授权”弹窗和通知问题"></a>解决“此设备未获得Play授权”弹窗和通知问题</h2><p>参考视频：<a href="https://www.youtube.com/watch?v=XAk2nYNDfMU">https://www.youtube.com/watch?v=XAk2nYNDfMU</a></p><blockquote><p>涉及文件：</p><ol><li>02-谷歌商店保护机制弹窗问题，华为mate40promate30手机解决谷歌商店保护机制弹窗问题转载John Wang.mp4</li><li>02-DeviceID.apk：用于获取手机的内部谷歌服务框架特征值，用于将当前手机在线注册成自定义ROM。</li></ol></blockquote><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/device_id.jpg" alt="DeviceID应用"></p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li>安装并运行<code>02-DeviceID.apk</code>。</li><li>复制界面上GSF ID（第二行），打开<a href="g.co/AndroidDeviceRegistration">g.co&#x2F;AndroidDeviceRegistration</a>，在线注册设备。</li><li>打开飞行模式断网。</li><li>第一次清除数据，“设置 - 应用与服务 - 应用管理”，搜索Google，右上角点击菜单选择“显示系统程序”。<ol><li>点击“Google服务框架”，点击“存储 - 清理数据”，后退并点击“停止运行”，直到按钮变成灰色。</li><li>点击“Google Play服务”，点击“存储 - <strong>清理缓存</strong>”，后退并点击“停止运行”，直到按钮变成灰色。</li><li>点击“Google Play商店”，点击“存储 - 清理数据”，后退并点击“停止运行”，直到按钮变成灰色。</li></ol></li><li>重启手机。</li><li>第二次清除数据，“设置 - 应用与服务 - 应用管理”，搜索Google。</li><li>点击“Google Play服务”，点击“存储 - <strong>管理空间 - 清除所有数据</strong>”，后退并点击“停止运行”，直到按钮变成灰色。</li><li>重启手机。</li><li>关闭手机飞行模式，打开VPN网络，应该就可以正常使用了。</li></ol><hr><p><p>以上，欢迎关注公众号“<strong>小黑杂说</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>避坑指北</category>
      
    </categories>
    
    
    <tags>
      
      <tag>避坑指北</tag>
      
      <tag>遇坑总结</tag>
      
      <tag>鸿蒙OS</tag>
      
      <tag>安装GMS</tag>
      
      <tag>此设备未经过Play认证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10分钟学点《思维模型》13：帕累托法则 &amp; 史特金定律 &amp; 帕金森定律</title>
    <link href="/2021/09/30/10-minutes-learning-mental-model-read-notes-13/"/>
    <url>/2021/09/30/10-minutes-learning-mental-model-read-notes-13/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文将介绍 <strong>第五章 《经典思维模型》</strong> 的思维模型，这一章是一些以观察者或发现者命名的定律，这篇文章介绍：<strong>帕累托法则</strong>、<strong>史特金定律</strong>、<strong>帕金森定律</strong>。</p><h2 id="思维模型27：帕累托法则"><a href="#思维模型27：帕累托法则" class="headerlink" title="思维模型27：帕累托法则"></a>思维模型27：帕累托法则</h2><p><em>用于确定把时间和资源投入何处会产生最大的影响。</em> </p><p>“帕累托法则”（Pareto Principle）更为人知的名字可能是——<strong>“二八定律”（80&#x2F;20 rule）</strong>。</p><p>这个法则法则是意大利经济学家帕累托发现的。他准确地指出，意大利仅仅20%的人占有了80%的房地产。于是他想到，同样的分布是否适用于生活其他方面呢？事实上，他是对的。</p><p><strong>大多数事情都符合帕累托分布，投入和产出的比率是相当倾斜的。我们要做的是实现最佳的投入产出比。</strong></p><p>从某种意义上说，这关系到前面章节中关于收益递减规律的思维模型。在20%之外，你投入越多，带来的收益会递减。因此，除非你有一个极其清晰的目标，要让某个东西取得最佳表现或效率，你应该只专注那具体的20%，而不是其余80%的任务 。</p><p>这个思维模型有一个简单的主张和经验教训：<strong>在你寻求改善的领域，找到能带来80%产出的20%投入，专注这20%。不要企图同时去做所有事情，只专注重要的方面，取得更多你想要的结果。</strong></p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/The-rule-of-80-20.jpg" alt="专注重要的20%"></p><p>这个思维模型鼓励我们提升效率，取得最佳的投入产出比。不管细节或完成情况如何，哪些任务会产生最大影响？就把这些任务放在首位——这些任务或许已经足以满足你的目的。<br><strong>以结果为导向，不要纠缠旁枝末节。</strong></p><h2 id="思维模型28：史特金定律"><a href="#思维模型28：史特金定律" class="headerlink" title="思维模型28：史特金定律"></a>思维模型28：史特金定律</h2><p><em>用于去芜存菁，节省脑力。</em> </p><p>史特金定律（Sturgeon’s Law）：“<strong>任何事物，其中90%都是垃圾。</strong>” </p><p>科幻小说作家席奥多尔 · 史特金在1958年发表的一篇专栏文章中，他为自己选择的文体辩护，因为当时的科幻小说还没有摆脱纯属低俗小说的名声。史铎金认为，批评者对科幻小说的意见是以最低劣的例子为依据的。“90%的科幻小说是废物、糟粕或垃圾，按同样的标准，你也可以说90%的电影、文学、消费品等是垃圾。” </p><p>在两个方面，史特金定律有助于我们清晰思考。</p><ul><li><p>首先，想一下我们可能用于评估某件事的信息当中，有那么多是不必要、质量低劣、无关紧要，甚至是完全错误的。</p></li><li><p>第二，我们<strong>不应该过分纠结于那些部分有多么糟糕</strong>，而是应该专注良好的思维和流程。</p></li></ul><p>当然，史特金定律有几个限制条件。</p><ul><li><p><strong>每个人的标准都是相对的</strong>，我们的“眼中草”，可能是别人的“手中宝”。</p></li><li><p>比率也可能各不相同：在某些情况下，或许只有75%是垃圾。</p></li><li><p><strong>在10%的非垃圾里面，不是所有东西都是宝贝，有些只是比垃圾略好一点而已。</strong></p></li></ul><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/participation-inequality.png" alt="社交网络用户参与度不平衡现象"></p><p>这个模型在现在被解释为“<strong>90&#x2F;9&#x2F;1法则</strong>”，比如社交网络中用户参与度不平衡现象，<em>在大多数的在线社区中，90%的用户都是潜水者，从来不贡献内容，另外9%的用户贡献一小部分。而1%用户则贡献了绝大部分内容。</em></p><p>另外，一款软件的付费用户比例是不是也可以用这个模型来解释呢？值得思考。</p><h2 id="思维模型29～30：帕金森定律"><a href="#思维模型29～30：帕金森定律" class="headerlink" title="思维模型29～30：帕金森定律"></a>思维模型29～30：帕金森定律</h2><p><em>用于克服拖延症，花更少时间做更多的事。</em> </p><h3 id="“帕金森鸡毛蒜皮定律”（也称“自行车棚效应”）"><a href="#“帕金森鸡毛蒜皮定律”（也称“自行车棚效应”）" class="headerlink" title="“帕金森鸡毛蒜皮定律”（也称“自行车棚效应”）"></a>“帕金森鸡毛蒜皮定律”（也称“自行车棚效应”）</h3><p><strong>人们很容易想太多，纠缠于对一项任务的大局无关紧要的细节，重要性高得多的重大问题反而草草了事。人们会不知不觉地把不成比例的时间和注意力投向鸡毛蒜皮的任务。</strong></p><h4 id="背后的故事"><a href="#背后的故事" class="headerlink" title="背后的故事"></a>背后的故事</h4><p>一个委员会负责设计一座核电站，这显然是一项重大的工程，委员会需要适当审慎行事，处理建造新核电站的安全机制及其对环境的影响。 </p><p>委员会定期会晤，能够消除大多数安全和环境问题，甚至能够确保核电站设计美观，肯定会吸引最优秀的工程师。</p><p>然而，<em>委员会开会处理余下的问题时，一个问题反复出现：为骑自行车上班的员工提供的自行车棚设计。这包括颜色、标识、所用材料、安装什么类型的自行车架。</em></p><p>委员会纠缠于这些细节——对于核电站运作的大局来说，这是无关紧要的细节。他们纠缠于旁枝末节，公说公有理，婆说婆有理。 </p><h4 id="为什么呢？"><a href="#为什么呢？" class="headerlink" title="为什么呢？"></a>为什么呢？</h4><p>帕金森是这样总结自行车棚讨论这场闹剧的：“议程表上每个项目所需要的讨论时间与该项目所涉及的金额成反比。” </p><ul><li><p>第一个理由是拖延症和逃避心态。 <strong>当人们想要拖延一件事，又不想无所事事，就经常会找一些好像有用的事瞎忙活。</strong> 鸡毛蒜皮的琐事在某个时候还是需要处理的，我们可以没完没了地折腾，感觉自己好像在做事，而不是成天躺在沙发上啥也不干。</p></li><li><p>第二个理由是 <strong>在小组讨论中，鸡毛蒜皮定律可能是由于个人想要做出贡献，但发现自己只能在最鸡毛蒜皮的琐事上做出贡献。</strong> 他们是委员会成员，但不具备所需知识或专业知识，无法在更重大的事情上做出贡献。</p></li></ul><h4 id="如何避免会议中的鸡毛蒜皮？"><a href="#如何避免会议中的鸡毛蒜皮？" class="headerlink" title="如何避免会议中的鸡毛蒜皮？"></a>如何避免会议中的鸡毛蒜皮？</h4><p>召开会议的主要和唯一理由是解决需要多人提出意见的重大问题。<strong>头脑风暴会议必须坚持遵循议程，其他事情应该独立解决。不然，讨论水准无可避免地会降低到与会人士最肤浅的共同话题。</strong></p><p>要运用这个思维模型，避免纠缠鸡毛蒜皮的琐事，关键有三点：</p><ol><li><p><strong>制定严格的议程</strong>，无论是待办事项清单、日程还是其他方法，你要知道自己应该专注哪些方面、忽略哪些方面；</p></li><li><p>明白你当天的整体目标，<strong>不断地问自己正在做的事是有助于实现整体目标，还是逃避整体目标</strong>；</p></li><li><p>在自己精力开始耗尽时意识到这一点，避免自己转向鸡毛蒜皮的琐事。</p></li></ol><h3 id="“帕金森定律”（Parkinson’s-Laws）"><a href="#“帕金森定律”（Parkinson’s-Laws）" class="headerlink" title="“帕金森定律”（Parkinson’s Laws）"></a>“帕金森定律”（Parkinson’s Laws）</h3><p><strong>只要还有时间，工作就会不断扩展，直到用完所有的时间。</strong> 无论给自己定了多长或多短的期限，你都会耗尽所有的时间来完成工作。</p><p>这个定律的更一般形式是：“<strong>扩大规模会降低效率</strong> ”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/Parkinson's_Laws.jpeg" alt="帕金森定律"></p><p>帕金森观察到，当官僚机构膨胀时，其效率不增反减。人们拥有的空间越大、时间越多，他们耗费的空间和时间就越多 。</p><p>在帕金森定律的基础上，对大学生进行的一项研究表明，为完成作业设定严格期限的大学生，持续比给自己过多时间或不设期限的学生表现更佳。 </p><p>如果你想要提高生产力和效率，就必须为完成任务所用时间施加人为限制。 <strong>只要简单地为工作设定时间限制和期限，你就会迫使自己专注任务的关键元素。</strong> 你不会光是为了打发时间，就让事情变得过于复杂或困难，从而避免落入帕金森定律的陷阱。</p><p>设定紧迫的期限，<strong>不断给自己提出挑战</strong>，你就可以避免这个陷阱。你应该要求自己尽早完成任务。<strong>给自己更少的时间，才可以节省时间。</strong> </p><p><hr><p><p>以上，<strong>全书完</strong>。</p><p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10分钟学点《思维模型》12：墨菲定律 &amp; 奥卡姆剃刀定律 &amp; 汉隆剃刀原则</title>
    <link href="/2021/09/27/10-minutes-learning-mental-model-read-notes-12/"/>
    <url>/2021/09/27/10-minutes-learning-mental-model-read-notes-12/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文将开始介绍 <strong>第五章 《经典思维模型》</strong> 的思维模型，这一章是一些以观察者或发现者命名的定律，这篇文章介绍其中三个：<strong>墨菲定律</strong>、<strong>奥卡姆剃刀定律</strong>、<strong>汉隆剃刀原则</strong>。</p><h2 id="思维模型24：墨菲定律"><a href="#思维模型24：墨菲定律" class="headerlink" title="思维模型24：墨菲定律"></a>思维模型24：墨菲定律</h2><p><em>用于确保不要心存侥幸 。</em></p><p>有时候，我们偏偏在穿着白色裤子那一天，上班途中绊倒了。到了办公室，我们坐在肮脏的椅子上，白色裤子的两边都弄脏了。下班后，旁边一个篮球飞过来，砸在你身上，裤子前后左右都脏透了。</p><p>这就是<strong>墨菲定律(Murphy’s Law)<strong>，“</strong>凡是可能出错的事就一定会出错</strong>”。</p><p>它还有一些推论，你很可能没听过，但我相信，你一定遇到过。</p><ul><li>墨菲定律第一推论：如果你不管，事情往往会变坏。如果你想纠正，只会加快变坏的进程。</li><li>墨菲定律第二推论：万无一失的结果是不存在的。</li><li>墨菲常数：一件物品损坏的概率与其价值成正比。</li><li>墨菲定律量化版：所有事情都会同时变坏。</li><li>依托勒观察(Etorre’s Observation)：你排队的那一列一定是最慢的。</li></ul><p>墨菲定律由美国空军工程师爱德华·墨菲(Edward Murphy)上尉提出，他在自己的日常设计飞机的工作中发现，“如果有两种方式去做某件事情，而其中一种选择方式将导致灾难，则必定有人会做出这种选择。”</p><p>这句话最终演绎成今天的版本：“如果坏事情有可能发生，它总会发生。”</p><p>**墨菲定律鼓励大家复核、确认和严格测试，从而保证安全可靠。 ** 它提醒我们，一切都是可能失败和出现失误的。</p><p>我们需要<strong>改变对确定性事件的态度，为最坏的情况制订计划</strong>。</p><h2 id="思维模型25：奥卡姆剃刀定律"><a href="#思维模型25：奥卡姆剃刀定律" class="headerlink" title="思维模型25：奥卡姆剃刀定律"></a>思维模型25：奥卡姆剃刀定律</h2><p><em>用于确定任何事情的可能性。</em></p><p><strong>奥卡姆剃刀定律</strong>(Occam’s Razor)：<strong>最简单的解释反而最可能是最接近真相的答案。</strong></p><p>奥卡姆剃刀定律最初的表达是，“如无必要，勿增实体。”</p><p>简言之，<strong>在解决问题的时候，不应该引入过多额外的假设、变量或外来因素，使得问题的解决变得过于复杂。</strong></p><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>在晴朗的夏天，你一大早醒过来，发现门外的垃圾桶在夜里翻倒了，垃圾在车道上撒得到处都是。究其原因，你可以提出几个不同的理论:</p><p>● 一道闪电从天而降，击中和打翻了你的垃圾桶。</p><p>● 一群不良少年蓄意捣乱，决定袭击你的垃圾桶。</p><p>● 一只外星蜘蛛从宇宙的虫洞里爬出来，在你的垃圾桶里翻找一种物质，帮助它回到自己的星球。</p><p>● 附近一只浣熊找东西吃，推翻了你的垃圾桶。</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>奥卡姆剃刀定律几乎总是开始着手解决问题的最佳方式。奥卡姆剃刀定律是一个实践中的原则，不是规则。</p><p>这个思维模型鼓励我们<strong>从最简单的解释出发，仔细而又缓慢地逐一加入额外因素。</strong></p><p>先去考虑对某件事最容易解释、最简单、最切合实际的诠释，只有在合理的情况下，才去考虑更错综复杂的解释。过于繁杂或不必要的元素只会让你分心，无暇顾及原来的问题。</p><h2 id="思维模型26：汉隆剃刀原则"><a href="#思维模型26：汉隆剃刀原则" class="headerlink" title="思维模型26：汉隆剃刀原则"></a>思维模型26：汉隆剃刀原则</h2><p><em>用于在解释行动时不要恶意揣测别人。</em> </p><p>汉隆剃刀原则最初是在1774年由罗伯特·汉隆（RobertHanlon）提出的，原文是：“如果粗心足以解释的话就不要归咎为恶意。”</p><p>现代最为广为人知的版本是“<strong>斥之以愚，勿斥以恶（能解释为愚蠢的，就不要解释为恶意）</strong>” 。</p><p>一个人较容易出于疏忽或无能做出负面的行动，而要真正归咎于恶意，还要多几个步骤。 </p><p>例如，你想在杂货店买一个品牌的麦片，可是站在你前面半米的一个人拿走了最后一盒。你厚着脸皮，生气地对前面的人喊道：“你知道我有多想要这盒麦片吗？你一点都不体谅我的心情！”可是前面的人头也不回。后来，你排队结账，观察他，才发现对方是聋子，听不见你的话。</p><p><hr><p><p>以上，全书未完待续。</p><p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10分钟学点《思维模型》11：不办事项清单 &amp; 避免阻力最小道路</title>
    <link href="/2021/09/15/10-minutes-learning-mental-model-read-notes-11/"/>
    <url>/2021/09/15/10-minutes-learning-mental-model-read-notes-11/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文将开始介绍<strong>第四章 《反向思考思维模型 》</strong>的后两个思维模型，通过逆向思维，我们应当列出不应该做的事项列表，然后避免做这些事情；同样，在面临选择时，我们应当避免选择最容易的那一个。</p><h2 id="思维模型22：不办事项清单"><a href="#思维模型22：不办事项清单" class="headerlink" title="思维模型22：不办事项清单"></a>思维模型22：不办事项清单</h2><p>**集中精力关注目前最重要的事情。 **</p><blockquote><p>原书中的翻译是“避免待办事项清单”，个人觉得应该翻译成“不办事项清单”更好一些。</p></blockquote><p>跟待办事项清单同样重要的是，你要列出<strong>不该办事项清单</strong>，这个清单可能包含了几类任务：</p><ol><li><p><strong>或许是优先事项，但由于外界环境，你目前还不能去处理的事情。</strong></p><p> 这些任务在一个或多个方面具有重要性，可是在等待其他人的反馈，或者要先等相关任务完成后才能去处理。</p></li><li><p><strong>对你的优先目标来说不能带来增值的任务。</strong></p></li><li><p><strong>目前持续进行，但即使花更多工夫或投入更多注意力也不能创造更多价值的任务。</strong></p><p> 让三项任务的完成质量达到80%，远比让一项任务的完成质量达到100%更加有用。</p></li><li><p>最后一点，<strong>紧急任务！</strong></p><p> 请参阅思维模型1。</p></li></ol><p>你挂念的事情越少越好——多余的任务会造成压力和焦虑，只会妨碍或扼杀生产力。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/Not-To-Do-List.jpg" alt="适合打印的不办事项清单"></p><p><strong>不该办事项清单可以消除大多数悬而未决的事情，为你减轻负担</strong>，腾出心思，专注一下飞来的球，沉稳地逐一击球。 </p><h2 id="思维模型23：避免阻力最小的道路"><a href="#思维模型23：避免阻力最小的道路" class="headerlink" title="思维模型23：避免阻力最小的道路"></a>思维模型23：避免阻力最小的道路</h2><p>**加强自律和意志力。 **</p><p>避免似乎过于简单、过于轻松、好得难以置信的事情——因为这往往不是真的好，你错失了应该走上的道路。</p><p><strong>你面前有一条轻松的道路和一条正确的道路——很多时候，只要你避免阻力最小的道路，多半就能走上正确的道路。</strong></p><p>这个思维模型的<strong>关键</strong>所在：<strong>你需要能够有意识地回答，自己究竟是在偷懒，还是在做正确的事。</strong></p><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>你现在有一小时的闲暇时间啦，下面有几种选择。</p><ol><li>跑步减肥：正确的事。</li><li>躺平、上网，不去运动锻炼：轻松的事。</li><li>假装运动一下就结束：轻松的事。</li><li>点外卖：轻松的事。</li><li>下楼买菜做饭，控制饮食：正确的事。</li><li>跟自己说，自己脚疼或者上班已经很辛苦了，所以应该休息一下：多半是不诚实却轻松的事。</li></ol><p><strong>做正确的事或许当下感觉是更难的道路，但当你坚持不懈地这样去做，最终会成为你实现目标的最有效途径。</strong></p><h3 id="隐含事实"><a href="#隐含事实" class="headerlink" title="隐含事实"></a>隐含事实</h3><p>你实际上必须知道自己想要实现什么目标——目标是什么，为了实现这个目标，哪些行动才是正确的。<strong>只有当你知道自己最终的目标是什么，才能判断一项行动是会让你更远离目标，还是更接近目标。</strong></p><h3 id="你要设想出清晰的未来"><a href="#你要设想出清晰的未来" class="headerlink" title="你要设想出清晰的未来"></a>你要设想出清晰的未来</h3><p>你下一次在阻力最小的道路和正确的道路之间犹豫不决时，应该停下来，问一下自己在10分钟后、 10小时后和10天后会有什么感觉。</p><p>为什么要设想10分钟后、 10小时后和10天后的感觉呢？</p><p>因为<strong>这能帮助你意识到阻力最小的道路带来的愉悦感&#x2F;舒适感与长期后果相比，有多么短暂。</strong></p><p>10分钟后，你可能会感觉良好，或许开始有一点羞愧。 </p><p>10小时后，你大多会感觉羞愧和后悔。</p><p>10天后，你大概会意识到自己的决策或行动对实现长期目标产生的不良后果，满腔懊悔。你一无所获，有时候还会倒退。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/choose-harder-right-instead-of-easier-wrong-small.jpg" alt="Choose the harder right instead of the easier wrong"></p><p>正如Thomas S. Monson所说，“<strong>愿我们都能选择困难而正确的道路，而非容易却错误的道路。（May we ever choose the harder right instead of the easier wrong.）</strong>”</p><blockquote><p><em><strong>托马斯·孟荪</strong>（英语：</em><em>Thomas Spencer Monson**，1927年8月21日－2018年1月2日），美国宗教界人物，为<a href="https://zh.wikipedia.org/wiki/%E8%80%B6%E7%A8%A3%E5%9F%BA%E7%9D%A3%E5%90%8E%E6%9C%9F%E5%9C%A3%E5%BE%92%E6%95%99%E4%BC%9A">耶稣基督后期圣徒教会</a>第16任总会会长。作为教会总会会长，孟荪被耶稣基督后期圣徒教会教友看作<a href="https://zh.wikipedia.org/wiki/%E7%A5%9E">神</a>在世上的先知、先见和启示者。</em></p></blockquote><p><hr><p><p>以上，就是第四章《反向思考思维模型》的后两个思维模型，全书未完待续。</p><p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10分钟学点《思维模型》10：学会反向思考</title>
    <link href="/2021/09/08/10-minutes-learning-mental-model-read-notes-10/"/>
    <url>/2021/09/08/10-minutes-learning-mental-model-read-notes-10/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文将开始介绍 <strong>第四章 《反向思考思维模型 》</strong> 的三个思维模型，有时候我们努力接近目标，未必会实现最佳的效果，实际上，我们会发现，<strong>更应该远离负面的门槛／里程碑，而不是朝着正面的门槛／里程碑迈进，这可能才是更简单的做法 。</strong></p><h2 id="思维模型19：避免直接目标"><a href="#思维模型19：避免直接目标" class="headerlink" title="思维模型19：避免直接目标"></a>思维模型19：避免直接目标</h2><p><strong>用于清晰了解怎样实现整体目标。</strong> </p><p>这个思维模型强调的是，<strong>要实现想要的结果，我们不是直接朝着目标前进，而是努力避免负面因素。</strong></p><p>就像孙子兵法中所说：“先为之不可胜，以待敌之可胜”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E9%80%86%E5%90%91%E6%80%9D%E8%80%83.png" alt="逆向思考"></p><p>查理•芒格把这种逆向思维方式运用到生活之中，鼓励<strong>年轻人不要一味专注怎样取得成功，而是思考一下有什么会妨碍我们取得成功</strong>。</p><p>芒格提出一个问题：“你想要成功需要避免什么？”然后给出了一个可能的回答：懒散和不可靠。</p><p>换句话说，如果你努力避免懒散和不可靠，就能够取得成功 。</p><blockquote><p>个人认为，现今社会存在了太多成功学的声音，仔细想一下，<strong>成功有天时地利人和，很多时候是无法复制的</strong>，相比来说，<strong>“失败学”可能更值得我们学习</strong>。</p></blockquote><h3 id="两个步骤"><a href="#两个步骤" class="headerlink" title="两个步骤"></a>两个步骤</h3><p>要使用反向目标或逆向目标，最简单的方法是采取两个步骤。 </p><ol><li><p>界定失败或不幸福的原因。</p></li><li><p>极力避免这些东西。</p></li></ol><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>目标：“你想要改善一天的生活质量吗？ ”</p><p>Q：我们可以反过来思考，<strong>有什么会让一天过得不好</strong>？</p><p>A：可能有四项因素：睡得不好、交通堵塞、饮食不良、狗很烦人。</p><p>Q：你怎样才能解决这些导致不快乐的因素呢？</p><p>A：买一张新床或养成新的睡前习惯。设法让通勤变得更加愉快或尽量减少通勤时间，或改变工作时间，完全避免通勤。事先打包好午餐或者学会更健康的煮食。给狗买更多咀嚼玩具，请人遛狗，或者给它找个伴。</p><h2 id="思维模型20：避免专家思维模式"><a href="#思维模型20：避免专家思维模式" class="headerlink" title="思维模型20：避免专家思维模式"></a>思维模型20：避免专家思维模式</h2><p><strong>策略性地既看到整个森林（全局），又看清树木（局部）。</strong> </p><h3 id="专家陷阱"><a href="#专家陷阱" class="headerlink" title="专家陷阱"></a>专家陷阱</h3><p>通常我们总说，要避免“<strong>只见树木，不见森林</strong>”，意思是当你专注于细微之处(树木)，往往就不再关注或留意全局(森林)。</p><blockquote><p>比如，你过于沉迷打游戏(树木)，因为上分未遂和女朋友吵架，却忘了你打游戏的初衷是与爱人共度时光、增进感情(森林)。</p></blockquote><p>反之亦然。你也可能“<strong>只见森林，不见树木</strong>”，只专注全局，而忽略了细微之处。</p><p>当我们对某个领域具有专业知识，往往就会陷入这个陷阱。这就是所谓的“<strong>专家陷阱</strong>”。</p><p>如果你是专业音乐家，看到一首乐曲，你未必会关心每个音符的位置、符号系统或出错的升号或降号。你会想到整体旋律、方向、感觉、乐句划分、力度变化及作曲——思考“森林”是一种专家思维。</p><h3 id="“戈多夫斯基的失误”-Goldovsky-error"><a href="#“戈多夫斯基的失误”-Goldovsky-error" class="headerlink" title="“戈多夫斯基的失误”(Goldovsky error)"></a>“戈多夫斯基的失误”(Goldovsky error)</h3><p>钢琴教师保利斯·戈多夫斯基(Boris Goldovsky)发现，约翰内斯·勃拉姆斯(Johannes Brahms)一份广为流传的琴谱有打印错误。</p><p>更准确地说，这个错误不是他自己发现的，而是他一个刚入门的学生发现的，学生按照错误的打印音符弹奏，弹了一次又一次，由于琴音不协调而大惑不解。</p><p>戈多夫斯基纳闷，为什么从作曲家到出版商、钢琴师和其他音乐人，都没有人发现这个失误呢？居然之前完全没有人留意到，这似乎是不可思议的。</p><p>他最终进行了研究，结果发现，<strong>技巧纯熟的音乐人即使知道琴谱有误，也总是忽视这个失误，因为他们会假设在这个位置理应有哪个音符，这个音符理应在整个琴谱中处于什么位置。</strong></p><p><strong>你积累的专业知识越多，就越难以觉察出这些细小的失误。只有对某个领域缺乏经验的人，才容易发现这种细小的失误。</strong></p><p>专家会一扫而过，对基本要素做出假设，因为他们对自己擅长的领域已经驾轻就熟，不会逐字逐句地检查拼写。</p><h2 id="思维模型21：避免非天才区"><a href="#思维模型21：避免非天才区" class="headerlink" title="思维模型21：避免非天才区"></a>思维模型21：避免非天才区</h2><p><strong>用于决定你必须把资源和时间集中投入哪个领域。</strong> </p><p>典型的思维模型是停留在你的天才区。因此，这个反向思考的思维模型是避免天才区以外的东西。 </p><p><strong>精通多个领域固然是一件好事，但我们是人，必须了解自己的弱项</strong> 。</p><p><strong>认识到这些弱项</strong>，是你成长的一部分。<strong>这并不意味着承认自己失败，只是做这一件事是会失败的。</strong></p><p>不要离开自己的天才区，做注定会失败的事。不要自欺欺人地非要展示自己的弱项，而是要扬长避短。 </p><p><strong>留在自己的天才区，取得稳定可靠的成功。</strong> 找出自己的战略优势，并发挥到极致。</p><p><hr><p>以上，就是今天介绍的三个思维模型，全书未完待续。<p>最后，封面图片的答案想到是什么了么？ 😛</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/parking-car-quiz.jpg" alt="停车车位号"></p><p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10分钟学点《思维模型》9：激发创意 &amp; 第一性原理</title>
    <link href="/2021/09/01/10-minutes-learning-mental-model-read-notes-9/"/>
    <url>/2021/09/01/10-minutes-learning-mental-model-read-notes-9/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文继续介绍<strong>第三章《如何找到解决方案的思维模型》</strong>的最后两个思维模型，“以SCAMPER法激发创意”与“回归第一性原理”。</p><p>这两个思维模型都可帮助我们<strong>跳出原有限制，打开思路，从而找到新的解决方案</strong>。</p><h2 id="思维模型17：以“奔驰法SCAMPER-”激发创意"><a href="#思维模型17：以“奔驰法SCAMPER-”激发创意" class="headerlink" title="思维模型17：以“奔驰法SCAMPER ”激发创意"></a>思维模型17：以“奔驰法SCAMPER ”激发创意</h2><p><strong>有条理而又富有创意地以随机组合法解决问题。</strong></p><p>“奔驰法<strong>SCAMPER</strong>”常用于<strong>头脑风暴</strong>会议中激发创意，“SCAMPER”其实是7个单词缩写组成短语。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/SCAMPER.jpg" alt="SCAMPER"></p><h3 id="S（substituted）——替代"><a href="#S（substituted）——替代" class="headerlink" title="S（substituted）——替代"></a>S（substituted）——替代</h3><p>这种方法是指<strong>取代产品、流程或服务的若干部分，以解决问题。</strong></p><ol><li><p>首先，<strong>要考虑情况或问题有多个元素</strong>——多种材料、流程中有多个步骤、流程可能进行的不同时间或地点、产品或服务面向的多个市场，等等。</p></li><li><p>然后，<strong>考虑每一个元素可能被取代</strong>。</p></li></ol><p>举个例子，我们可能会提出下面几个问题：</p><ul><li><p>“可否在不牺牲产品质量的前提下，改用更具有成本效益的材料取代目前使用的材料？”</p></li><li><p>“流程的哪个环节可以改用更简单的选项？”</p></li><li><p>“我们还可以在哪些地方提供服务？”</p></li></ul><h3 id="C（combined）——结合"><a href="#C（combined）——结合" class="headerlink" title="C（combined）——结合"></a>C（combined）——结合</h3><p>这种方法建议你<strong>考虑能否结合两种产品、构想或程序的步骤，得出单一的产出或流程，予以改进</strong>。 </p><p>举个例子，结合勺子和叉子，就创造出了叉勺，这种餐具采取节省成本和方便的设计，目前在方便面杯面中常有提供。 </p><h3 id="A（adapt）——调整"><a href="#A（adapt）——调整" class="headerlink" title="A（adapt）——调整"></a>A（adapt）——调整</h3><p>这种方法旨<strong>在进行调整，以作改良，通过改进通常的做事方式来解决问题，调整幅度大小不一</strong>。</p><p>例如，</p><ul><li><p>“我们怎样才能调整现有流程，节省更多时间？”</p></li><li><p>“我们怎样才能改进现有产品，增加销量？”</p></li><li><p>“我们怎样才能调整现有流程，改善成本效率？”</p></li></ul><h3 id="M（minimize-x2F-magnify）——缩小／扩大"><a href="#M（minimize-x2F-magnify）——缩小／扩大" class="headerlink" title="M（minimize&#x2F;magnify）——缩小／扩大"></a>M（minimize&#x2F;magnify）——缩小／扩大</h3><p>这种方法<strong>涉及扩大或缩小一个元素，以触发新构想和解决方案</strong>。</p><ul><li><p>“扩大”关系到增加某物，例如<strong>夸大某个问题，更强调某个构想，让产品变得更大或更坚固，或者更频繁地进行某个流程。</strong></p></li><li><p>“缩小”关系到减少某物，例如<strong>淡化某个问题，不再强调某个构想，缩小产品的尺寸，或者降低进行某个流程的频率。</strong></p></li></ul><p>例如，</p><ul><li><p>“扩大”方法</p><ul><li><p>“你怎样才能夸大这个问题或小题大做？”</p></li><li><p>“如果你强调这一功能，结果会是怎样的？”“更频繁地进行这个流程会产生影响吗？”</p></li></ul></li><li><p>“缩小”方法</p><ul><li><p>“若是淡化这个功能，会让结果发生什么变化？”</p></li><li><p>“我们怎样才能压缩这个产品？”</p></li><li><p>“若是减少采取这个步骤的频率，能否提高效率？”</p></li></ul></li></ul><h3 id="P（Put-to-other-uses）——他用"><a href="#P（Put-to-other-uses）——他用" class="headerlink" title="P（Put to other uses）——他用"></a>P（Put to other uses）——他用</h3><p>这种方法旨在<strong>设法改变现有产品或流程的用途</strong>。</p><p>例如，</p><ul><li><p>“这种产品还有哪些用途？”</p></li><li><p>“公司的其他部门可以使用这种材料吗？”</p></li><li><p>“我们可以为废弃物找到用途吗？”</p></li></ul><h3 id="E（eliminate）——去除"><a href="#E（eliminate）——去除" class="headerlink" title="E（eliminate）——去除"></a>E（eliminate）——去除</h3><p>这种方法是指<strong>找出项目或流程的不必要元素，除去这些元素，从而得出更好的结果</strong>。</p><p>例如，</p><ul><li><p>“我们怎样才能在不影响结果的前提下，除去某个步骤？”</p></li><li><p>“我们怎样才能把投入的资源减半，又能够开展同样的活动？”</p></li><li><p>“如果我们除去这部分，会发生什么事？”</p></li></ul><h3 id="R（reverse）——重排"><a href="#R（reverse）——重排" class="headerlink" title="R（reverse）——重排"></a>R（reverse）——重排</h3><p>这种方法是指<strong>调换流程步骤的顺序</strong>，以找到解决方案，扩大创新潜力。</p><p>这种思路也称为“<strong>重排</strong>”，鼓励我们<strong>对调元素的位置或者考虑颠倒流程</strong>，以便对情况提出新的想法。 </p><p>例如，</p><ul><li><p>“颠倒流程会怎样改变结果？”</p></li><li><p>“如果我们颠倒程序，会发生什么事？”</p></li><li><p>“我们可以对调两个步骤吗？”</p></li></ul><p>“奔驰法”鼓励你遵循“<strong>随机组合</strong>”原则，“随机组合”是指要提出新的解决方案，你应该愿意组合不同的构想、物件或元素——无论这些构想、物件或元素看起来是多么不同、不相关或看似不合逻辑。</p><h2 id="思维模型18：回归第一性原理"><a href="#思维模型18：回归第一性原理" class="headerlink" title="思维模型18：回归第一性原理"></a>思维模型18：回归第一性原理</h2><p><strong>破除成见，找到解决方案。</strong> </p><p>我们许多思考和分析都是站在别人的成就、发现和假设的基础上的。 但是 <strong>“第一性原理”强调质疑，消灭跟随的趋势，破除层层假设，回归事物的本质。</strong></p><p><strong>第一性原理（First principle thinking）</strong> 指的是，<strong>回归事物最基本的条件，将其拆分成各要素进行解构分析，从而找到实现目标最优路径的方法。</strong></p><p>该原理源于古希腊哲学家亚里士多德提出的一个哲学观点：“<strong>每个系统中存在一个最基本的命题，它不能被违背或删除。</strong>”</p><p>也就是说，一个系统或者一个事物除去最基本的那个原理&#x2F;元素不可以违反，其他的都可以去除，都可以推翻。</p><h3 id="马斯克的例子"><a href="#马斯克的例子" class="headerlink" title="马斯克的例子"></a>马斯克的例子</h3><p>埃隆·马斯克（Elon Musk）最信奉的便是“第一性原理”，他曾问了一个问题：<strong>我们怎样才能确定自己不是根据有瑕疵或不完整的信息来解决问题呢？</strong></p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/first-principle.png" alt="第一性原理"></p><p>马斯克想要成立一家私人宇航公司SpaceX，但很快遇到了所有其他私人宇航公司均以失败告终的理由：火箭价格高昂。 </p><p>但他对火箭价格的估计是基于一项假设：他必须从其他公司购买火箭。他运用第一性原理思维，分析以任何方式上外太空的真正成本。他很快发现，火箭价格是虚高的。 </p><p>于是，马斯克决定不去投入6500万美元购买一枚制成的火箭，而是内包这个流程，购买原材料，自己制造火箭。短短几年内， SpaceX就大大削减了发射火箭的成本——有报告称，减到了他早前估计的10%。 </p><h3 id="找到“第一性原理”的三个步骤"><a href="#找到“第一性原理”的三个步骤" class="headerlink" title="找到“第一性原理”的三个步骤"></a>找到“第一性原理”的三个步骤</h3><h4 id="1-以最本质最基础的无法改变的条件作为出发点。"><a href="#1-以最本质最基础的无法改变的条件作为出发点。" class="headerlink" title="1. 以最本质最基础的无法改变的条件作为出发点。"></a>1. 以最本质最基础的无法改变的条件作为出发点。</h4><p>如果不是从事物最基本的条件出发，那么拆分出的要素很可能发挥不了作用。</p><p>同样是为了解决电动车锂电池组成本过高的问题，如果马斯克把作为出发点的基础条件放在供应商身上，试图说服供应商降价，不仅可能吃闭门羹，甚至可能让双方的关系紧张。</p><p>更可行的思路是解决电池的原料问题，因为电池的原材料是相对固定的，这才是最基础的出发点。</p><h4 id="2-推演过程需要有严密的逻辑关系，尽量少引入估计。"><a href="#2-推演过程需要有严密的逻辑关系，尽量少引入估计。" class="headerlink" title="2. 推演过程需要有严密的逻辑关系，尽量少引入估计。"></a>2. 推演过程需要有严密的逻辑关系，尽量少引入估计。</h4><p>整个推演分析的过程必须保证合理可靠，否则就可能失之毫厘，谬以千里。</p><p>整个过程就变成了做无用功。当然，这需要丰富的知识储备、生活经验和思维训练作为支撑。</p><h4 id="3-不可随意参照同类方案或现有经验，尊重客观推演结果。"><a href="#3-不可随意参照同类方案或现有经验，尊重客观推演结果。" class="headerlink" title="3. 不可随意参照同类方案或现有经验，尊重客观推演结果。"></a>3. 不可随意参照同类方案或现有经验，尊重客观推演结果。</h4><p>要做好“找准出发点”和“保证逻辑关系”这两点，最重要的就是学会保持“空杯心态”，在推演分析时屏蔽现有的、已知的各种因素的干扰。没有了参照，有时可能会产生看似天马行空的想法。</p><p>如果出发点和逻辑关系都没有问题，那么就应该尊重客观推演的结果，也许这就是一个蕴含着巨大价值的天才想法。</p><p><hr><p><p>以上，就是第三章的最后两个思维模型，主要用来创造性的找到问题解决方案。</p><p>全书未完待续。</p><p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【避坑指北】Python3相对路径导入方法</title>
    <link href="/2021/08/27/about-python3-relative-import-errors-i-met/"/>
    <url>/2021/08/27/about-python3-relative-import-errors-i-met/</url>
    
    <content type="html"><![CDATA[<h2 id="前情"><a href="#前情" class="headerlink" title="前情"></a>前情</h2><p>最近在优化原项目一部分Python代码，遇到了代码重复拷贝的问题，一个方法拷贝了n多份，这个“坏味道”当然忍不了，准备将方法写到utils.py里，由于Python3已经支持相对路径导入了，utils放到当前包的common目录，用到此方法的代码导入utils使用即可。so easy！</p><p>后来？后来我就掉进坑里。</p><p>我以为的相对路径导入并不是真实的相对路径导入。</p><h2 id="Python导入包或方法"><a href="#Python导入包或方法" class="headerlink" title="Python导入包或方法"></a>Python导入包或方法</h2><p>假设我们的工程项目是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── a<br>│   └── callee.py<br>├── b<br>│   └── caller.py<br>├── c<br>│   └── hello.py<br>└── main.py<br></code></pre></td></tr></table></figure><h3 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h3><p><code>hello.py</code>中实现了一个打印“say hi~”方法<code>hi()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># c/hello.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hi</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;say hi~&quot;</span>)<br></code></pre></td></tr></table></figure><p>现在想要在<code>main.py</code>中调用，那我们只需要加入一行<code>from c.hello import hi</code>，然后直接调用<code>hi()</code>即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">from</span> c.hello <span class="hljs-keyword">import</span> hi<br><br>hi()<br></code></pre></td></tr></table></figure><p>我们运行<code>python3 main.py</code>，正常输出“say hi~”。</p><p>python和Java一样都是用目录管理包的，运行时会从当前路径（<code>main.py</code>所在目录）开始查找匹配的包名对应的<code>c/hello.py</code>文件，然后找到其中名为<code>hi</code>的方法，并调用。</p><h3 id="import默认搜索顺序"><a href="#import默认搜索顺序" class="headerlink" title="import默认搜索顺序"></a>import默认搜索顺序</h3><p>默认情况下，python的<code>import</code>关键字会选择优先查找python的内建模块，若没找到，则会去<code>sys.path</code>保存的路径列表中寻找。</p><p><code>sys.path</code>保存的路径列表包括几个部分：</p><ol><li>当前脚本所在目录</li><li>环境变量<code>$PYTHONPATH</code>设置的目录</li><li>python标准库的目录</li><li>任何能够找到的.pth文件的内容</li><li>第三方扩展的site-package目录，也就是pip安装第三方包的路径</li></ol><h3 id="相对路径导入的那些坑"><a href="#相对路径导入的那些坑" class="headerlink" title="相对路径导入的那些坑"></a>相对路径导入的那些坑</h3><p>现在有一个需求就是<code>b</code>目录下的<code>caller.py</code>希望执行<code>a</code>目录<code>callee.py</code>中的方法<code>caller_test()</code>方法，这个方法可以对应出调用者的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># a/callee.py</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">caller_test</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;打印调用者信息&quot;&quot;&quot;</span><br>    back_frame = sys._getframe().f_back<br><br>    <span class="hljs-keyword">if</span> back_frame <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;back_frame is None, no py caller!&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        back_filename = os.path.basename(back_frame.f_code.co_filename)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;caller: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(back_filename.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]))<br></code></pre></td></tr></table></figure><p>python3已经可以支持相对路径导入包了，简单写一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># b/caller.py</span><br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> ..a <span class="hljs-keyword">import</span> callee<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------ caller.py ------&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(__name__))<br>callee.caller_test()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>call()<br></code></pre></td></tr></table></figure><p>这里可以看到<code>a</code>包名前额外多了两个点<code>..</code>，按照python手册中关于相对导入的介绍：两个点<code>..</code>表示从当前目录的父目录开始查找<code>a/callee.py</code>文件，一个点<code>.</code>表示当前目录，那么如果我想找父目录的父目录中的包呢？那就用三个点<code>...</code>，通常用到三个点的情况并不多。</p><p>看上去毫无问题，正常极了，一运行就傻眼了。</p><h4 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h4><p>执行<code>./b/caller.py</code>，提示错误：<code>ImportError: attempted relative import with no known parent package</code>。</p><p>尝试在import前一行加入打印<code>__name__</code>、<code>__package__</code>、<code>sys.path</code>，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">name: __main__<br>package: None<br>sys.path: [<span class="hljs-string">&#x27;/home/rfw/test/b&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python38.zip&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python3.8&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python3.8/lib-dynload&#x27;</span>, <span class="hljs-string">&#x27;/home/rfw/.local/lib/python3.8/site-packages&#x27;</span>, <span class="hljs-string">&#x27;/usr/local/lib/python3.8/dist-packages&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python3/dist-packages&#x27;</span>]<br></code></pre></td></tr></table></figure><p>很奇怪，看到<code>sys.path</code>中当前路径是b目录所在路径，按照相对导入的逻辑，<code>..a</code>就应该进入了<code>test/a</code>目录才对！</p><h4 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h4><p>StackOverflow上查了下，可以使用<code>python -m b.caller</code>以模块的方式运行，将包信息告诉python解释器。</p><p>尝试了下，这次错误提示变了，<code>ValueError: attempted relative import beyond top-level package</code>，提示是说相对导入找到的路径已经超过最顶级的了。</p><p>此时再次打印，错误日志如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">name: __main__<br>package: b<br>sys.path: [<span class="hljs-string">&#x27;/home/rfw/test&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python38.zip&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python3.8&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python3.8/lib-dynload&#x27;</span>, <span class="hljs-string">&#x27;/home/rfw/.local/lib/python3.8/site-packages&#x27;</span>, <span class="hljs-string">&#x27;/usr/local/lib/python3.8/dist-packages&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python3/dist-packages&#x27;</span>]<br></code></pre></td></tr></table></figure><p>这时，和上一次打印不一样的地方在与<code>__package__</code>的值为<code>b</code>，当前运行路径为<code>test</code>目录。</p><p>由于显示当前目录是<code>test</code>，因此，尝试把导入改成<code>from a.callee import caller_test</code>，运行正常！打印如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">name: __main__<br>package: b<br>sys.path: [<span class="hljs-string">&#x27;/home/rfw/test&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python38.zip&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python3.8&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python3.8/lib-dynload&#x27;</span>, <span class="hljs-string">&#x27;/home/rfw/.local/lib/python3.8/site-packages&#x27;</span>, <span class="hljs-string">&#x27;/usr/local/lib/python3.8/dist-packages&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/python3/dist-packages&#x27;</span>]<br><span class="hljs-built_in">caller</span>: <span class="hljs-built_in">caller</span><br></code></pre></td></tr></table></figure><p>但是这就不是相对导入了啊。百思不得其解。</p><h4 id="真相只有一个"><a href="#真相只有一个" class="headerlink" title="真相只有一个"></a>真相只有一个</h4><p>查了下python官方文档关于相对导入的说明（<a href="https://www.python.org/dev/peps/pep-0328/">https://www.python.org/dev/peps/pep-0328/</a> ），恍然大明白。</p><blockquote><p>Relative imports use a module’s <code>__name__</code> attribute to determine that module’s position in the package hierarchy. If the module’s name does not contain any package information (e.g. it is set to ‘<code>__main__</code>‘) then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p></blockquote><p>翻译过来就是：</p><blockquote><ol><li><p>相对导入依赖于一个模块的<code>__name__</code>属性，根据这个属性去决定该模块在整个包中的层级结构。</p></li><li><p>当一个模块的<code>__name__</code>属性不包含任何包信息时，如直接运行py脚本时，<code>__name__</code>会被设置成<code>__main__</code>，这时，不管这个文件位于包目录的哪个位置，相对导入机制会把当前脚本视为顶级模块。</p></li></ol></blockquote><p>这就意味着，<strong>只要是我从终端运行python脚本，都会遇到<code>__name__</code>为<code>__main__</code>的问题，当前被运行的python脚本永远无法使用相对导入</strong>。</p><p>现在在根目录下修改<code>main.py</code>，并在<code>b/b1</code>目录下创建<code>caller_proxy.py</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── a<br>│   └── callee.py<br>├── b<br>│   ├── b1<br>│   │   └── caller_proxy.py<br>│   └── caller.py<br>├── c<br>│   └── hello.py<br>└── main.py<br><br></code></pre></td></tr></table></figure><p><code>main.py</code>的内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> c.hello <span class="hljs-keyword">import</span> hi<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__name__: &#123;&#125;, __package__: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(__name__, __package__))<br><br><span class="hljs-keyword">from</span> b.b1 <span class="hljs-keyword">import</span> caller_proxy<br><br>caller_proxy.proxy()<br></code></pre></td></tr></table></figure><p><code>caller_proxy.py</code>的内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> .. <span class="hljs-keyword">import</span> caller <span class="hljs-comment"># 相对导入</span><br><br><span class="hljs-built_in">print</span>(__package__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proxy</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;------ caller_proxy.py ------&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(__name__))<br>caller.call()<br></code></pre></td></tr></table></figure><p>该文件使用了相对导入，现在运行<code>./main.py</code>，结果如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">__name__: __main__, __package__: <span class="hljs-literal">None</span><br>say hi~<br>------ caller_proxy.py ------<br>name: b.b1.caller_proxy<br>------ caller.py ------<br>name: b.caller<br>caller: caller<br></code></pre></td></tr></table></figure><p>这时，<code>caller_proxy.py</code>执行时的<code>__name__</code>值是正常的包名结构<code>b.b1.caller_proxy</code>，因此可以使用相对导入<code>..</code>找到<code>b.caller</code>。</p><p>而<code>caller.py</code>执行时的包名结构是<code>b.caller</code>，因此，相对导入只能找到<code>b</code>包下的文件，所以，只能使用<code>from a.callee import caller_test</code>。</p><h3 id="通常应该怎么做"><a href="#通常应该怎么做" class="headerlink" title="通常应该怎么做"></a>通常应该怎么做</h3><p>为了避免一些奇奇怪怪的问题，还是比较推荐在<code>sys.path</code>数组追加要导入包绝对路径的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> inspect<br>sys.path.append(os.path.realpath(os.path.join(os.path.dirname(inspect.getfile(inspect.currentframe())), <span class="hljs-string">&#x27;../common&#x27;</span>)))<br><br><span class="hljs-keyword">from</span> utils <span class="hljs-keyword">import</span> xxx_func<br></code></pre></td></tr></table></figure><p>以之前的<code>caller.py</code>为例，想要调用<code>a/callee.py</code>，可以写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> inspect<br>sys.path.append(os.path.realpath(os.path.join(os.path.dirname(inspect.getfile(inspect.currentframe())), <span class="hljs-string">&#x27;../a&#x27;</span>)))<br><br><span class="hljs-keyword">from</span> callee <span class="hljs-keyword">import</span> caller_test<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------ caller.py ------&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(__name__))<br><br>caller_test()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>call()<br></code></pre></td></tr></table></figure><p>这样就不用care是直接运行，还是用<code>-m</code>参数以模块去运行了，直接运行<code>./b/caller.py</code>，输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./b/caller.py<br>------ caller.py ------<br>name: __main__<br><span class="hljs-built_in">caller</span>: <span class="hljs-built_in">caller</span><br></code></pre></td></tr></table></figure><hr><p><p>以上，就是之前处理Python import导入包时遇到的坑，简单记录。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>避坑指北</category>
      
    </categories>
    
    
    <tags>
      
      <tag>避坑指北</tag>
      
      <tag>遇坑总结</tag>
      
      <tag>相对路径</tag>
      
      <tag>Python</tag>
      
      <tag>包导入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10分钟学点《思维模型》8：寻找根本原因（五问法&amp;鱼骨图）</title>
    <link href="/2021/08/24/10-minutes-learning-mental-model-read-notes-8/"/>
    <url>/2021/08/24/10-minutes-learning-mental-model-read-notes-8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文继续<strong>第三章《如何找到解决方案的思维模型》</strong>，介绍两个思维模型，“相关性不等于因果关系”与“从结果反推原因”。</p><p>这两个思维模型其实都是为了帮助我们分析问题，找到问题的根本原因，通常用于个人与团队的复盘中。</p><h2 id="思维模型15：相关性不等于因果关系"><a href="#思维模型15：相关性不等于因果关系" class="headerlink" title="思维模型15：相关性不等于因果关系"></a>思维模型15：相关性不等于因果关系</h2><p><strong>想解决一个问题，要了解真正需要处理的方面是什么。</strong></p><h3 id="相关性-vs-因果关系"><a href="#相关性-vs-因果关系" class="headerlink" title="相关性 vs 因果关系"></a>相关性 vs 因果关系</h3><p><strong>相关性</strong>是一个统计学术语，<strong>显示两个元素或变量之间有类似的特征或趋势</strong>，但相关性并不能描述出两样东西的关系为什么或者怎么会是这样的。<strong>只是说“这两样东西通常在同一时间做同一件事”。</strong></p><p>比如，“夏天的时候，冰淇淋和太阳镜的销量都增加了”，并不是说吃着冰激凌会让人更愿意去购买眼镜。</p><p><strong>因果关系</strong>描述的是事情发生的理由，说的是“这样东西改变了，也会<strong>导致</strong>那样东西改变”。</p><h3 id="直接原因-vs-根本原因"><a href="#直接原因-vs-根本原因" class="headerlink" title="直接原因 vs 根本原因"></a>直接原因 vs 根本原因</h3><p>我们之所以有时会把“相关性”等同于“因果关系”，通常是由于缺乏信息，或者更常见的是，我们并未花时间观察应该观察的所有信息。</p><p><strong>只要感觉到有压力给出明确的答案，我们就很容易妄下定论。</strong></p><p>但从另一个角度去考虑，事物的“因果关系”已经变得越来越复杂，我们<strong>很难找出单一的原因</strong>，因为很难说这究竟是单一原因起作用，还是多个原因综合作用的产物。</p><p><strong>直接原因之于根本原因，正如相关性之于因果关系。解决了前者(直接原因，相关性)，并不能让你摆脱麻烦。</strong></p><h3 id="“五问法”"><a href="#“五问法”" class="headerlink" title="“五问法”"></a>“五问法”</h3><p>我们需要不局限于直接原因，而是<strong>要了解为事件发生奠定基础的因素、思维、情绪规律或环境因素。</strong></p><p>“五问法”，就是对一个问题点连续以5个“为什么”来自问，以追究其更深层次的根本原因。</p><p>在这里，我们需要对抗的是人本性中的懒惰，很多时候人们一旦发现了直接原因，甚至是看到模糊的相关性之后，就可能不再提问了。</p><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>一个叫哈尔的人驾驶证被吊销了。哈尔多次超速驾驶，交通法庭向其发出传票，但他从未到庭应讯。法庭发出哈尔的拘捕令，警察到他家，破门而入，把他关进监狱，他在那里度过了一个漫长的周末。  </p><ul><li>为什么哈尔会坐牢？因为法庭发出了拘捕令（近因）。</li><li>为什么？因为他从未就多次超速驾驶到庭应讯。</li><li>为什么？因为他9次超速驾驶，被逮住了。</li><li>为什么？因为他有在高速公路上飙车的“需要”或冲动。</li><li>为什么？因为他从小就没学好规矩，以为可以为所欲为，不顾后果。</li></ul><h2 id="思维模型16：从结果反推原因"><a href="#思维模型16：从结果反推原因" class="headerlink" title="思维模型16：从结果反推原因"></a>思维模型16：从结果反推原因</h2><p> 用于更有效地确定因果关系。</p><h3 id="“鱼骨图”"><a href="#“鱼骨图”" class="headerlink" title="“鱼骨图”"></a>“鱼骨图”</h3><p>通常在复盘思维这种课程中，“五问法”和“鱼骨图”总是形影不离的。“鱼骨图”可以帮助我们根据观察到的结果推断原因，是演绎法不可或缺的一部分。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E9%B1%BC%E9%AA%A8%E5%9B%BE.png" alt="鱼骨图"></p><h3 id="如何制作“鱼骨图”"><a href="#如何制作“鱼骨图”" class="headerlink" title="如何制作“鱼骨图”"></a>如何制作“鱼骨图”</h3><h4 id="1-画出“鱼头”和“鱼脊”"><a href="#1-画出“鱼头”和“鱼脊”" class="headerlink" title="1. 画出“鱼头”和“鱼脊”"></a>1. 画出“鱼头”和“鱼脊”</h4><p>要在白板或你选择的其他书写面的中右方，写下一句问题陈述或结果，在这句话四周画一个方框或者三角形，这个方框&#x2F;三角形就是是鱼骨的“头”。</p><p>然后，再在页面上以问题方框为终点画一条横线，这是“鱼脊”。</p><h4 id="2-画出“大骨”"><a href="#2-画出“大骨”" class="headerlink" title="2. 画出“大骨”"></a>2. 画出“大骨”</h4><p>以横向的“鱼脊”为起点，在鱼脊的上方和下方画出往左上方和左下方倾斜的直线，作为“大骨”，每条大骨之间相隔一定距离。</p><p>“大骨”代表着你找出原因的不同类别。你要按照需要处理的问题，想出类别的名称。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E9%B1%BC%E9%AA%A8%E5%9B%BE-%E5%A4%A7%E9%AA%A8.png" alt="鱼骨图-大骨"></p><h4 id="3-写下潜在原因"><a href="#3-写下潜在原因" class="headerlink" title="3. 写下潜在原因"></a>3. 写下潜在原因</h4><p>每次想到问题的一个潜在原因，就写在分类“大骨”的旁边。</p><p>然后，对引起问题的每一个原因进一步细化，追问这可能是什么导致的，写在这个原因旁边——以此类推，直到你再也找不出更原始的原因为止。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%9B%B4%E7%BB%86%E8%87%B4%E7%9A%84%E9%B1%BC%E9%AA%A8%E5%9B%BE.png" alt="更细致的鱼骨图"></p><p>通过系统地从问题反推原因，你可以洞悉情况的具体方面，然后一一解决。<strong>鱼骨图这项工具可以帮助你有效地集中精力，解决根本问题——也就是鱼骨上的问题。</strong></p><p>这个方法可以很好地引导你的思维从结果反推原因，实质地追踪问题与具体的诱因有何关系。  </p><h4 id="4-反思问题"><a href="#4-反思问题" class="headerlink" title="4. 反思问题"></a>4. 反思问题</h4><p>画完鱼骨图之后，仔细研究你列出的原因，考虑相关证据。</p><p>养成思考这个问题的习惯：“<strong>这个原因怎么才算是手头问题的真正和重要因素？</strong>”</p><ul><li><p>你找出的原因真正在多大程度上导致了结果？</p></li><li><p>这个原因与问题的关系是正确的吗？是否应该认真看待？</p></li></ul><p><hr><p><p>以上，就是今天介绍的两个思维模型，主要用来找到问题的根本原因。</p><p>全书未完待续。</p><p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10分钟学点《思维模型》7：接受同行评议 &amp; 找出自我缺陷</title>
    <link href="/2021/08/18/10-minutes-learning-mental-model-read-notes-7/"/>
    <url>/2021/08/18/10-minutes-learning-mental-model-read-notes-7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文将开始<strong>第三章《如何找到解决方案的思维模型》</strong>，介绍两个思维模型——接受同行评议与找出自我缺陷。</p><h2 id="思维模型13：让你的观点接受同行评议"><a href="#思维模型13：让你的观点接受同行评议" class="headerlink" title="思维模型13：让你的观点接受同行评议"></a>思维模型13：让你的观点接受同行评议</h2><p><strong>了解共识观点和你的观点为何跟大家不一样。</strong></p><h3 id="同行评议"><a href="#同行评议" class="headerlink" title="同行评议"></a>同行评议</h3><p><strong>同行评议</strong>是指由你所在领域的其他人对你的作品进行评价。其他人往往会严厉批评你的研究成果，找出差错。就像郭德纲总在相声里调侃，“同行之间是赤裸裸的仇恨”。</p><p>但实际上，<strong>批评的越是严厉，对你就越有帮助。</strong> 评议结束以后，你会了解到自己的劣势、优势以及别人对你的作品一般感受。</p><p>同行评议的目标是防止最终作品出现不准确或遗漏之处，提出另外的观点，让结果变得更清晰、更相关、更确切。</p><h3 id="“三角验证法”"><a href="#“三角验证法”" class="headerlink" title="“三角验证法”"></a>“<strong>三角验证法</strong>”</h3><p>在军事领域有一个“<strong>三角验证法</strong>”，主要用于确认某个地点的位置：从三个起点开始划线，形成一个三角形区域，需要确认的点就在这个范围里。</p><p>如果收集到的数据点越多，可以画出的三角形就越多，交叉覆盖的面积就越小，最终，就能得出正确的范围。</p><p>同样，同行评议就好比获取到的新数据点，通过这些新数据点与旧数据结合，可以从不同而又新颖的角度看待问题。</p><p>有点让我想到中国的一句俗语：“他山之石，可以攻玉”，大概也有这层意思吧。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B13%EF%BC%9A%E8%AE%A9%E4%BD%A0%E7%9A%84%E8%A7%82%E7%82%B9%E6%8E%A5%E5%8F%97%E5%90%8C%E8%A1%8C%E8%AF%84%E8%AE%AE.png" alt="思维模型13：让你的观点接受同行评议"></p><h2 id="思维模型14：找出自己的缺陷"><a href="#思维模型14：找出自己的缺陷" class="headerlink" title="思维模型14：找出自己的缺陷"></a>思维模型14：找出自己的缺陷</h2><p><strong>在其他人审视你之前仔细审视自己。</strong></p><h3 id="想象最坏情况"><a href="#想象最坏情况" class="headerlink" title="想象最坏情况"></a>想象最坏情况</h3><p>对待一个观点或意见，我们<strong>不要力求证实它是正确的，而是要反过来，力求证明它是错误的。</strong></p><p><strong>不要把假定的好处往大处想，而是要把好处尽量往小处想，把坏处尽量往大处想。</strong></p><p><strong>不要想象一帆风顺的最佳情境，而是要想象灾难性的最坏情境。</strong></p><p>个人认为，<strong>在面对问题时，做好最坏的打算，但是也需要用最乐观的心态去解决它。</strong></p><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>突然有一天，你想养只宠物，养狗还是猫呢？你自己其实更倾向于养狗的，因为狗的互动性更高，雪橇犬英俊帅气，可以带出门遛弯。</p><p>这时候需要把坏处往大了想，狗比猫或许相对忠诚，可是难伺候，养狗费用很高，有时候狗还会做出暴力行为。万一你养了一条暴力的狗，训练不好，它把家里的东西都毁了怎么办。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E4%BD%A0%E4%BB%A5%E4%B8%BA%E7%9A%84%E5%93%88%E5%A3%AB%E5%A5%87.jpg" alt="你以为的哈士奇"></p><h3 id="“确认偏误”现象"><a href="#“确认偏误”现象" class="headerlink" title="“确认偏误”现象"></a>“确认偏误”现象</h3><p>我们在日常的生活中，总会陷入一种“确认偏误”，就是说，<strong>一个人只寻求和听取支持自己成见的信息或证据，如此一来，会导致我们忽视、合理化、否认或完全避开驳倒或质疑自己成见的证据。</strong></p><p>从心理学的角度出发，其实我们只是想要证明自己是正确的。归根结底，确认偏误是看到自己想看的，以此来证明自己的观点。</p><p>事实上，你心目中一开始就有一个结论，浑然不顾截然相反的证据，反过来让这个结论成为你的现实。</p><h3 id="承认自己1-的错误"><a href="#承认自己1-的错误" class="headerlink" title="承认自己1%的错误"></a>承认自己1%的错误</h3><p>这个思维模型适用的一个重要方面是人际关系，尤其当我们和他人产生冲突时，我们应该努力地寻找“第三者叙述”。很多时候，死命为自己辩护并不能解决现有的问题。</p><p>“第三者叙述”是指客观的旁观者会怎样描述这场冲突，这样的叙述无比客观、不带感情，你听了多半会不高兴，但你也绝对不是无可指责、毫无过错的。</p><p>从某种意义上来说，沟通中产生冲突时，<strong>我们应该认为自己的观点至少有一点差错——就从1%开始好了。</strong></p><p>如果我们充分承认这1%的失误&#x2F;瑕疵，那么就立即会打开视野，让我们发现可能错过的其他事情。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B14%EF%BC%9A%E6%89%BE%E5%87%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BC%BA%E9%99%B7.png" alt="思维模型14：找出自己的缺陷"></p><hr><p>以上，全书未完待续。<p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><hr><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】10分钟学点《思维模型》（六）</title>
    <link href="/2021/08/11/10-minutes-learning-mental-model-read-notes-6/"/>
    <url>/2021/08/11/10-minutes-learning-mental-model-read-notes-6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近两周工作有些忙，偷了点懒没有更新。😵</p><p>文接上回，本文将结束<strong>第二章</strong>《<strong>如何更清晰地看待问题</strong>》，介绍两个思维模型，并总结第二章要点。</p><h2 id="思维模型11：借鉴达尔文"><a href="#思维模型11：借鉴达尔文" class="headerlink" title="思维模型11：借鉴达尔文"></a>思维模型11：借鉴达尔文</h2><p><strong>寻求某个情况中真实、诚实的真相。</strong></p><p>提到达尔文，大多数人的第一印象应该就是“物种起源”、“适者生存”的理论。达尔文取得了举世瞩目的成就，但是，他的成功其实靠的是<strong>智商以外的才能</strong>。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E7%89%A9%E7%A7%8D%E8%B5%B7%E6%BA%90.jpeg" alt="物种起源"></p><h3 id="达尔文黄金法则"><a href="#达尔文黄金法则" class="headerlink" title="达尔文黄金法则"></a>达尔文黄金法则</h3><p>达尔文自己有一个黄金法则，他是这么说的：</p><blockquote><p>“多年来，我一直遵循着一条黄金法则，每当我看到已成的事实、新的观察结果或想法，如果跟我自己的一般结果相反，我绝对会立即在备忘录中记下来。经验告诉我，<strong>比起印证自己观点的事实和想法，我们更容易忘记与自己观点相悖的事实和想法。</strong>”</p></blockquote><p>说简单点，就是：“<strong>对待矛盾或相反的想法，不仅要持开放的态度而且要给予最充分的关注。</strong>”</p><p>这一法则有点类似学术上的“<strong>强观点，弱坚持</strong>”(strong opinions but held lightly)，不要死守任何立场或理论，<strong>只要跟着证据走</strong>。</p><p>这句话看似简单，其实做起来很难，首先要克服的就是“跟着证据走”引起的心理不适。</p><h3 id="质疑自己"><a href="#质疑自己" class="headerlink" title="质疑自己"></a>质疑自己</h3><p>达尔文迫使自己质疑自己的观点，而不是怀有戒心地一味反驳别人的观点。一般人只会质疑别人，而达尔文会<strong>不带感情地质疑自己</strong>。</p><p>他会问自己这样的问题：</p><ul><li><strong>你知道什么？</strong></li><li><strong>你确定吗？你为什么会确定？</strong></li><li><strong>要怎样证明？</strong></li><li><strong>你可能会犯什么错误？</strong></li><li><strong>这个矛盾的观点是哪里来的？为什么？</strong></li></ul><p>这一连串的问题会让我想到复盘找根因时的<strong>5WHY分析法</strong>，也就是对一个问题点连续以5个“为什么”来自问，以追究其根本原因。</p><p>正所谓“打破砂锅问（纹）到底”，不要忽视否定观点，跟着证据走，这就是我们需要从达尔文身上学到的。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B11%EF%BC%9A%E5%80%9F%E9%89%B4%E8%BE%BE%E5%B0%94%E6%96%87.png" alt="思维模型11：借鉴达尔文"></p><h2 id="思维模型12：调动系统2思维"><a href="#思维模型12：调动系统2思维" class="headerlink" title="思维模型12：调动系统2思维"></a>思维模型12：调动系统2思维</h2><p><strong>进行分析性思考，而不是情绪化思考。</strong></p><h3 id="大脑中的两种思维系统"><a href="#大脑中的两种思维系统" class="headerlink" title="大脑中的两种思维系统"></a>大脑中的两种思维系统</h3><p>人类的大脑是生物学的奇迹，但就像我们其他部位一样，它喜欢偷懒，在可能的情况下会选择阻力最小的道路，大脑会给某些进程降格，甚至索性跳过某些进程，以节省精力。</p><p>人类发展出两种生物思维系统：一种专注速度和节省精力，另一种专注准确和分析。</p><p>丹尼尔·卡尼曼(<em>Daniel Kahneman</em>)教授在《思考，快与慢》一书中，通过一系列的实验，提出了一个模型，解释了大脑用于吸收各种信息并做出反应的两个过程，富有想象力地命名为“<strong>系统1思维</strong>”和“<strong>系统2思维</strong>”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B.webp" alt="双系统思维模型"></p><h4 id="“快”思维"><a href="#“快”思维" class="headerlink" title="“快”思维"></a>“快”思维</h4><p>系统1思维是“快”思维，是自动自发、凭直觉的思维方式。由于是凭直觉的，系统1思维也与情绪化反应相关。</p><p>这种思维，可以<strong>帮助我们快速解读情况</strong>，不需要列出利弊清单就能做出决策，其<strong>目标是做得快，而不是做得对</strong>。</p><p>比如，我们遇到熟悉的情况，不需要怎么加工处理时，就会采用这种思维方式，例如认出朋友、骑自行车或者做一位数的数学运算。</p><h4 id="“慢”思维"><a href="#“慢”思维" class="headerlink" title="“慢”思维"></a>“慢”思维</h4><p>系统2思维是“慢”思维，更<strong>深思熟虑</strong>、分析性更强。这种思维，适用于<strong>为可能影响重大的事件做出决策</strong>，例如选择大学、买新车或者辞职。</p><p>系统2思维需要时间和劳力来处理新信息，因此，<strong>会耗费大脑更多精力</strong>，可能令人疲倦或筋疲力尽。</p><p>你在学习或看书时，可能感到心烦意乱、疲惫不堪，并不是由于你不理解或者感到无聊，而是其生理反应的必然性。</p><h3 id="思维系统的选择"><a href="#思维系统的选择" class="headerlink" title="思维系统的选择"></a>思维系统的选择</h3><p>由于“系统2思维”本身需要耗费大量精力，所以能量耗尽时，我们总是会回到系统1思维的默认模式。总体来说，我们会变得更原始、更笨。</p><p>对于你经常遇到或非常熟悉的事物，很好——系统1思维在此有用武之地。如果你具有丰富的经验，系统1思维可以帮助你做出良好的决策。</p><p>遇到危险或可怕的情况时，系统1思维显然也是有用的，能够促使你立即采取行动，而如果等到分析和认真考虑完毕，你早已小命不保。</p><p>我们不能时时刻刻都运用系统2思维，因为这是不切实际的，太耗费时间了。</p><p>但是，<strong>当你意识到自己应该不带偏见地清晰思考时，首先应该启动的系统2思维模式。</strong></p><h4 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h4><p>关于如何启动系统2思维模式，这里书上说的比较空泛，我个人觉得其实也很简单，<strong>刻意地去拉长你做决定的时间</strong>，在做出重要决定之前多问自己一个问题：</p><p><em>“我是在用情感、记忆和经验在做出判断么？”</em></p><p>如果答案为是，那么，仔细些，你正在用系统1思维。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B12%EF%BC%9A%E8%B0%83%E5%8A%A8%E7%B3%BB%E7%BB%9F2%E6%80%9D%E7%BB%B4.png" alt="思维模型12：调动系统2思维"></p><h2 id="第二章要点总结"><a href="#第二章要点总结" class="headerlink" title="第二章要点总结"></a>第二章要点总结</h2><p>第二章主要介绍了一系列帮助我们清晰地观察和思考的思维模型，人类的本能是生存、愉悦、避免痛苦、食物、性和睡觉，其余一切更高级的追求往往是次要的，因此，很多时候我们不能单凭直觉。</p><h3 id="忽略“黑天鹅”"><a href="#忽略“黑天鹅”" class="headerlink" title="忽略“黑天鹅”"></a>忽略“黑天鹅”</h3><p>这个思维模型警告我们<strong>避免根据有瑕疵、歪曲或不完整的信息而妄下定论的倾向。</strong></p><p>黑天鹅事件不应被当作新常态，这些只是异常值，应该置之不理。</p><h3 id="寻找均衡点"><a href="#寻找均衡点" class="headerlink" title="寻找均衡点"></a>寻找均衡点</h3><p>我们要留意发展中的趋势。<strong>从0到1、从1到2、从2到3，收益是递减的</strong>，在某个时候会到达均衡点。</p><h3 id="等待均值回归"><a href="#等待均值回归" class="headerlink" title="等待均值回归"></a>等待均值回归</h3><p>没有理由的变化不是真正的变化，只是偏差。</p><p><strong>均值回归是等事情尘埃落定，恢复原来的状态。</strong></p><h3 id="贝叶斯会怎样做？"><a href="#贝叶斯会怎样做？" class="headerlink" title="贝叶斯会怎样做？"></a>贝叶斯会怎样做？</h3><p>贝叶斯定理实际上让我们可以根据概率，把已经发生的事件纳入考虑，以此对未来得出结论。</p><p>你只需要三个元素的大致概率，填入贝叶斯公式，就可以得出比所谓专家更准确的结论，这是基本的<strong>概率思维</strong>方式。</p><h3 id="借鉴达尔文"><a href="#借鉴达尔文" class="headerlink" title="借鉴达尔文"></a><strong>借鉴达尔文</strong></h3><p><strong>对与自己相左的论点和意见给予相同的重视和关注。</strong></p><p>看到与自己相反的观点，达尔文不是怀有戒心，而是对自己的观点持批判性和怀疑的态度。这种彻底的开放心态可以撇开确认偏误和“自我”(ego)。</p><h3 id="调动系统2思维"><a href="#调动系统2思维" class="headerlink" title="调动系统2思维"></a>调动系统2思维</h3><p>系统1思维专注于思维的速度和效率，而系统2思维专注于思维的准确和深度。</p><p>系统1思维带来的坏处比好处更多，但不幸的是，这比较轻松，所以是我们默认的思维模式。</p><p>了解两者之间的差异，<strong>承认系统1思维的存在，然后努力跳到系统2思维。</strong></p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93.png" alt="第二章要点总结"></p><hr><p>以上，便是第二章的基本内容，全书未完待续。<p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><hr><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】10分钟学点《思维模型》（五）</title>
    <link href="/2021/07/29/10-minutes-learning-mental-model-read-notes-5/"/>
    <url>/2021/07/29/10-minutes-learning-mental-model-read-notes-5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>请坐，概率课马上开始。</p><p>文接上回，本文将继续<strong>第二章</strong>《<strong>如何更清晰地看待问题</strong>》，介绍两个思维模型，第一个思维模型和上一回的“黑天鹅”，有一定的联动关系。</p><p>总的来说，本文提到的两个模型都应用了“<strong>概率思维</strong>”，帮助我们<strong>更清晰的观察和思考问题</strong>。</p><h2 id="思维模型9：等待均值回归"><a href="#思维模型9：等待均值回归" class="headerlink" title="思维模型9：等待均值回归"></a>思维模型9：等待均值回归</h2><p><strong>用于在数据中找到真正的规律，避免受到误导。</strong></p><p>什么是均值？我个人的理解就是在较长的一段时间范围中，事物最通常或最常见的状态。</p><p><strong>均值回归</strong>最早由英国统计学家弗朗西斯·高尔顿爵士(SirFrancis Galton)提出的：<strong>在受不同状况或变量(例如环境、情绪和纯属运气)影响的一连串事件中，异常事件之后通常跟随着较为普通、典型的事件。</strong> 因此，反常、异常或非典型的事件发生后，多半不会有规律地再度发生，<strong>更有可能回归的模式是“常态”</strong>。</p><p>我们可以回想一下上一篇文章中提到的“黑天鹅事件”，就是均值回归中所说的异常事件，“黑天鹅事件”发生后，通常发生的就是回归常态。</p><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p><img src="/../../../../Downloads/%E5%AD%99%E9%A2%96%E8%8E%8E4%E6%AF%940%E6%88%98%E8%83%9C%E4%BC%8A%E8%97%A4%E7%BE%8E%E8%AF%9A.png" alt="孙颖莎4比0战胜伊藤美诚"></p><p>就拿奥运会乒乓球日本运动员伊藤美诚混双战胜中国队一样，只是一种非正常的事件发生，在绝对实力面前，之后更大概率的模式便是回归常态。即使再有裁判照顾，可以抱怨灯光，也并不会有多少作用，孙颖莎4-0的比分便是最好的说明。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E8%8E%8E%E6%B0%94%E8%97%A4%E8%97%A4.png" alt="莎气藤藤"></p><p>同样，均值回归这个思维模型经常被用在股票市场。</p><p>巴菲特的老师格雷厄姆的”<strong>烟蒂股投资理念</strong>“便是如此，<strong>在特定的市场环境下，经常会出现实际价值远高于市场现价的一些股票，买入这些“看似烟蒂”的股票，持有并等待价值回归后卖出。</strong></p><p>巴菲特遇到芒格后演化出的“<strong>价值投资思想</strong>”其实也是如此，“选择一个具有稳定增长的好企业，在其价格低于价值的时候买入并持有”。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E4%BB%B7%E5%80%BC%E6%8A%95%E8%B5%84.jpeg" alt="价值投资"></p><h3 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>让我们回到这个思维模型本身上来，其实“均值回归”是统计学上的概率分析，我们要学会<strong>观察整个周期的变化，评估在这期间遇到的所有信息。</strong>不要因为发生了异常的大事，就<strong>突然</strong>调整或改变计划。</p><p>保持耐心，等待事件回归正常状态，届时你才能更好地掌握发生了什么变化。从统计学上来说，多半不会发生多少改变。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B9%EF%BC%9A%E7%AD%89%E5%BE%85%E5%9D%87%E5%80%BC%E5%9B%9E%E5%BD%92.png" alt="思维模型9：等待均值回归"></p><h2 id="思维模型10：贝叶斯会怎样做"><a href="#思维模型10：贝叶斯会怎样做" class="headerlink" title="思维模型10：贝叶斯会怎样做"></a>思维模型10：贝叶斯会怎样做</h2><p><strong>根据实际事件计算概率，预测未来。</strong></p><h3 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h3><p>问题来了，贝叶斯是谁？</p><p>托马斯·贝叶斯是一名18世纪的英国数学家，在概率论领域闻名于世，主要贡献就是以他名字命名的“<strong>贝叶斯定理</strong>”。</p><p>个人理解，这个定理的伟大之处在于它<strong>在已知的一些条件下，对某事件发生的概率提出预测的方法</strong>，可以让我们不那么盲目的去看问题。</p><p>贝叶斯定理应用的范围非常广泛，搜索引擎、各大购物网站的推荐算法、疾病检测、不良种子筛查、企业资质评判、垃圾邮件过滤等等，相信这次疫情的大数据筛查也离不开贝叶斯定理的帮助。</p><p>这里有一个公式：</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86.jpeg" alt="贝叶斯定理公式"></p><p>其中：</p><ul><li>P(A&#x2F;B)是指在B发生的条件下， A发生的概率。</li><li>P(B&#x2F;A)是指在A发生的条件下， B发生的概率。</li><li>P(A)是指A发生的概率，不考虑任何B方面的因素。</li><li>P(B)是指B发生的概率，不考虑任何A方面的因素。</li></ul><h4 id="举个例子-1"><a href="#举个例子-1" class="headerlink" title="举个例子"></a>举个例子</h4><p>假设我们有一些数据显示，龙卷风是罕见的（概率为1%），但大风是相当常见的（10%）， 90%的龙卷风会导致大风。你想知道如果刮起了大风，发生龙卷风的概率。</p><p>带入上面的公式，得到如下概率：</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E9%BE%99%E5%8D%B7%E9%A3%8E%E4%B8%8E%E5%A4%A7%E9%A3%8E.jpeg" alt="龙卷风与大风"></p><h3 id="怎么做？-1"><a href="#怎么做？-1" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>可能很多人看完公式的第一个反应就是：迷茫。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E8%BF%B7%E8%8C%AB.jpeg" alt="迷茫"></p><p>先忘了这个公式吧，这个公式其实告诉我们，<strong>你只需要三个数字就能够得出某件事在未来发生的大致概率</strong>。</p><p>学会滤除假装有影响力的噪声，专注于真实而又重要的方面。</p><p>如果你要<strong>进一步想清楚一个问题的时候</strong>，就可以运用这个思维模型，<strong>问一下自己“贝叶斯会怎样做”。他会停止做出假设，专注现实生活中真正发生的事件，得出一个概率，借此进行评估，做出决策。</strong></p><p>这里，还有一个注意点，贝叶斯定理本身是依赖一些先决条件的概率，这个思维模型还要求我们<strong>必须根据新的信息，不断地更新概率，虽然一切都是不确定的，但比你想象的更加确定。</strong></p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B10%EF%BC%9A%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%9A%E6%80%8E%E6%A0%B7%E5%81%9A.png" alt="思维模型10：贝叶斯会怎样做"></p><hr><p>以上，未完待续。<p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><hr><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】10分钟学点《思维模型》（四）</title>
    <link href="/2021/07/27/10-minutes-learning-mental-model-read-notes-4/"/>
    <url>/2021/07/27/10-minutes-learning-mental-model-read-notes-4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p><p>这本书是年初时部门复盘培训活动的小组奖品，本以为是一本网文凑数的书，觉得可能2、3个小时也就翻完了，后来才发现这是本不错的书，放在床头每晚读两篇，是上半年读过二十多本书中的TOP3。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>文接上回，本文将开始<strong>第二章</strong>内容——《<strong>如何更清晰地看待问题</strong>》，介绍两个思维模型。</p><p>在我们的现实生活中，对待一个事物或者现象，想要既纵观全局，又要细致入微，是几乎不可能的。人类的精力是有限的，即使全神贯注，我们的所见所闻也未必全盘反映了真实发生的事件。更何况，人与生俱来的思考方式和观察方式并不客观，很可能带着偏见看待问题。</p><p>第二章的这几个模型可以帮助我们<strong>更清晰的观察和思考问题</strong>。</p><h2 id="思维模型7：忽略“黑天鹅”"><a href="#思维模型7：忽略“黑天鹅”" class="headerlink" title="思维模型7：忽略“黑天鹅”"></a>思维模型7：忽略“黑天鹅”</h2><p><strong>异常值不应该改变你的想法。</strong></p><p>说实话，这两年看到“黑天鹅”的字眼几乎都是在股市的新闻中，其实，“黑天鹅”只是作为隐喻，描述了<em>令人的认知、视角和理解发生巨大变化的不可预测的事件</em>。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E4%B8%AD%E5%9B%BD%E8%82%A1%E5%B8%82%E8%B7%B3%E6%B0%B4.jpeg" alt="中国股市跳水"></p><h3 id="黑天鹅三大特性"><a href="#黑天鹅三大特性" class="headerlink" title="黑天鹅三大特性"></a>黑天鹅三大特性</h3><ol><li>意外性：完全不可预测。</li><li>产生重大影响：一定会带来灾难性或巨大的后果。</li><li>人们在事后为它的发生编造理由。</li></ol><p>第三个特征就是人们遇到的麻烦所在。黑天鹅事件可能会产生全方位严重性的影响，迫使人们的信念或个人认知发生重大变化。</p><h3 id="赌徒谬误"><a href="#赌徒谬误" class="headerlink" title="赌徒谬误"></a>赌徒谬误</h3><p>赌徒扔骰子时，认定肯定最终会扔出7点的，因为有一阵子没扔出过了，或者是时候了，类似的情绪。</p><p>赌徒谬误代表了一种普遍的现象，称为“<strong>错觉联想</strong>”(apophenia)，是指<strong>人类倾向于从随机数据点中看到规律和关联，即使是太少的数据点。</strong></p><p>如果我们拉远对黑天鹅事件的镜头，就会意识到，我们其实是企图从随机序列中的事件中找到可预测的规律。</p><h3 id="应该怎么做？"><a href="#应该怎么做？" class="headerlink" title="应该怎么做？"></a>应该怎么做？</h3><ul><li>当你在商界或个人生活中遇到挫折，给自己一点空间，想一下这是否是黑天鹅事件。</li><li>让自己想一下最坏的情况，但还是要回到现实。这件事再次发生的可能性有多大？在多大程度上只是异常值？合理地说，我们有什么办法吗？如果这必然会不时发生，我们应该为此改变自己的做法吗？</li><li>你在做明智的规划时，应该了解风险因素，不应该活在对黑天鹅事件的恐惧之中，而是要花一点时间考虑这些事件可能会怎样发生，到时你需要怎样做。</li></ul><p><strong>黑天鹅事件是不应该改变认知或公认的知识的，因为这只是异常值而已</strong>，只是令人意识到可能性的存在，但大多数黑天鹅事件都不值得在日常生活中纳入考虑。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B7%EF%BC%9A%E5%BF%BD%E7%95%A5%E2%80%9C%E9%BB%91%E5%A4%A9%E9%B9%85%E2%80%9D.png" alt="思维模型7：忽略“黑天鹅”"></p><h2 id="思维模型8：寻找均衡点"><a href="#思维模型8：寻找均衡点" class="headerlink" title="思维模型8：寻找均衡点"></a>思维模型8：寻找均衡点</h2><p><strong>在数据中找到真正的规律，避免受到误导。</strong></p><h3 id="收益递减"><a href="#收益递减" class="headerlink" title="收益递减"></a>收益递减</h3><p><strong>收益递减规律</strong>是指其他投入固定不变时，连续地增加某一种投入，所新增的产出最终会减少的规律。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%94%B6%E7%9B%8A%E9%80%92%E5%87%8F.png" alt="收益递减"></p><p> 这表明，我们应该寻找均衡点（或者转折点），以此准确评估和了解信息，以决定我们为了实现某个结果，应该投入多少努力。</p><blockquote><p>比如，如果你学钢琴的强度太大，就会产生倦怠，感到厌烦。如果连续学习9小时，你多半没记住多少内容。</p></blockquote><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>这个思维模型有两方面的用途：</p><p>首先，<strong>更准确地分析关于其他人的信息</strong>。个人理解，对于一件事物可以先看一下他人投入产出的关系，避免自己因为投入太少而离开。</p><p>第二，<strong>了解你自己的均衡点在哪里</strong>，你何时应该反思一下，把自己投入的精力和取得的成果相比较。</p><p>在一定的<strong>满意区</strong>里，你的投入和努力与满意度或成果之比是可以接受的。</p><ul><li>如果耗费了太多资源和精力，你会离开满意区——成果太少。</li><li>如果投入太少，你也会离开满意区——成果太少。</li><li>如果对成果的期望过高或过低，那么你也会离开满意区。</li></ul><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B8%EF%BC%9A%E5%AF%BB%E6%89%BE%E5%9D%87%E8%A1%A1%E7%82%B9.png" alt="思维模型8：寻找均衡点"></p><hr><p>以上，未完待续。<p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><hr><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】10分钟学点《思维模型》（三）</title>
    <link href="/2021/07/21/10-minutes-learning-mental-model-read-notes-3/"/>
    <url>/2021/07/21/10-minutes-learning-mental-model-read-notes-3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p><p>这本书是年初时部门复盘培训活动的小组奖品，本以为是一本网文凑数的书，觉得可能2、3个小时也就翻完了，后来才发现这是本不错的书，放在床头每晚读两篇，是上半年读过二十多本书中的TOP3。</p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>文接上回，本文将结束<strong>第一章《<em>如何快速而全面地做出决策</em>》</strong>内容，并做<strong>简要总结</strong>，这几个模型可以帮助我们更快速地处理信息，实现你更有可能感到满意的结果。</p><h3 id="思维模型5：停留在40-70-的区间"><a href="#思维模型5：停留在40-70-的区间" class="headerlink" title="思维模型5：停留在40%~70%的区间"></a>思维模型5：停留在40%~70%的区间</h3><p><strong>用于平衡信息和行动。限制信息流，以帮助你更快采取行动。</strong></p><p>这是美国前国务卿科林·鲍威尔(Colin Powell)提出的一个思维模型：</p><p><strong>每当面临艰难抉择，你在掌握不少于所需信息的40%也不多于所需信息的70%时，就应该做出决策。</strong></p><p>在这个区间内，你拥有足够的信息可以做出明智的选择，但也不至于面对海量信息只是一味观望，而无法下定决心。</p><p>如果信息量少于40%，你只是猜测；如果等到信息量多于70%后再做出决策，你只是在浪费时间。</p><p>关于<strong>克服犹豫不决</strong>的问题，一位著名的喜剧演员曾经说过这样一句睿智的话：“我遵循的规则是，如果某个人或某件事获得了70%的认可，就可以付诸行动了，因为<strong>只要其他选项立即消失，决策的痛苦随之结束，你的选择就会变成80分。</strong>”</p><p>记住，在你所做决策发挥作用的过程中，你还会获取更多信息、增强信心、增加知识，从而更加明确地做出决策。</p><p>针对这些并非不可逆的决策，更快速地采取行动往往没有什么弊端。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B5%EF%BC%9A%E5%81%9C%E7%95%99%E5%9C%A840%25_70%25%E7%9A%84%E5%8C%BA%E9%97%B4.png" alt="思维模型5：停留在40%_70%的区间"></p><h3 id="思维模型6：遗憾最小化框架"><a href="#思维模型6：遗憾最小化框架" class="headerlink" title="思维模型6：遗憾最小化框架"></a>思维模型6：遗憾最小化框架</h3><p><strong>就决策问题征询未来的你。简化决策，集中考虑一个指标：遗憾。</strong></p><p>这个思维模型是<strong>把遗憾放在决策推演的核心</strong>。由亚马逊公司创立者杰夫·贝索斯提出，贝索斯给了自己三个非常简单的思维指令：</p><ol><li><p>想象你自己已经80岁了。</p></li><li><p>在这个年纪回首今生，你想要尽量减少人生中留下的遗憾。</p></li><li><p>扪心自问:“×年后，我会为采取(或不采取)这一行动感到遗憾吗?”</p></li></ol><p>这个思维模型也会<strong>迫使你去思考你实际上想要怎样的未来，而不是你目前前进的方向通往的未来</strong>。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B6%EF%BC%9A%E9%81%97%E6%86%BE%E6%9C%80%E5%B0%8F%E5%8C%96%E6%A1%86%E6%9E%B6.png" alt="思维模型6：遗憾最小化框架"></p><h3 id="第一章-要点总结"><a href="#第一章-要点总结" class="headerlink" title="第一章 要点总结"></a>第一章 要点总结</h3><p>思维模型是蓝图，我们可以在不同背景下加以运用，以便理解这个世界，正确诠释信息，了解事情发生的背景。</p><p>第一章介绍了六个可以帮助我们更快做出更明智决策的思维模型。</p><h4 id="1-关注“重要”任务，忽略“紧急”任务。"><a href="#1-关注“重要”任务，忽略“紧急”任务。" class="headerlink" title="1. 关注“重要”任务，忽略“紧急”任务。"></a>1. 关注“重要”任务，忽略“紧急”任务。</h4><ul><li><p><strong>重要任务是即使不会马上取得成果或者期限没有那么紧迫，但真正至关重要的事情。</strong> 紧急任务只是需要较快回应、解决的事情。</p></li><li><p>运用艾森豪威尔矩阵，就可以轻松分清事情的轻重缓急，忽略紧急任务(除非正好也是重要任务)。</p></li></ul><h4 id="2-设想出所有多米诺骨牌。"><a href="#2-设想出所有多米诺骨牌。" class="headerlink" title="2. 设想出所有多米诺骨牌。"></a>2. 设想出所有多米诺骨牌。</h4><ul><li>学会调动<strong>二阶思维</strong>（甚至多阶），设想出所有可能倒下的多米诺骨牌。</li></ul><h4 id="3-做出可逆的决策。"><a href="#3-做出可逆的决策。" class="headerlink" title="3. 做出可逆的决策。"></a>3. 做出可逆的决策。</h4><ul><li>我们若是假设所有决策都是不可逆的，就会犹豫不决，这对我们是没有任何好处的。</li><li><strong>为可逆决策形成行动偏向</strong>，因为你也不会有什么损失，只会获取更多信息，加快速度。</li></ul><h4 id="4-寻求“满意度”-Satisfiction-。"><a href="#4-寻求“满意度”-Satisfiction-。" class="headerlink" title="4. 寻求“满意度”(Satisfiction)。"></a>4. 寻求“满意度”(Satisfiction)。</h4><ul><li>“满意度”是满意(satisfy)和足够(suffice)两个词的合成，旨在做出<strong>足够好、充分、能实现目的</strong>的决策。</li><li>与之形成鲜明对比的是为了“以防万一”或“那就太好了”下额外的工夫，把决策最大化。</li><li>完美的选择是不存在的。</li></ul><h4 id="5-停留在40-70-的区间"><a href="#5-停留在40-70-的区间" class="headerlink" title="5. 停留在40%~70%的区间"></a>5. 停留在40%~70%的区间</h4><ul><li>你在掌握不少于所需信息的40%也不多于所需信息的70%时，就应该做出决策。</li><li>如果信息量少于40%，你只是猜测；如果等到信息量多于70%后再做出决策，你只是在浪费时间。</li></ul><h4 id="6-遗憾最小化框架。"><a href="#6-遗憾最小化框架。" class="headerlink" title="6. 遗憾最小化框架。"></a>6. 遗憾最小化框架。</h4><ul><li>简化决策，<strong>集中考虑一个指标：遗憾</strong>。</li><li>决策者要想象自己80岁了，问自己×年后，我会为采取(或不采取)这一行动感到遗憾。</li></ul><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B_%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93.png" alt="思维模型_第一章_要点总结"></p><p>以上，未完待续。<p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><hr><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】10分钟学点《思维模型》（二）</title>
    <link href="/2021/07/15/10-minutes-learning-mental-model-read-notes-2/"/>
    <url>/2021/07/15/10-minutes-learning-mental-model-read-notes-2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p><p>这本书是年初时部门复盘培训活动的小组奖品，本以为是一本网文凑数的书，觉得可能2、3个小时也就翻完了，后来才发现这是本不错的书，放在床头每晚读两篇，是上半年读过二十多本书中的TOP3。</p></blockquote><p>文接上回，继续<strong>第一章《<em>如何快速而全面地做出决策</em>》</strong>内容，这是一系列<strong>决策思维模型</strong>，这几个模型可以帮助我们更快速地处理信息，实现你更有可能感到满意的结果。</p><h3 id="思维模型3：做出可逆的决策"><a href="#思维模型3：做出可逆的决策" class="headerlink" title="思维模型3：做出可逆的决策"></a>思维模型3：做出可逆的决策</h3><p><strong>用于尽可能战略性地消除犹豫不决，形成行动偏向。</strong></p><p>我们要理解这个模型，很多时候，决策并非我们的目标——<strong>快速做出最佳决策</strong>才是我们的目标。</p><p>能够分辨可逆&#x2F;不可逆决策之间的差异，是加快决策速度的关键之一。</p><p>在进行决策分析时，你可以加入这样一个问题：“<strong>我怎样才能让这个决策成为可逆的，需要怎样去做？我能做到吗？</strong>”然后再去做。</p><p>在绝大多数情况下，逆转决策并非出尔反尔，只是因应新的信息来调整你的立场。</p><p>对待可逆决策，应该<strong>形成行动偏向</strong>。</p><p>火箭设计师沃纳·冯·布劳恩(<em>Wernher Von Braun</em>)是这样看待这个问题的：“一次良好的试验胜过一千个专家的意见。”</p><p>做出可逆决策有一个<strong>重要前提</strong>：或许这些决策会让你看到更多可能性，更加灵活，但还是应该<strong>基于事实</strong>——而不是毫无依据的预估、一厢情愿或感情用事。</p><p><strong>只有当可逆的决策切合实际，得到数据或过往结果的支持，这些决策才是可行的。</strong></p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B3%EF%BC%9A%E5%81%9A%E5%87%BA%E5%8F%AF%E9%80%86%E7%9A%84%E5%86%B3%E7%AD%96.png" alt="思维模型3：做出可逆的决策"></p><h3 id="思维模型4：寻求“满意度”"><a href="#思维模型4：寻求“满意度”" class="headerlink" title="思维模型4：寻求“满意度”"></a>思维模型4：寻求“满意度”</h3><p><strong>用于实现你的优先目标，忽略无关紧要的事情。</strong></p><p>“<strong>满意度</strong>”(<strong>satisfice</strong>) 是 <strong>满意(satisfy)</strong> 和 <strong>足够(suffice)</strong> 两个词合成的，由赫伯特·西蒙(Herbert Simon)在20世纪50年代首创，是为了给那些希望从决策中获得最大利益的人提供便利的选择。</p><blockquote><p>个人感觉satisfice翻译成“满足度”更好一些。</p></blockquote><p>需要的东西其实远远没有原本以为的那么多，只是欲望伪装成了需求。</p><h4 id="两类决策者"><a href="#两类决策者" class="headerlink" title="两类决策者"></a>两类决策者</h4><p>大多数人可以分为两类决策者： <strong>满足者 ( satisficers )</strong> 和 **最大化者(maximizers)**。</p><p><strong>满足者</strong>，可以更准确地决定什么才是真正重要的，专注于这些方面。他们会抓住要点，直奔目标，结束后不再回头。</p><p><strong>最大化者</strong>，什么都想要，会努力、努力再努力，直到得到想要的结果。极其挑剔，这种挑剔达到令人气馁的程度，会用尽期限内的时间去做一项决策，无一例外。即使在做出决策以后，他们还是会思来想去，后悔自己的决策。</p><p>设想一下，你要买一辆新的自行车。</p><p>最大化者会花很多时间为决策做研究，评估尽可能多的选择。他们想要选择最符合自己要求的一辆，发掘出每一个可能性。他们想要100%满意，漠视收益递减规律——投入这么多时间做研究的收益欠佳。轮胎必须是某个品牌，车架的金属和塑料必须是某个比例，刹车把手必须是某个颜色。除了要满足这么多条件，他们还要找到远低于市价的报价。如果最大化者是职业自行车手，经常会参加国际比赛，那还说得过去，但他们只是喜欢在周末运动，偶尔骑骑车而已。</p><p>满足者的目标只是得到满足，只要找到足以满足自己用途的选择就可以了。他们只要找到足够好的，就不会再找下去。</p><h4 id="避免最大化诱惑"><a href="#避免最大化诱惑" class="headerlink" title="避免最大化诱惑"></a>避免最大化诱惑</h4><p>“满意度”的概念在<strong>37%法则&#x2F;秘书问题</strong>中有所体现。</p><blockquote><p>《算法之美》一书中也有讲到37%法则。</p></blockquote><p>假设一家公司要聘请一名秘书，有100名应聘者进入了面试环节。在面试完前37名应聘者之后，你就会了解到应聘者的资质范围和是否合适。基本上，余下的人跟前37名应聘者不会有什么差别，出现最大化异常值的可能性极低，或者根本不存在。</p><p>要寻求满意度，避免在不知不觉中受到最大化的诱惑——把太多时间花在无关紧要的事情上—— 一个简单的方法是<strong>给自己选择的条件设限</strong>。</p><p><strong>在预定时间内无法决定的情况下，事先决定一个默认选择。</strong><br>设定默认选择是很重要的，因为你会自动选择符合你要求或愿望的东西。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B4%EF%BC%9A%E5%AF%BB%E6%B1%82%E2%80%9C%E6%BB%A1%E6%84%8F%E5%BA%A6%E2%80%9D.png" alt="思维模型4：寻求“满意度”"></p><p>以上，未完待续。<p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><hr><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】10分钟学点《思维模型》（一）</title>
    <link href="/2021/07/09/10-minutes-learning-mental-model-read-notes-1/"/>
    <url>/2021/07/09/10-minutes-learning-mental-model-read-notes-1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记整理自《思维模型——建立高品质思维的30种模型》一书，作者（美）彼得·霍林斯。</p><p>这本书是年初时部门复盘培训活动的小组奖品，本以为是一本网文凑数的书，觉得可能2、3个小时也就翻完了，后来才发现这是本不错的书，放在床头每晚读两篇，是上半年读过二十多本书中的TOP3。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/mental-model-book.jpg" alt="书上折的那些角"></p></blockquote><h2 id="芒格与思维模型"><a href="#芒格与思维模型" class="headerlink" title="芒格与思维模型"></a>芒格与思维模型</h2><p>查理·芒格——巴菲特的重要合作伙伴，1994年，芒格在南加州大学商学院(USC BusinessSchool)毕业典礼上发表了演讲，题为《论基本的、普世的智慧及其与投资管理和商业的关系》(<em>Lesson on Elementary, Worldly Wisdom as It Relates to Investment Management &amp; Business</em>)，提出了“思维模型”(<em>mental model</em>)的概念。</p><p>什么是基本的、普世的智慧?</p><ul><li><p>如果你只是记得一些孤立的事实，试图把它们硬凑起来，那你就无法真正理解任何东西。如果这些事实不在一个理论框架中相互联系，你也就无法把它们派上用场。</p></li><li><p>你必须在头脑中建立起一些思维模型，你必须依靠这些思维模型组成的框架组织自身的经验，包括直接经验和间接经验。</p></li><li><p>你必须拥有多个思维模型。如果你只能使用一两个，人类心理的本性就会让你扭曲现实，硬塞进你自己的思维模型，至少你自己觉得是塞进去了。</p></li><li><p>你必须具备跨学科的思维模型。你必须知道重要学科的重大理论，勤加使用——要全都用出来，而非固定地只用几种。</p><p>大多数人只学了某一学科的思维模式，比如经济学，就想套用到所有问题上。俗话说:“在拿锤子的人看来，整个世界都是一颗钉子。”这种处理问题的方式是愚不可及的。</p><p>但幸运的是，这并没有你想的那么难——因为掌握八九十个重要模型就差不多能让你成为一个具备普世智慧的人，而其中非常重要的只有几个。</p></li></ul><p><strong>思维模型</strong>是针对你所面对的情况，指引你关注重要元素的蓝图，界定场景、背景和方向。即使缺乏实际知识或经验，你也能够增进了解，做出最佳决策。</p><p>芒格的另一次著名演讲题目恰恰是《人类误判心理学》(<em>The Psychology of Human Misjudgement</em>)。</p><ul><li>如果你拥有的思维模型太少，就可能陷入盲人摸象的误区。</li><li>多个模型可以相互质疑，形成更统一的整体观点。</li><li>即使你不懂得无数个学科的所有来龙去脉，也可以使用多个思维模型，只要了解几个重要学科的要点和基本原理就可以。</li></ul><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E8%8A%92%E6%A0%BC%E4%B8%8E%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B.png" alt="芒格与思维模型"></p><h2 id="第一章-如何快速而全面地做出决策"><a href="#第一章-如何快速而全面地做出决策" class="headerlink" title="第一章   如何快速而全面地做出决策"></a>第一章   如何快速而全面地做出决策</h2><p>这是一系列<strong>决策思维模型</strong>，这几个模型可以帮助我们更快速地处理信息，实现你更有可能感到满意的结果。</p><h3 id="思维模型1：关注“重要”任务，忽略“紧急”任务"><a href="#思维模型1：关注“重要”任务，忽略“紧急”任务" class="headerlink" title="思维模型1：关注“重要”任务，忽略“紧急”任务"></a>思维模型1：关注“重要”任务，忽略“紧急”任务</h3><p><strong>用于区分真正的优先事项和冒牌货。</strong></p><p>这个思维模型大概在生产力领域最为常见，在这个领域，时间就是金钱。我们把太多时间花在所谓“紧急”任务上，其实应该关注的是“重要”任务。</p><h4 id="艾森豪威尔矩阵"><a href="#艾森豪威尔矩阵" class="headerlink" title="艾森豪威尔矩阵"></a>艾森豪威尔矩阵</h4><p>要区分紧急任务和重要任务，有一个久经验证的方法。这个方法得名于美国最知名的总统之一：德怀特·戴维·艾森豪威尔(<em>Dwight D. Eisenhower</em>)，被称为艾森豪威尔矩阵(<em>Eisenhower Matrix</em>)。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E8%89%BE%E6%A3%AE%E8%B1%AA%E5%A8%81%E5%B0%94%E7%9F%A9%E9%98%B5.jpg" alt="艾森豪威尔矩阵"></p><ul><li><p>“今天就做”的对象应该是绝对刻不容缓的事情，必须尽快完成，才能避免不良后果或不可收拾的局面，越早完成，日后需要做的工作就越少(越是轻松)。通常是有期限的任务。</p></li><li><p>“安排时间去做”的任务也是中长期计划的关键元素。</p><ul><li><p>你在制订未来一周或一个月的计划时，应该把“安排时间去做”的任务纳入时间表。</p></li><li><p>你要避免掉进一个陷阱:把优先等级排得过于靠后。要保持正常运营，必须处理这些重要任务;如果你弃而不顾或抛在脑后，这可能很快就会变成紧急任务。</p></li></ul></li><li><p>“不重要任务”，对你自己不那么重要的任务，但不代表对别人不重要(不过也不排除这种可能)，这些活动由其他人来完成或许更合适或更有意义。</p></li></ul><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B1_%E5%85%B3%E6%B3%A8%E2%80%9C%E9%87%8D%E8%A6%81%E2%80%9D%E4%BB%BB%E5%8A%A1%EF%BC%8C%E5%BF%BD%E7%95%A5%E2%80%9C%E7%B4%A7%E6%80%A5%E2%80%9D%E4%BB%BB%E5%8A%A1.png" alt="思维模型1_关注“重要”任务，忽略“紧急”任务"></p><h3 id="思维模型2：设想出所有多米诺骨牌"><a href="#思维模型2：设想出所有多米诺骨牌" class="headerlink" title="思维模型2：设想出所有多米诺骨牌"></a>思维模型2：设想出所有多米诺骨牌</h3><p><strong>用于做出尽可能明智的决策。</strong></p><p>我们做的每一个决策都像是一个多米诺骨牌，生活绝非这么简单和孤立。还有其他多米诺骨牌呢，它们不会凭空消失。 </p><h4 id="一阶思维"><a href="#一阶思维" class="headerlink" title="一阶思维"></a>一阶思维</h4><ul><li><p>我们只专注于解决手头上的问题或对手头上的事情做出决策，而不去考虑长远影响或我们的决策在遥远的未来会发挥什么作用。你可以理解为只考虑第一个多米诺骨牌的思维方式。 </p></li><li><p>我们所做出的许多决策（尤其是让我们在夜里辗转反侧的决策）都会产生眼前看不到的影响。人类对后果就像蝙蝠一样盲目，一个人做出的小决策可能在日后产生意想不到的影响，造成蝴蝶效应。</p></li></ul><h4 id="二阶思维"><a href="#二阶思维" class="headerlink" title="二阶思维"></a>二阶思维</h4><ul><li><p>是指努力预估未来，推断出可能产生的一系列后果，用于进行成本效益分析，以便做出决策或制订解决方案。</p></li><li><p>你不是简单地满足于买新的公寓，而是要想一下这会对你的信贷和债务产生什么影响，以后能否养得起一条大狗。你不是每个星期染一次头发，而是要想一下刺激的染发剂已经令秃点增多，你可能很快就得戴假发。 </p><blockquote><p>这个秃头的例子真令人头秃。</p></blockquote></li></ul><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>约翰·梅纳德 · 凯恩斯（<em>John Maynard Keynes</em>）在1936年出版的著作《就业、利息和货币通论》中，拿一个选美比赛来打比方。报上发布100张照片，要求参赛者选出其中最美的6个，选择结果与得票率最高的6个相符者获奖。不明就里的参赛者会努力选出最美的6个。但请留意，获奖条件不是选出最美的6个，而是选出得票率最高的6个。</p><p>“参赛者不是要根据自己的审美标准选出谁真正最美，甚至不是大众真正觉得谁最美。运用三阶思维的人，要费心预计大众觉得大众的观点是怎样的。我相信，还有些人会运用四阶思维、五阶思维，甚至更高阶的思维。” </p><h4 id="运用二阶思维的一些指引性问题"><a href="#运用二阶思维的一些指引性问题" class="headerlink" title="运用二阶思维的一些指引性问题"></a>运用二阶思维的一些指引性问题</h4><ol><li><p>这项决策会对未来的事件产生多么广泛的影响？</p><p>除了改变你当前关注的事项，你的决策还会产生什么影响？又会造成哪些关注事项？你决策的目的能得到满足吗？</p></li><li><p>我认为会产生怎样的结果？</p><p>放眼最直接问题的简单解决方案之外，如果你采取这样的做法，成功了会产生什么影响，失败了又会产生什么影响？结果会是怎样的？成败各半会是怎样的？</p></li><li><p>我成功或正确的概率有多高？</p><p>尽可能客观地判断，你评估准确的概率有多高？你的预测实事求是吗？还是至少有点异想天开或疑神疑鬼？每项决策都有成本效益比率。你是否明知会失败或只是成败各半，还是偏要去做呢？ </p></li><li><p>别人都是怎么想的？</p><p>希望至少有一两个人（最好是更多）对你的预测给予中肯的意见，告诉你他们觉得你的预测是否正确。</p></li><li><p>我的想法跟别人有何区别?</p><p>你的想法跟大众的认识和意见有什么主要分歧?</p><p>你有哪些方面的信息和预测是跟别人不一样的，为什么会不一样?你的想法有何依据?是否遗漏了什么?</p></li><li><p>别人设想会有哪些多米诺骨牌倒下?</p><p>主动寻求和表述别人可能看到的多米诺骨牌效应，从他们的角度看一下多米诺骨牌是怎样倒下的。并非所有的角度都站得住脚，但这可以为你提供更多信息。</p></li></ol><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B2%EF%BC%9A%E8%AE%BE%E6%83%B3%E5%87%BA%E6%89%80%E6%9C%89%E5%A4%9A%E7%B1%B3%E8%AF%BA%E9%AA%A8%E7%89%8C.png" alt="思维模型2：设想出所有多米诺骨牌"></p><p>以上，未完待续。<p>欢迎关注公众号“<strong>小黑杂说</strong>”，回复“<strong>思维模型</strong>”获取电子书下载链接。</p><p><hr><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>思维模型——建立高品质思维的30种模型</tag>
      
      <tag>10分钟系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【思维导图】《编写高质量代码：改善Java程序的151个建议》7~12章</title>
    <link href="/2021/07/05/mindmap-writing-high-quality-code-151-advices-to-improve-java-code-chapter-7-12/"/>
    <url>/2021/07/05/mindmap-writing-high-quality-code-151-advices-to-improve-java-code-chapter-7-12/</url>
    
    <content type="html"><![CDATA[<p>整理自《编写高质量代码：改善Java程序的151个建议》一书第7~12章，全书思维导图已更新完毕。</p><blockquote><p>《编写高质量代码：改善Java程序的151个建议》这本书有些年了，但是知识点较全面，<strong>是本查漏补缺的书</strong>，整本书的写作风格参考《Effective C++》条款式风格，是一本<strong>适合碎片时间阅读</strong>的书。</p><p>可以关注微信公众号：<strong>小黑杂说</strong>，回复关键字“<strong>java151电子书</strong>”获取完整电子书下载链接。</p></blockquote><p>第7章泛型和反射、第8章异常、第9章多线程和并发、第10章性能效率，重点看一下；第11、12章仅作为了解快速阅读即可，<strong>重要的知识点</strong>有：</p><ul><li>建议93，Java泛型是编译器的，泛型擦除问题</li><li>建议94，如果一定要初始化泛型数组怎么办</li><li>建议95，如何强制声明泛型类型</li><li>建议100，泛型集合转为泛型数组</li><li>建议106，动态代理</li><li>建议107，装饰模式应用于反射</li><li>建议108，模版方法模式应用于反射</li><li>建议113，finally块中处理返回值的那些诡异事情</li><li>建议123，volatile关键字并不能保证数据同步</li><li>建议126，线程池的那些参数</li><li>建议127，Lock和synchronized关键字的区别</li><li>建议135，必须定义性能衡量标准，这个在实际开发过程中很重要</li></ul><p>思维导图大纲截图如下。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/outline-java-151-chapter-7-9.png" alt="《编写高质量代码：改善Java程序的151个建议》7~9章"></p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/outline-java-151-chapter-10-12.png" alt="《编写高质量代码：改善Java程序的151个建议》10~12章"></p><p>点击每个“小标题”的箭头即可查看每个子项；点击右上角思维导图图标，可以切换大纲模式和导图模式。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/mindmap-java-151-chapter-7.png" alt="第7章 泛型和反射"></p><p>第7~9章思维导图链接：<a href="https://www.mubucm.com/doc/5QwfTKEG4_-">https://www.mubucm.com/doc/5QwfTKEG4_-</a></p><p>长按或扫描下面二维码也可以直达。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/qrcode-java-151-chapter-7-9.png" alt="第7~9章思维导图二维码"></p><p>第10~12章思维导图链接：<a href="https://www.mubucm.com/doc/AwQ3wFh23-">https://www.mubucm.com/doc/AwQ3wFh23-</a></p><p>长按或扫描下面二维码也可以直达。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/qrcode-java-151-chapter-10-12.png" alt="第10~12章思维导图二维码"></p><p>至此，全书思维导图更新完毕，下一本书的思维导图还在整理中。</p><p>最后，欢迎分享。</p><p>欢迎关注“小黑杂说”公众号，回复想了解的技术、思维导图或者电子书都可以。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>思维导图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>编写高质量代码：改善Java程序的151个建议</tag>
      
      <tag>Java</tag>
      
      <tag>Effective Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【思维导图】《编写高质量代码：改善Java程序的151个建议》5~6章</title>
    <link href="/2021/07/04/mindmap-writing-high-quality-code-151-advices-to-improve-java-code-chapter-5-6/"/>
    <url>/2021/07/04/mindmap-writing-high-quality-code-151-advices-to-improve-java-code-chapter-5-6/</url>
    
    <content type="html"><![CDATA[<p>整理自《编写高质量代码：改善Java程序的151个建议》一书第5、6章，</p><blockquote><p>《编写高质量代码：改善Java程序的151个建议》这本书有些年了，但是知识点较全面，<strong>是本查漏补缺的书</strong>，整本书的写作风格参考《Effective C++》条款式风格，是一本<strong>适合碎片时间阅读</strong>的书。</p><p>可以关注微信公众号：<strong>小黑杂说</strong>，回复关键字“<strong>java151电子书</strong>”获取完整电子书下载链接。</p></blockquote><p>第5章讲的是数组和集合、第6章主要是枚举，<strong>数组和集合是日常开发中用的较多的数据结构，这部分内容可以仔细看一下。</strong></p><p>这两章个人觉得<strong>容易遗忘、混淆的知识点和比较重要的知识点</strong>有：</p><ul><li>建议63，默认集合长度</li><li>建议66，<code>Arrays.asList()</code>产生对象</li><li>建议67，不同列表遍历方法的选择</li><li>建议70~72，<code>subList</code>的一些细节</li><li>建议76，集合间的交集、并集、差集运算</li><li>建议81，<code>SortedSet</code>排序的时机</li><li>建议87，枚举类型<code>valueOf</code>方法注意校验</li><li>建议88，用枚举实现工厂模式的方法，是不容易想到的方式</li></ul><p>思维导图大纲截图如下。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81%EF%BC%9A%E6%94%B9%E5%96%84Java%E7%A8%8B%E5%BA%8F%E7%9A%84151%E4%B8%AA%E5%BB%BA%E8%AE%AE%EF%BC%88%E7%AC%AC5_6%E7%AB%A0%EF%BC%89.png" alt="《编写高质量代码：改善Java程序的151个建议》5~6章"></p><p>点击每个“小标题”的箭头即可查看每个子项；点击右上角思维导图图标，可以切换大纲模式和导图模式。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/mindmap-java-151-chapter-5.png" alt="第5章 数组和集合"></p><p>第5、6章思维导图链接：<a href="https://www.mubucm.com/doc/6TSQLCKH1i-">https://www.mubucm.com/doc/6TSQLCKH1i-</a></p><p>长按或扫描下面二维码也可以直达。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/qrcode-java-151-chapter-5-6.png" alt="第5~6章思维导图二维码"></p><hr><p>用的是在线思维导图软件——“幕布”，还不错。</p><p>欢迎使用我的邀请链接（<a href="https://mubu.com/inv/19150">https://mubu.com/inv/19150</a>）进行注册，赠送30天会员。长按或扫描下面二维码也可以直达。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/mubu_invite.png" alt="幕布邀请二维码"></p><p><strong>注意</strong>：在校学生记得认证学生身份，赠送一年会员。</p><p>最后，欢迎分享。</p><p>欢迎关注“小黑杂说”公众号，回复想了解的技术、思维导图或者电子书都可以。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>思维导图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>编写高质量代码：改善Java程序的151个建议</tag>
      
      <tag>Java</tag>
      
      <tag>Effective Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【思维导图】《编写高质量代码：改善Java程序的151个建议》1~4章</title>
    <link href="/2021/07/02/mindmap-writing-high-quality-code-151-advices-to-improve-java-code-chapter-1-to-4/"/>
    <url>/2021/07/02/mindmap-writing-high-quality-code-151-advices-to-improve-java-code-chapter-1-to-4/</url>
    
    <content type="html"><![CDATA[<p>整理自《编写高质量代码：改善Java程序的151个建议》一书前四章，这本书有些年了，但是知识点较全面，是本查漏补缺的书，整本书的写作风格参考《Effective C++》条款式风格，是一本适合碎片时间阅读的书。</p><blockquote><p>可以关注微信公众号：<strong>小黑杂说</strong>，回复关键字“java151电子书”获取完整电子书下载链接。</p></blockquote><p>思维导图大纲截图如下。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/java-151-chapter-1-4.png" alt="《编写高质量代码：改善Java程序的151个建议》1~4章"></p><p>前4章基本是Java基础知识，个人觉得容易遗忘、混淆的知识点和比较重要的知识点有：</p><ul><li>建议3，三元操作符类型的转换规则</li><li>建议7，Java对自增的处理</li><li>建议12～14，序列化相关</li><li>建议21，取余</li><li>建议23，Java先运算后类型转换</li><li>建议25，四舍五入的几种模式</li><li>建议28，整型池</li><li>建议36、37，代码块相关</li><li>建议38，静态内部类</li><li>建议39、40，匿名类的构造函数</li><li>建议43、44，对象的深、浅拷贝相关</li><li>建议45～48，equals相关</li><li>建议56，字符串连接</li></ul><p>前4章思维导图链接：<a href="https://www.mubucm.com/doc/0iKf700ea-r">https://www.mubucm.com/doc/0iKf700ea-r</a>。长按或扫描下面二维码也可以直达。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/qrcode-java-151-chapter-1-4.png" alt="思维导图二维码"></p><p>点击每个“小标题”的箭头即可查看每个子项；点击右上角思维导图图标，可以切换大纲模式和导图模式。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/%E5%AF%BC%E5%9B%BE%E6%A8%A1%E5%BC%8F.png" alt="导图模式"></p><hr><p>用的是在线思维导图软件——“幕布”，还不错。</p><p>欢迎使用我的邀请链接（<a href="https://mubu.com/inv/19150">https://mubu.com/inv/19150</a>）进行注册，赠送30天会员。长按或扫描下面二维码也可以直达。</p><p><img src="https://raw.githubusercontent.com/wuruofan/image_repo/main/img/mubu_invite.png" alt="幕布邀请二维码"></p><p><strong>注意</strong>：在校学生记得认证学生身份，赠送一年会员。</p><p>最后，欢迎分享。</p><p><img src="https://raw.githubusercontent.com/wuruofan/wuruofan.github.io/master/img/qr-wechat-large.png" alt="小黑杂说"></p>]]></content>
    
    
    <categories>
      
      <category>思维导图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维导图</tag>
      
      <tag>读书笔记</tag>
      
      <tag>编写高质量代码：改善Java程序的151个建议</tag>
      
      <tag>Java</tag>
      
      <tag>Effective Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【避坑指北】CentOS 6安装Python3.7+</title>
    <link href="/2021/06/23/install-python3.7-on-centos-6/"/>
    <url>/2021/06/23/install-python3.7-on-centos-6/</url>
    
    <content type="html"><![CDATA[<p>由于某种未知原因，一台老服务器上python3环境不见了，不清楚原安装方法与位置，现重新配置。</p><p>用<code>cat /etc/issue</code>查看了下发行版信息，是CentOS 6.10。CentOS 6默认安装python版本为2.6，安装python3需要自行下载源码编译。</p><h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>CentOS 6版本yum安装的openssl-devel包版本是1.0.1（使用<code>openssl version</code>查看），目前Python3.7以上使用的openssl版本是1.0.2以上版本，使用默认openssl编译会提示<a href="https://github.com/libressl-portable/portable/issues/381">libressl库不兼容此版本的API</a>，需要本机编译openssl库，编译过程会有很多坑。</p><h3 id="安装源码依赖软件包"><a href="#安装源码依赖软件包" class="headerlink" title="安装源码依赖软件包"></a>安装源码依赖软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel expat-devel<br></code></pre></td></tr></table></figure><p>这部分依赖软件包有些应该可以不装，可以在编译过程中根据提示错误一个个安装。</p><p>注意，由于yum本身就是一个python脚本，在python环境有问题时，这一步安装可能就会有问题，需要先恢复原python2.6的环境。</p><p>另外，CentOS 6在2020年11月底官方软件源就停止维护了，如遇到问题，需要更换成阿里云的软件源。</p><h3 id="编译openssl-1-0-2"><a href="#编译openssl-1-0-2" class="headerlink" title="编译openssl 1.0.2"></a>编译openssl 1.0.2</h3><p>此处没有使用最新版本，酌情选择openssl版本。</p><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><p>命令行下载或者浏览器下载，命令行可以使用<code>wget http://www.openssl.org/source/openssl-1.0.2r.tar.gz</code></p><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这里没配置prefix，默认安装路径在/usr/local/ssl</span><br>./config shared zlib<br><br>make<br><br><span class="hljs-comment"># 表示将标准错误2和标准输出1的缓冲区内容都写入install.log</span><br>sudo make install &gt; install.log 2&gt;&amp;1<br></code></pre></td></tr></table></figure><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 养成备份源文件的习惯</span><br>sudo <span class="hljs-built_in">mv</span> /usr/bin/openssl /usr/bin/openssl.bak<br>sudo <span class="hljs-built_in">mv</span> /usr/include/openssl /usr/include/openssl.bak<br><br><span class="hljs-comment"># 链接新openssl</span><br>sudo <span class="hljs-built_in">ln</span> -sf /usr/local/ssl/bin/openssl /usr/bin/openssl<br>sudo <span class="hljs-built_in">ln</span> -sf /usr/local/ssl/include/openssl /usr/include/openssl<br><br><span class="hljs-comment"># 将openssl lib路径加入链接路径</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export LD_LIBRARY_PATH=/usr/local/ssl/lib:<span class="hljs-variable">$LD_LIBRARY_PATH</span>&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span> ~/.bashrc<br><br><span class="hljs-comment"># 查看openssl版本</span><br>openssl version<br></code></pre></td></tr></table></figure><h3 id="编译python3"><a href="#编译python3" class="headerlink" title="编译python3"></a>编译python3</h3><h4 id="下载目标版本源码"><a href="#下载目标版本源码" class="headerlink" title="下载目标版本源码"></a>下载目标版本源码</h4><p>去官网<a href="https://www.python.org/downloads/%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E6%98%AF%E4%B8%80%E4%B8%AA.tar.gz%E5%8E%8B%E7%BC%A9%E5%8C%85%EF%BC%8C%E6%89%A7%E8%A1%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%EF%BC%9A%60tar">https://www.python.org/downloads/，下载完成是一个.tar.gz压缩包，执行解压缩命令：`tar</a> zxvf python****.tar.gz&#96;</p><h4 id="编译安装-1"><a href="#编译安装-1" class="headerlink" title="编译安装"></a>编译安装</h4><p>进入解压后源码目录，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用上一步编译的ssl目录</span><br>./configure --prefix=/usr/local/python3 --with-openssl=/usr/local/ssl --enable-shared <br> <br>make<br> <br>sudo make install<br></code></pre></td></tr></table></figure><p>这里<code>--enable-shared</code>记得加上，否则可能会出现找不到so的错误。</p><p>由于安装到<code>/usr/local/</code>目录下，所有用户都可以访问，需要su权限安装。</p><p>卸载如需要卸载，直接删除<code>/usr/local/python3</code>目录即可。</p><h2 id="配置python环境"><a href="#配置python环境" class="headerlink" title="配置python环境"></a>配置python环境</h2><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a><del>配置环境变量</del></h4><p>不推荐使用此方式，可能会遇到同名可执行程序优先从此目录定位的问题。我在配置过程中就遇到一次。</p><p><del>当前用户的bashrc终端配置文件。如会使用vim，可以使用<code>vim ~/.bashrc</code>直接编辑，也可以使用其他终端工具本地编辑后上传替换。</del></p><p><del>增加环境变量配置：<code>export PATH=&quot;/usr/local/python3/bin&quot;:$PATH</code></del></p><p><del>编辑完成后使用<code>source ~/.bashrc</code>命令，加载终端配置文件使之生效，这样直接执行python3即可找到该命令了。</del></p><h4 id="更新软连接"><a href="#更新软连接" class="headerlink" title="更新软连接"></a>更新软连接</h4><p>将<code>/usr/bin/python</code>链接到<code>/usr/local/python3/bin/python3</code>，这样默认使用python3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mv</span> /usr/bin/python /usr/bin/python.bak<br> <br>sudo <span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/python3 /usr/bin/python<br><br>sudo <span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/python3 /usr/bin/python3<br><br>sudo <span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/pip3 /usr/bin/pip<br></code></pre></td></tr></table></figure><h4 id="配置动态库"><a href="#配置动态库" class="headerlink" title="配置动态库"></a>配置动态库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将openssl和python3 lib路径加入链接路径。</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export LD_LIBRARY_PATH=/usr/local/ssl/lib:/usr/local/python3/lib:<span class="hljs-variable">$LD_LIBRARY_PATH</span>&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-comment"># 重新加载</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>这时配置完，bashrc中应当配置了两条LD_LIBRARY_PATH，<code>export LD_LIBRARY_PATH=/usr/local/ssl/lib:/usr/local/python3/lib:$LD_LIBRARY_PATH</code>。</p><h4 id="配置yum（可选）"><a href="#配置yum（可选）" class="headerlink" title="配置yum（可选）"></a>配置yum（可选）</h4><p>由于CentOS的软件管理工具yum是默认依赖python2的，如果运行出现错误，需要修改yum脚本。</p><p>用vim编辑<code>/usr/bin/yum</code>将首行<code>#!/usr/bin/python</code>改为<code>#!/usr/bin/python2.6</code>即可。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果在python3配置过程中都已经按照说明进行了配置，但是仍有奇怪的问题，可能和python自身的环境变量有关，python2和python3都会使用<code>$PYTHONHOME</code>和<code>$PYTHONPATH</code>，可以执行清除命令。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> <span class="hljs-variable">$PYTHONHOME</span><br><br><span class="hljs-built_in">unset</span> <span class="hljs-variable">$PYTHONPATH</span><br></code></pre></td></tr></table></figure><p>或者退出当前登陆，重新建立ssh连接。</p>]]></content>
    
    
    <categories>
      
      <category>避坑指北</category>
      
    </categories>
    
    
    <tags>
      
      <tag>避坑指北</tag>
      
      <tag>遇坑总结</tag>
      
      <tag>openssl</tag>
      
      <tag>python</tag>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XML排序小工具——xmlabit</title>
    <link href="/2021/05/20/xmlabit-a-xml-node-sort-tool/"/>
    <url>/2021/05/20/xmlabit-a-xml-node-sort-tool/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这是小黑去年写的一个小<del>公举</del>工具，日常工作中有需要比较两个系统生成的XML文件是否相同，但是XML中的节点顺序并不是固定的。当时没有找到合适的工具，于是就自己写了这个工具。</p><p>工具名叫<code>xmlabit</code>，是<code>xml alphabet it</code>的缩写。代码很简单，主要依赖<code>pugixml</code>库对XML文件节点进行重排序，仓库地址：<a href="https://github.com/wuruofan/xmlabit">https://github.com/wuruofan/xmlabit</a>。</p><p><code>pugixml</code>是一个C++实现的轻量级XML操作库，支持XPath路径表达式，仓库地址：<a href="https://github.com/zeux/pugixml">https://github.com/zeux/pugixml</a>。</p><span id="more"></span><h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xmlabit [options] -t &lt;/xpath/to/parent_node@target_node<span class="hljs-comment">#attributes_name&gt; -o &lt;output_xml_file&gt; &lt;input_xml_file&gt;</span><br></code></pre></td></tr></table></figure><p>通常情况，<code>xmlabit</code>命令基本格式如上，<code>[]</code>方括号中表示可选参数，<code>&lt;&gt;</code>表示必选参数。支持参数如下：</p><ul><li><code>-v</code>&#x2F;<code>--version</code>：打印程序版本信息。</li><li><code>-h</code>&#x2F;<code>--help</code>：打印帮助信息。</li><li><code>-t</code>&#x2F;<code>--target</code>：类似XPath的路径表达式来定位需要排序的节点，格式<code>/xpath/of/parent_node@node#attribute</code>，其中<code>#attribute</code>可以省略。</li><li><code>-o &lt;output_xml_file&gt;</code>&#x2F;<code>--output &lt;output_xml_file&gt;</code>：输入排序后文件。若没有使用此参数，则排序后字符串默认输出到屏幕.</li><li><code>-d</code>&#x2F;<code>--desecend</code>：降序排序。默认将待排序属性或节点名按A-Z字母顺序排序。</li><li><code>-i</code>&#x2F;<code>--ignore-case</code>：忽略大小写，比较时忽略大小写。</li><li><code>-n</code>&#x2F;<code>--numeric</code>：将待排序属性或节点名当作数字进行比较，默认XML解析时会把数字当作字符串处理。</li></ul><h2 id="编译方法"><a href="#编译方法" class="headerlink" title="编译方法"></a>编译方法</h2><p>目前编译使用CMake，仅支持Linux&#x2F;MacOS，Windows请使用WSL环境编译。</p><p>在工程目录，运行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> build</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> build</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">cmake ..</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make install</span><br></code></pre></td></tr></table></figure><p>如果想编译调试版本，使用 <code>cmake -B build -DCMAKE_BUILD_TYPE=Debug</code>。</p><p>默认情况<code>make install</code> 将 <code>xmlabit</code>复制到 <code>/usr/local/bin</code> 目录，如需卸载直接<code>rm -i /usr/local/bin</code>即可。</p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="示例1：按某子节点值排序"><a href="#示例1：按某子节点值排序" class="headerlink" title="示例1：按某子节点值排序"></a>示例1：按某子节点值排序</h3><p>这里有一个books.xml如下，保存了书架、书籍的信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">magzine</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Beauty<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>129.29<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">magzine</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Harry Potter3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>29.29<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Harry Potter2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>39.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>29.19<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>readme<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>0.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>readme2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>-0.955<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>39.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>readme3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>0.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在如果想对书架上的书籍按书名排序，那么，<code>-t</code>参数后面的表达式应该是<code>/bookstore@book#title</code>，其中<code>/</code>表示根节点，<code>/bookstore@book</code>表示待排序的节点名都是<code>book</code>，其XPath路径为<code>/bookstore/book</code>，排序依据的子节点值或者属性值名为<code>title</code>。</p><p>进入编译<code>build</code>目录，运行<code>./xmlabit -t /bookstore@book#title books.xml -o output.xml</code>即可。排序后的结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">magzine</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Beauty<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>129.29<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">magzine</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>29.19<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Harry Potter2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>39.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Harry Potter3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>29.29<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>39.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>readme<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>0.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>readme2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>-0.955<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>readme3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>0.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>这里又有一个book2.xml，也保存了一些书籍信息，不同的是XML节点构成不太一样。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;29.99&quot;</span>&gt;</span>Harry Potter3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;us&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>harry potter2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;fr&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>readme<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.1&quot;</span>&gt;</span>readme2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;92&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.01&quot;</span>&gt;</span>readme3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-1-对books节点下的所有书籍按名称降序排序"><a href="#2-1-对books节点下的所有书籍按名称降序排序" class="headerlink" title="2.1 对books节点下的所有书籍按名称降序排序"></a>2.1 对<code>books</code>节点下的所有书籍按名称降序排序</h4><p>使用命令<code>./xmlabit -t /bookstore/books@book -d books2.xml</code>即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.01&quot;</span>&gt;</span>readme3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.1&quot;</span>&gt;</span>readme2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>readme<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;us&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>harry potter2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;92&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;29.99&quot;</span>&gt;</span>Harry Potter3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;fr&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里看到有一本小写名称的《harry potter2》排在了《Learning XML》前面，因为小写字符的ASCII数值要比大写字符大。</p><h4 id="2-2-对books节点下的所有书籍按名称、无视大小写、降序排序"><a href="#2-2-对books节点下的所有书籍按名称、无视大小写、降序排序" class="headerlink" title="2.2 对books节点下的所有书籍按名称、无视大小写、降序排序"></a>2.2 对<code>books</code>节点下的所有书籍按名称、无视大小写、降序排序</h4><p>使用命令<code>./xmlabit -t /bookstore/books@book -di books2.xml</code>即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.01&quot;</span>&gt;</span>readme3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.1&quot;</span>&gt;</span>readme2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>readme<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;92&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;29.99&quot;</span>&gt;</span>Harry Potter3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;us&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>harry potter2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;fr&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-对books节点下的所有书籍按属性lang排序"><a href="#2-3-对books节点下的所有书籍按属性lang排序" class="headerlink" title="2.3 对books节点下的所有书籍按属性lang排序"></a>2.3 对<code>books</code>节点下的所有书籍按属性<code>lang</code>排序</h4><p>使用命令<code>./xmlabit -t /bookstore/books@book#lang books2.xml</code>即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;29.99&quot;</span>&gt;</span>Harry Potter3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>readme<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;92&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.01&quot;</span>&gt;</span>readme3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;fr&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;us&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>harry potter2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.1&quot;</span>&gt;</span>readme2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-4-对books节点下的所有书籍按属性price进行排序"><a href="#2-4-对books节点下的所有书籍按属性price进行排序" class="headerlink" title="2.4 对books节点下的所有书籍按属性price进行排序"></a>2.4 对<code>books</code>节点下的所有书籍按属性<code>price</code>进行排序</h4><p>使用命令<code>./xmlabit -t /bookstore/books@book#price books2.xml</code>即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.01&quot;</span>&gt;</span>readme3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.1&quot;</span>&gt;</span>readme2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;us&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>harry potter2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;fr&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;29.99&quot;</span>&gt;</span>Harry Potter3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>readme<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;92&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为<code>price</code>属性都是字符串，排序也是按照字符串字符进行排序的。</p><h4 id="2-5-对books节点下的所有书籍按属性price以数字模式进行排序"><a href="#2-5-对books节点下的所有书籍按属性price以数字模式进行排序" class="headerlink" title="2.5 对books节点下的所有书籍按属性price以数字模式进行排序"></a>2.5 对<code>books</code>节点下的所有书籍按属性<code>price</code>以数字模式进行排序</h4><p>使用命令<code>./xmlabit -t /bookstore/books@book#price books2.xml -n</code>即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.01&quot;</span>&gt;</span>readme3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;0.1&quot;</span>&gt;</span>readme2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;fr&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>readme<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;us&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>harry potter2<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;29.99&quot;</span>&gt;</span>Harry Potter3<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;92&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Git子模块（submodule）"><a href="#Git子模块（submodule）" class="headerlink" title="Git子模块（submodule）"></a>Git子模块（submodule）</h2><p>由于xml解析逻辑完全依赖于<code>pugixml</code>，所以不想在代码里直接放入pugixml的源码文件，Git本身其实提供了submodule子模块组件，用来管理项目中用到的其他Git项目。</p><h3 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h3><p>使用命令<code>git submodule add https://github.com/zeux/pugixml.git</code>将<code>pugixml</code>仓库添加为<code>xmlabit</code>的子模块。</p><p>这时运行<code>git status</code>会发现本地仓库里多了一个<code>.gitmodules</code>文件，里面内容记录了当前仓库包含的子模块信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[submodule <span class="hljs-string">&quot;pugixml&quot;</span>]<br>path = pugixml<br>url = https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zeux/</span>pugixml.git<br></code></pre></td></tr></table></figure><h3 id="初始化并检出子模块"><a href="#初始化并检出子模块" class="headerlink" title="初始化并检出子模块"></a>初始化并检出子模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update --init --recursive<br></code></pre></td></tr></table></figure><p>这一条命令相当于运行了<code>git submodule init</code>以及<code>git submodule update</code>各个嵌套子模块。</p><h3 id="CMakeLists增加Git-submodule支持"><a href="#CMakeLists增加Git-submodule支持" class="headerlink" title="CMakeLists增加Git submodule支持"></a>CMakeLists增加Git submodule支持</h3><p>现在虽然不用在仓库里添加pugixml的源代码了，但是需要用户手动克隆仓库时记得使用git submodule相关命令，这样不太好。</p><p>好在Cmake可以解决，在编译时自动执行git submodule相关命令，需要在CMakeLists增加如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span>(Git QUIET)<br><span class="hljs-keyword">if</span>(GIT_FOUND <span class="hljs-keyword">AND</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/.git&quot;</span>)<br><span class="hljs-comment"># Update submodules as needed</span><br>    <span class="hljs-keyword">option</span>(GIT_SUBMODULE <span class="hljs-string">&quot;Check submodules during build&quot;</span> <span class="hljs-keyword">ON</span>)<br>    <span class="hljs-keyword">if</span>(GIT_SUBMODULE)<br>        <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Submodule update&quot;</span>)<br>        <span class="hljs-keyword">execute_process</span>(<span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;GIT_EXECUTABLE&#125;</span> submodule update --init --recursive<br>                        WORKING_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span><br>                        RESULT_VARIABLE GIT_SUBMOD_RESULT)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> GIT_SUBMOD_RESULT <span class="hljs-keyword">EQUAL</span> <span class="hljs-string">&quot;0&quot;</span>)<br>            <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;git submodule update --init failed with $&#123;GIT_SUBMOD_RESULT&#125;, please checkout submodules&quot;</span>)<br>        <span class="hljs-keyword">endif</span>()<br>    <span class="hljs-keyword">endif</span>()<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/$&#123;PUGIXML_REPO&#125;/CMakeLists.txt&quot;</span>)<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;The submodules were not downloaded! GIT_SUBMODULE was turned off or failed. Please update submodules and try again.&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>之前在搭建GitHub Pages时候使用了Travis CI进行持续集成，在每次提交代码到GitHub时自动构建并执行部署与发布任务，这次尝试一下GitHub自家的Actions功能。</p><p>GitHub仓库界面上有一个名为Actions的Tab，点击之后会自动推荐此仓库适合使用的workflow，也就是工作流程脚本。GitHub自身提供了一个市场，可以搜索到他人提交的Actions，也可以自己上传。</p><img src="https://i.loli.net/2021/05/20/fQXNntKRuYJskA9.png" alt="GitHub Actions" style="zoom:50%;" /><p>xmlabit使用CMake进行编译，就自动推荐了一个CMake相关的workflow，点击添加即可。以后每次提交代码，就会触发CMake自动编译的workflow。</p><p>现在可以使用如下Markdown链接在README中添加一个小徽章来显示当前workflow的状态，自动编译成功之后，会显示一个小绿标<img src="https://i.loli.net/2021/05/20/peVFA8g71OUaEZI.png" alt="编译成功徽章" style="zoom: 50%;" />。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">GitHub Action</span>](<span class="hljs-link">https://github.com/wuruofan/xmlabit/actions/workflows/cmake.yml/badge.svg</span>)<br></code></pre></td></tr></table></figure><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>就这样，很简单的代码，欢迎Star和PR。</p>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工具</tag>
      
      <tag>XML排序工具</tag>
      
      <tag>Git submodule</tag>
      
      <tag>GitHub Actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS/Linux程序员Win10平台生存指北</title>
    <link href="/2021/04/01/working-guide-on-win-10-of-linux-macos-programmers/"/>
    <url>/2021/04/01/working-guide-on-win-10-of-linux-macos-programmers/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小黑用Linux系统可以追溯到上学时期某一次玩DOTA时候XP系统蓝屏了，一生气就把双系统的XP盘格式化了，只保留了Ubuntu系统，从那时候开始学会使用vim，由于工作内容基本是C&#x2F;C++，所以之后基本开发都是Ubuntu+Vim为主了。</p><p>上班后虽说公司配的是古老的winXP电脑，但是好在有一台带界面的Ubuntu服务器可以供我使用，基本环境也是xlaunch+Ubuntu+Vim。</p><p>自己的电脑是Mac，说白了也是Unix系统，出差在外也是Vim为主，涉及Windows版本就虚拟机</p><p>去年换了工作后，公司配的依旧是Windows本，不过是Win10了，依旧很难使用。</p><h2 id="命令行与WSL"><a href="#命令行与WSL" class="headerlink" title="命令行与WSL"></a>命令行与WSL</h2><p>现在回过头来看，就我个人而言，Windows平台开发效率低的原因最主要的一个就是命令行孱弱。原来的<code>cmd</code>工具和<code>bat</code>批处理脚本几乎无法使用，想使用Linux shell，只能选择<code>MinGW</code>或者<code>msys</code>，痛苦且不优雅。</p><p>好在近些年的微软变得越来越开放，发布了适用于Linux的Windows子系统（Windows Subsystem for Linux，简称<strong>WSL</strong>）。</p><p>这对我来说简直棒极了，完全解决了我的痛点。</p><p><strong>WSL</strong>不同于模拟Linux命令行，而是原生系统内置的子系统，在内核级别完成Linux系统接口的转换，有点像半虚拟化。（2020下半年发布的<code>WSL2</code>有点像是全虚拟化。）</p><p>我们可以看一下<code>WSL</code>和<code>WSL2</code>之间的区别，官网给出的比较如下图：</p><p><img src="https://i.loli.net/2021/03/17/JDBljOc2tYkgZeu.png" alt="WSL1与WSL2功能对比"></p><p>WSL2以虚拟机的形式运行完整的Linux内核，也就是说Windows现在可以享受到最新Linux发行版了。</p><p><strong>跨 OS 文件系统的性能</strong>说的是现在不推荐跨操作系统去操作文件，将文件存储在 WSL 文件系统，这样可以获得更快的性能速度。在Windows的文件管理器的地址栏输入<code>\\wsl$\Ubuntu-20.04\home\</code>，即可以以网络连接的形式访问WSL的文件系统。</p><h2 id="WSL安装与升级"><a href="#WSL安装与升级" class="headerlink" title="WSL安装与升级"></a><code>WSL</code>安装与升级</h2><p><strong>WSL</strong>整体的安装过程都比较简单，步骤如下：</p><h3 id="1-开启Windows功能中相关特性"><a href="#1-开启Windows功能中相关特性" class="headerlink" title="1 开启Windows功能中相关特性"></a>1 开启Windows功能中相关特性</h3><p>去“控制面板” -  “程序” - “程序和功能” - “启用或关闭Windows功能”中开启“<strong>适用于 Linux 的 Windows 子系统</strong>”，如果需要使用WSL2，还要勾选“<strong>虚拟机平台</strong>”特性。</p><p><img src="https://i.loli.net/2021/03/18/VyPeo1XvGwkpME8.png" alt="启用WSL所需Windows功能"></p><p>另外，WSL2要求Windows10版本在2004或更高版本以上。</p><h3 id="2-安装WSL2-Linux内核更新包"><a href="#2-安装WSL2-Linux内核更新包" class="headerlink" title="2. 安装WSL2 Linux内核更新包"></a>2. 安装WSL2 Linux内核更新包</h3><p>下载最新<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于 x64 计算机的 WSL2 Linux 内核更新包</a>并安装。</p><p>如果时ARM64版本的Windows10，需要下载<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi">ARM64版本内核更新包</a>。</p><h3 id="3-设置默认WSL版本"><a href="#3-设置默认WSL版本" class="headerlink" title="3. 设置默认WSL版本"></a>3. 设置默认WSL版本</h3><p>在cmd命令行执行<code>wsl --set-default-version 2</code>，以后安装的Linux发行版就是WSL2了。</p><h3 id="4-下载并安装Linux发行版"><a href="#4-下载并安装Linux发行版" class="headerlink" title="4. 下载并安装Linux发行版"></a>4. 下载并安装Linux发行版</h3><p>去<a href="https://aka.ms/wslstore">Microsoft Store</a>市场，选择想安装的Linux版本，点击获取，自动安装就可以啦。</p><p><img src="https://i.loli.net/2021/03/18/syDrY5ojizauOXS.png" alt="微软市场WSL支持的发行版"></p><p>目前商店里支持的Linux有不少，小黑选择的是Ubuntu-20.04 LTS版本。</p><p>安装的过程需要设置账户和密码，常规操作了。</p><h3 id="5-更新已安装的WSL1到WSL2"><a href="#5-更新已安装的WSL1到WSL2" class="headerlink" title="5. 更新已安装的WSL1到WSL2"></a>5. 更新已安装的WSL1到WSL2</h3><p>上面流程使用与第一次安装WSL2，如果你和我一样已经安装过WSL1了，需要做的步骤大概就可以简化如下：</p><ol><li>开启“虚拟机平台”。</li><li>安装“WSL2 Linux内核更新包”。</li><li>设置默认安装版本为WSL2。</li><li>设置已安装WSL1版本的Linux发行版为WSL2。</li></ol><p>在升级WSL之前，需要查看要升级的Linux发行版名称，使用<code>wsl --list --verbose</code>查看，缩写命令是<code>wsl -l -v</code>。该命令会列出当前已安装所有Linux发行版本的名称、状态、版本号。</p><p><img src="https://i.loli.net/2021/03/18/Yzqm3KZiMk9XQ6l.png" alt="WSL状态"></p><p>然后使用<code>wsl --set-version &lt;distribution name&gt; &lt;versionNumber&gt;</code>，比如<code>wsl --set-version Ubuntu-20.04 2</code>。</p><p>这个转换耗时并不是像官方文档说的那样需要花费几分钟，而是和你原来安装WSL系统大小有关，而且转换的时候需要占用额外的C盘空间，我的WSL转换时可以肉眼看到C盘占用空间的增加，大约13GB左右，在转换完成后释放掉。<br>因此，转换WSL之前最好确保C盘有足够的空间。</p><h2 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h2><p>Windows Terminal简单来说就是一个命令行程序的终端软件，可以运行&#x2F;加载命令行工具、 PowerShell 和WSL命令行），它的主要功能包括多个选项卡、窗格、Unicode 和 UTF-8 字符支持、GPU 加速文本呈现引擎，支持各种自定义配置。</p><p><img src="https://i.loli.net/2021/03/26/D6SQHk1sXd58vTw.png" alt="Windows Terminal界面"></p><p>上面图片是官方介绍给出的图片，具体如何配置可以参考<a href="https://docs.microsoft.com/zh-cn/windows/terminal/">官方文档</a>，以及少数派的文章：<a href="https://sspai.com/post/59380">新生代 Windows 终端：Windows Terminal 的全面自定义</a>。</p><p>对于我个人来说，需要解决默认启用WSL Ubuntu的终端即可。<code>Ctrl + ,</code>快捷键打开json设置文件，修改<code>defaultProfile</code>对应键值，为<code>profiles</code> - <code>list</code>列表中你想要启用终端的<code>guid</code>值即可。</p><h3 id="zsh插件加载失败"><a href="#zsh插件加载失败" class="headerlink" title="zsh插件加载失败"></a>zsh插件加载失败</h3><p><code>zsh</code>、<code>Oh-my-zsh</code> 、<code>Powerline字体</code>当然是必不可少的终端环境了，比<code>bash</code>更强大也更美观，需要注意的是zsh的一些插件可能<code>apt-get</code>直接安装会加载不成功。</p><p>需要卸载apt安装的插件，然后通过git clone安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting<br></code></pre></td></tr></table></figure><h3 id="右键在当前目录打开Windows-Terminal"><a href="#右键在当前目录打开Windows-Terminal" class="headerlink" title="右键在当前目录打开Windows Terminal"></a>右键在当前目录打开Windows Terminal</h3><p>Windows Terminal安装完成后应该会在文件管理器右键添加<code>Open in Windows Terminal</code>菜单，旧版本有点问题，右键点击该菜单只会打开用户目录，这时候需要手动删除配置中<code>profiles</code> 的<code>startingDirectory</code>值设置成<code>null</code>，原配置应该是<code>&quot;%USERPROFILE%&quot;</code>。</p><p>如果已经将默认profile设置成WSL，那么现在已经可以在文件管理器右键打开Linux命令行了。</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="nvim"><a href="#nvim" class="headerlink" title="nvim"></a>nvim</h3><p><code>NeoVim</code>命令行版本可用，这就可以解决大部分问题了。</p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><p>VSCode的<code>Remote - WSL</code>插件支持在WSL环境中打开工程目录，插件会把WSL认为是一台远程机器，然后尝试连接，并在WSL环境下打开工程。</p><p><img src="https://i.loli.net/2021/03/29/ptQBOmEUkaz2XKv.png" alt="Remote-WSL插件"></p><p>一旦使用WSL打开，那么编译环境、执行环境、终端都会切换到WSL，VSCode加载的配置文件、插件等都是安装在WSL中的。</p><p><img src="https://i.loli.net/2021/03/29/XQqhTdNxSrGsvkL.png" alt="Remote-WSL状态"></p><p>打开后界面左下角会有一个蓝色标注，显示当前是本地环境打开还是用WSL打开；点击即可切换打开方式。</p><p><img src="https://i.loli.net/2021/03/29/IN4mJPEh7cqY9v8.png" alt="Remote-WSL指令"></p><h2 id="WSL运行exe"><a href="#WSL运行exe" class="headerlink" title="WSL运行exe"></a>WSL运行exe</h2><p>WSL命令行里其实是可以运行Windows可执行程序（<code>exe</code>）文件的，而且Windows系统的环境变量<code>PATH</code>也会默认被添加到WSL中。</p><p>因此，我们可以在WSL的zsh里直接执行<code>explorer.exe .</code>使用文件浏览器打开当前目录。</p><h2 id="WSL与adb"><a href="#WSL与adb" class="headerlink" title="WSL与adb"></a>WSL与adb</h2><p>这是调试过程中遇到最坑的地方了。</p><p>首先，不要使用<code>apt-get</code>安装的adb工具，若已经安装，需要先卸载。从Android开发者官网下载<a href="https://developer.android.com/studio/releases/platform-tools">SDK Platform Tools</a>，Windows版本和Linux版本都需要下载。</p><p>WSL1下的adb使用简单些，只需要Windows和Linux中adb版本一致即可，WSL中adb遇到问题需要在命令行提示符cmd中<code>adb kill-server</code>和<code>adb start-server</code>即可恢复。</p><p>WSL2下的adb就坑一些，保持相同版本号已经不行了，可能和使用了虚拟化平台后，网络连接变化有关，虚拟机中的网卡和真实网卡桥接起来了。不像是原WSL1的系统调用类似半虚拟化，adb直接可以访问到Windows中的adb server，现在必须手动设置Windows中adb服务端和WSL中adb客户端连接了。</p><h3 id="方案1：alias别名"><a href="#方案1：alias别名" class="headerlink" title="方案1：alias别名"></a>方案1：alias别名</h3><p>可以使用<code>alias</code>将WSL2中的adb指向Windows中的adb.exe解决问题。</p><p>在你使用的<code>.bashrc</code>或者<code>.zshrc</code>中添加如下设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [[ ! -z <span class="hljs-variable">$WSL_DISTRO_NAME</span> ]];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">alias</span> adb=<span class="hljs-string">&#x27;adb.exe&#x27;</span><br>    <span class="hljs-built_in">alias</span> fastboot=<span class="hljs-string">&#x27;fastboot.exe&#x27;</span><br>    <span class="hljs-built_in">alias</span> aapt=<span class="hljs-string">&#x27;aapt.exe&#x27;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p><strong>优点</strong>是配置简单，<strong>缺点</strong>是强迫症要死，而且<strong>无法使用高版本adb shell的补全功能</strong>，比如当前电脑连接了两个Android手机，原生adb输入<code>adb -s</code>之后点击<code>TAB</code>按键就会列出当前连接设备的id，或者在<code>adb shell ls /sdcard/</code>之后点击<code>TAB</code>，就会列出该目录下所有文件。</p><h3 id="方案2：设置adb连接"><a href="#方案2：设置adb连接" class="headerlink" title="方案2：设置adb连接"></a>方案2：设置adb连接</h3><p>首先，设置WSL2中adb使用远程服务器的地址。</p><p>在你使用的<code>.bashrc</code>或<code>.zshrc</code>中添加如下设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> WSL_HOST_IP=<span class="hljs-string">&quot;<span class="hljs-subst">$(tail -1 /etc/resolv.conf | cut -d&#x27; &#x27; -f2)</span>&quot;</span> <span class="hljs-comment"># 按照Microsoft给出的方法获取宿主机的IP地址，</span><br><span class="hljs-built_in">export</span> ADB_SERVER_SOCKET=tcp:<span class="hljs-variable">$WSL_HOST_IP</span>:5037 <span class="hljs-comment"># 设置adb远程服务器地址</span><br></code></pre></td></tr></table></figure><p>然后，需要在Windows命令行终端cmd中重新启用adb server。</p><p>执行如下操作：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">adb<span class="hljs-selector-class">.exe</span> kill-server<br>adb<span class="hljs-selector-class">.exe</span> -<span class="hljs-selector-tag">a</span> -P <span class="hljs-number">5037</span> nodaemon server<br></code></pre></td></tr></table></figure><p>之后，WSL2中的adb就可以正常运行了！现在还有一点不好的是，cmd还不能关闭，因为adb server还在运行。</p><p>解决方案是建立一个vbs脚本并加入开机启动，或者每次手动双击运行。</p><p>vbs脚本如下，其中具体adb的路径和个人路径有关，需要自行修改。：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">CreateObject</span><span class="hljs-params">(<span class="hljs-string">&quot;WScript.Shell&quot;</span>)</span></span><span class="hljs-selector-class">.Run</span> <span class="hljs-string">&quot;%USERPROFILE%\AppData\Local\Android\Sdk\platform-tools\adb.exe kill-server&quot;</span>, <span class="hljs-number">0</span>, True<br><span class="hljs-function"><span class="hljs-title">CreateObject</span><span class="hljs-params">(<span class="hljs-string">&quot;WScript.Shell&quot;</span>)</span></span><span class="hljs-selector-class">.Run</span> <span class="hljs-string">&quot;%USERPROFILE%\AppData\Local\Android\Sdk\platform-tools\adb.exe -a -P 5037 nodaemon server&quot;</span>, <span class="hljs-number">0</span>, True<br></code></pre></td></tr></table></figure><p>我的脚本名称为<code>start_adb.vbs</code>，放到系统环境变量所在路径下，使用<code>Win-R</code>后输入脚本名称进行运行。</p><p><img src="https://i.loli.net/2021/04/01/wvF2UdahBZV3n8s.png" alt="运行vbs脚本"></p><h2 id="其他小工具"><a href="#其他小工具" class="headerlink" title="其他小工具"></a>其他小工具</h2><h3 id="PowerToys：小工具合集"><a href="#PowerToys：小工具合集" class="headerlink" title="PowerToys：小工具合集"></a>PowerToys：小工具合集</h3><p>这是微软自己出品的小工具集合，包含窗口管理器、颜色选择、批量重命名、快速启动等工具。</p><p><img src="https://i.loli.net/2021/03/31/6W8ASKJBjY5Twl7.png" alt="PowerToys设置界面"></p><p>窗口管理器（FancyZones）功能可以自定义各程序窗口的布局。</p><p>PowerToys Run也就是快速启动，勉强称为MacOS下<code>Alfred</code>的极简版吧，再简陋点还可以用<code>Win+S</code>使用Win10自己的搜索功能。</p><p>PowerToys Run可以通过快捷键<code>Win+Space</code>呼出一个对话框，执行各种快速操作，如启动应用、搜索文件、访问网址、切换窗口等，可惜不支持更多的自定义插件。</p><p><img src="https://i.loli.net/2021/03/31/saXFRx39pQj4kgT.png" alt="PowerToys Run输入chrome"></p><h3 id="uTools：快速启动"><a href="#uTools：快速启动" class="headerlink" title="uTools：快速启动"></a>uTools：快速启动</h3><p>也是MacOS下<code>Alfred</code>的替代品。</p><p>用uTools官方介绍来说，“uTools是一款极简、插件化、跨平台的现代桌面软件，只有一个简单的输入框，你可以在任何时候通过全局快捷键（默认<code>Alt+Space</code>）快速打开它”。</p><p>其实Windows平台下Wox可能大家推荐的多一些，但是个人觉得uTools的界面更好看，插件中心更易用一些。</p><p><img src="https://i.loli.net/2021/03/31/VrsB7Jd6Lc3UWeO.png" alt="uTools插件中心界面"></p><p>uTools的输入框支持拼音、中文联想，激活插件，执行功能。</p><p><img src="https://i.loli.net/2021/03/31/TG2oWcvKJkDlmFM.png" alt="uTools翻译插件使用界面"></p><p>总的来说，uTools还是不错的，但是发现PowerToys Run的切换当前运行的窗口功能似乎uTools并不支持。</p><p>更多扩展阅读：<a href="https://sspai.com/post/56739">uTools | 时隔一年，uTools 这位 Spotlight 新秀现在变得怎么样了?</a></p><h3 id="QuickLook：文件预览"><a href="#QuickLook：文件预览" class="headerlink" title="QuickLook：文件预览"></a>QuickLook：文件预览</h3><p>MacOS以及最新Ubuntu相同已经支持选中一个文件后，点击空格即可预览文件内容了，Windows还需要安装QuickLook。</p><p>QuickLook支持各种文件类型的插件，Markdown和Office文档都无压力。</p><p><img src="https://i.loli.net/2021/03/31/JuXiYV3wWqBm8t6.png" alt="QuickLook预览Markdown文件"></p><h3 id="CLCL：多粘贴板"><a href="#CLCL：多粘贴板" class="headerlink" title="CLCL：多粘贴板"></a>CLCL：多粘贴板</h3><p>Win10其实自己默认支持多剪切板，设置里搜索剪贴板即可，使用快捷键<code>Win+V</code>打开。</p><p>CLCL是一个比较久远的程序了，支持保存一些自定义的短语，设置界面<code>Template</code>右键<code>New Item</code>即可。</p><p><img src="https://i.loli.net/2021/03/31/FedtONEC2ZvAohV.png" alt="CLCL设置界面"></p><h3 id="Snipaste：截图工具"><a href="#Snipaste：截图工具" class="headerlink" title="Snipaste：截图工具"></a>Snipaste：截图工具</h3><p>Win10自带截图的快捷键是<code>Win-Shift-S</code>，支持窗口、全屏、自定义范围等截图模式。</p><p>但是Snipaste更强大一些，支持将刚截的图再贴回屏幕上，或者固定在屏幕上。这个功能在对比文字、图片细节时很好用。</p><p><img src="https://i.loli.net/2021/03/31/JEqf1nOpNZWe6dK.png" alt="Snipaste固定截图到屏幕"></p><h3 id="EasyWindowSwitcher：同应用窗口切换"><a href="#EasyWindowSwitcher：同应用窗口切换" class="headerlink" title="EasyWindowSwitcher：同应用窗口切换"></a>EasyWindowSwitcher：同应用窗口切换</h3><p>Win10现在的窗口切换器已经支持多个虚拟桌面，也支持类似MacOS的expose窗口展示的功能。但是，同一个应用多个窗口间的切换居然不支持。在Ubuntu和MacOS使用<code>Alt+`</code>即可切换同一个应用内的多个窗口。还好已经有人实现了这个功能，安装EasyWindowSwitcher接可，这个软件功能很单纯，就这一个功能，开机之后也找不到它，省心。</p><h3 id="Velocity：代码手册阅读"><a href="#Velocity：代码手册阅读" class="headerlink" title="Velocity：代码手册阅读"></a>Velocity：代码手册阅读</h3><p>MacOS下有一个神器叫做<code>dash</code>，整合了各种语言的参考手册，可以下载离线使用。Velocity就是Windows版的dash，界面还算ok，支持dash的文档源。</p><p><img src="https://i.loli.net/2021/03/31/2vc7KFy8hqMePTx.png" alt="Velocity界面"></p><p>在输入框中输入语言名称后，再输入<code>:</code>，就可以指定搜索该语言的文档。</p><p>该软件可以免费使用，但是每隔一段时间会弹出提示窗口，可以技术上去除。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>大概就是以上这些，已经足够我日常Windows平台的开发工作了。</p>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生产力工具</tag>
      
      <tag>Win10</tag>
      
      <tag>WSL</tag>
      
      <tag>使用指南</tag>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JEB2Deobsecure反混淆脚本修改记录</title>
    <link href="/2021/02/01/jeb2deobsureclass-deobfuscation-script-modification-record/"/>
    <url>/2021/02/01/jeb2deobsureclass-deobfuscation-script-modification-record/</url>
    
    <content type="html"><![CDATA[<h2 id="脚本仓库"><a href="#脚本仓库" class="headerlink" title="脚本仓库"></a>脚本仓库</h2><p>文章涉及脚本为<code>JEB2DeobscureClass.py</code>，原版仓库地址：<a href="https://github.com/S3cuRiTy-Er1C/JebScripts">S3cuRiTy-Er1C&#x2F;JebScripts</a>，修改版地址：<a href="https://github.com/wuruofan/JebScripts">wuruofan&#x2F;JebScripts</a></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>通常smali文件中的source字段用来说明这个smali文件对应的java文件是什么。</p><p>很多时候，为了便于定位崩溃问题，有些厂商在编译完成app release包时，仅做了代码混淆，并未去除smali文件的source字段。</p><p><img src="https://i.loli.net/2021/02/01/4A72VmzsotefwcK.png" alt="smali文件中source字段"></p><p><code>JEB2DeobscureClass.py</code>脚本的工作原理就是去取smali文件中source字段值，然后将类名重命名为该值。</p><h2 id="现有问题"><a href="#现有问题" class="headerlink" title="现有问题"></a>现有问题</h2><p>原脚本在某些情况下运行的很糟糕：</p><ol><li><p>混淆时未去除smali中source字段，而是统一修改成另外值时：即修改成非<code>*.java</code></p></li><li><p>修改成同名<code>*.java</code>：即多个smali对应一个Java文件</p></li></ol><p><strong>第一种情况</strong>会导致逆向包的所有类都被重命名为同一个奇怪的字符，哪怕是原来没有混淆的Activity名称也会被重命名，失去可读性。</p><p><strong>第二种情况</strong>会导致JEB对class解析出错，例如：<code>La/b/c/d.smali</code>和<code>La/b/c/e.smali</code>的<code>source</code>都是<code>ABC.java</code>，那么重命名完<code>a.b.c</code>下就会有两个<code>ABC</code>类，左侧大纲里视图里可以看到这两个同名类，但是点击第二个ABC类或者成员、方法的时候，JEB默认仍解析成第一个ABC类，没办法准确的定位到代码。</p><p>其中，第二个现象是逆向小米文件管理器时发现，同一个目录下，几个类都有相同的<code>.source &quot;StorageVolumeUtil.java&quot;</code>，如下图所示。导致JEB反编译的时候无法正确的定位到类，比如我想访问<code>O</code>，JEB会取第一个<code>StorageVolumeUtil</code>类也就是<code>L</code>，就找不到方法了！</p><p><img src="https://i.loli.net/2021/02/01/C3oizHjJrTPpx4y.png" alt="4个类的source字段相同"></p><p><img src="https://i.loli.net/2021/02/01/VUgrJ3pT8cfZsAl.png" alt="N个类的source字段相同"></p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><h3 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h3><p>修改了原脚本对source中字符串的判断，获取一个类的source字符串之后，判断不包含<code>.java</code>就不重命名，跳过此类。</p><h3 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h3><p>将<strong>source相同</strong> 且 <strong>同一个包目录下</strong> 的类重命名成不同的名字。</p><ol><li>遍历所有类，将发现的source字段保存成字典映射，对应一个嵌套字典，外层字典的键Key为待重命名成的类名，即<code>source</code>字段或者source字段加一个后缀组成的字符串。</li><li>内层嵌套字典的键Key为当前类地址的父路径，即所在模块名称，内层字典的值为列表，储存JEB重命名操作所需的<code>IDexUnit</code>和<code>IDexClass</code>对象，即<code>&#123; source, &#123; parent_pkg_name, [unit, class] &#125; &#125;</code>。</li><li>一旦发现已记录的source字段，就字符串自增为<code>source_N</code>判断下一个，直到找到不存在的source，并加入字典记录下来。</li><li>遍历字典调用JEB重命名接口。</li></ol><h2 id="修改结果"><a href="#修改结果" class="headerlink" title="修改结果"></a>修改结果</h2><p>可以看到小米文件管理器的<code>FileInformationFactory</code>有22个同名类，现在JEB可以双击正确的跳转显示了，其实有一部分是匿名内部类，可以再优化一下。</p><p><img src="https://i.loli.net/2021/01/31/mWbk9YwyBeVdlZQ.png" alt="22个同名类"></p><p><img src="https://i.loli.net/2021/02/01/fKUZn6kRFbd1O8S.png" alt="脚本运行日志"></p><h2 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h2><p>存在这么多同名source，除去混淆引入，其实还有个另外的可能，就是小米文件管理器使用了太多的匿名内部类。</p><p><img src="https://i.loli.net/2021/02/01/bOuwMkZrQvWRSIp.png" alt="匿名内部类"></p><p>可以看到有些类中<code>annotation</code>注解字段有说明自己是<code>name = null</code>的<code>InnerClass</code>，也指出自己的<code>EnclosingClass</code>是哪个类了。只是修改反混淆脚本解析时，发现当前是<code>InnerClass</code>时但是获取<code>EnclosingClass</code>的名称和已有已存在匿名类个数有点麻烦。</p><p>下一次优化再处理。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="https://bbs.pediy.com/thread-263011.htm">JEB脚本(一)(指令解析 反编译 抽象语法树) </a></p></li><li><p><a href="https://bbs.pediy.com/thread-263012.htm">JEB脚本(二)(交叉引用 调用图)</a></p></li><li><p><a href="https://www.pnfsoftware.com/jeb/apidoc/reference/packages.html">JEB2 API文档</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JEB2</tag>
      
      <tag>JEB2DeobscureClass</tag>
      
      <tag>Smali</tag>
      
      <tag>Deobfuscate</tag>
      
      <tag>反编译</tag>
      
      <tag>反混淆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++如何在类的构造函数中调用另一个构造函数</title>
    <link href="/2020/07/22/how-to-call-another-constructor-in-cpp/"/>
    <url>/2020/07/22/how-to-call-another-constructor-in-cpp/</url>
    
    <content type="html"><![CDATA[<h2 id="简单的需求"><a href="#简单的需求" class="headerlink" title="简单的需求"></a>简单的需求</h2><p>构造函数中调用另一个构造函数，这个操作在Java里其实是很普遍的，在C++里可能就会有点问题了。</p><span id="more"></span><p>举个例子，现在有这么一段程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataA</span> &#123;<br>  <span class="hljs-type">int</span> aa;<br>  <span class="hljs-type">int</span> bb;<br>  <span class="hljs-type">bool</span> cc;<br>  <span class="hljs-type">char</span> dd;<br><br>  <span class="hljs-built_in">DataA</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">bool</span> c, <span class="hljs-type">char</span> d) : <span class="hljs-built_in">aa</span>(a), <span class="hljs-built_in">bb</span>(b), <span class="hljs-built_in">cc</span>(c), <span class="hljs-built_in">dd</span>(d) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-type">int</span> a_;<br>  <span class="hljs-type">int</span> b_;<br>  <span class="hljs-type">bool</span> c_;<br><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">A</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;hello @default ctor!&quot;</span> &lt;&lt; std::endl; &#125;<br>  <br>  <span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">bool</span> c) : <span class="hljs-built_in">a_</span>(a), <span class="hljs-built_in">b_</span>(b), <span class="hljs-built_in">c_</span>(c) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;hello @ctor 1!&quot;</span> &lt;&lt; std::endl;<br>  &#125;<br>  <br>  <span class="hljs-built_in">A</span>(<span class="hljs-type">const</span> DataA&amp; data) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;hello @ctor 2!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">A</span>(data.aa, data.bb, data.cc);<br>  &#125;<br><br>  ~<span class="hljs-built_in">A</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;bye @dtor!&quot;</span> &lt;&lt; std::endl; &#125;<br><br>  <span class="hljs-keyword">friend</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-type">const</span> A&amp; a) &#123;<br>    os &lt;&lt; <span class="hljs-string">&quot;a: &quot;</span> &lt;&lt; a.a_ &lt;&lt; <span class="hljs-string">&quot;, b: &quot;</span> &lt;&lt; a.b_ &lt;&lt; <span class="hljs-string">&quot;, c: &quot;</span> &lt;&lt; a.c_;<br>    <span class="hljs-keyword">return</span> os;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-function">DataA <span class="hljs-title">data</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;x&#x27;</span>)</span></span>;<br><br>  std::cout &lt;&lt; <span class="hljs-string">&quot;before new A instance ...&quot;</span> &lt;&lt; std::endl;<br><br>  A* a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">A</span>(data);<br>  std::cout &lt;&lt; *a &lt;&lt; std::endl;<br><br>  std::cout &lt;&lt; <span class="hljs-string">&quot;before delete A instance ...&quot;</span> &lt;&lt; std::endl;<br>  <span class="hljs-keyword">delete</span> a;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>class A</code>拥有两个自定义构造函数，一个接受几个值进行成员初始化，另一个构造函数的本意接受一个结构体常量并进行成员初始化。</p><p>整个程序使用<code>g++ -g b.cpp -o b.out</code>编译是没问题的，但是执行的效果却不是想象中的abc分别为1、2、1，而是0、0、0。输出日志如下。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs smali">before<span class="hljs-built_in"> new </span>A<span class="hljs-built_in"> instance </span>...<br>hello @ctor 2!<br>hello @ctor 1!<br>bye @dtor!<br>a: 0, b: 0, c: 0<br>before delete A<span class="hljs-built_in"> instance </span>...<br>bye @dtor!<br></code></pre></td></tr></table></figure><p><strong>由于构造函数并没有返回值，在构造函数里调用另一个构造函数，只会导致重新声明并初始化一个新的匿名对象，并不会初始化原来的<code>this</code>对象，这个匿名对象在构造函数结束后便销毁了。</strong></p><p>上面日志也可以看出来，在<code>ctor 2</code>调用后紧接着调用了<code>ctor 1</code>和<code>dtor</code>完成了内部匿名对象的实例化和销毁，用<code>lldb</code>或者<code>gdb</code>调试也可以看的更清楚些。之前编译时已经使用了<code>-g</code>参数加入了调试信息，直接<code>lldb b.out</code>运行加断点即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">(lldb) s<br>hello @ctor 2!<br>Process 17565 stopped<br>* thread <span class="hljs-comment">#1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step in</span><br>    frame <span class="hljs-comment">#0: 0x0000000100000f85 b.out`A::A(this=0x0000000100304150, data=0x00007ffeefbff4d0) at b.cpp:38:7</span><br>   35<br>   36    A(const DataA&amp; data) &#123;<br>   37      std::cout &lt;&lt; <span class="hljs-string">&quot;hello @ctor 2!&quot;</span> &lt;&lt; <span class="hljs-string">std::endl;</span><br><span class="hljs-string">-&gt; 38      A(data.aa, data.bb, data.cc);</span><br><span class="hljs-string">   39    &#125;</span><br><span class="hljs-string">   40</span><br><span class="hljs-string">   41    ~A() &#123; std</span>::cout &lt;&lt; <span class="hljs-string">&quot;bye @dtor!&quot;</span> &lt;&lt; <span class="hljs-string">std::endl; &#125;</span><br><span class="hljs-string">Target 0: (b.out) stopped.</span><br><span class="hljs-string">(lldb) p this</span><br><span class="hljs-string">(A *) $0 = 0x0000000100304150</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>可以看到在使用<code>ctor 2</code>构造A实例时，this指针的地址为<code>0x0000000100304150</code>，我们在继续单步执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">Process 17565 stopped<br>* thread <span class="hljs-comment">#1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step in</span><br>    frame <span class="hljs-comment">#0: 0x0000000100001024 b.out`A::A(this=0x00007ffeefbff430, a=1, b=2, c=true) at b.cpp:32:32</span><br>   29   public:<br>   30    <span class="hljs-function"><span class="hljs-title">A</span></span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;hello @default ctor!&quot;</span> &lt;&lt; <span class="hljs-string">std::endl; &#125;</span><br><span class="hljs-string">   31</span><br><span class="hljs-string">-&gt; 32    A(int a, int b, bool c) : a_(a), b_(b), c_(c) &#123;</span><br><span class="hljs-string">   33      std</span>::cout &lt;&lt; <span class="hljs-string">&quot;hello @ctor 1!&quot;</span> &lt;&lt; <span class="hljs-string">std::endl;</span><br><span class="hljs-string">   34    &#125;</span><br><span class="hljs-string">   35</span><br><span class="hljs-string">Target 0: (b.out) stopped.</span><br><span class="hljs-string">(lldb) p this</span><br><span class="hljs-string">(A *) $1 = 0x00007ffeefbff430</span><br></code></pre></td></tr></table></figure><p>执行到调用<code>ctor 1</code>时，再次打印this指针，发现此时this指向<code>0x00007ffeefbff430</code>，使用<code>bt</code>命令查看调用堆栈也可以看到this指针的变化，可以看到此时类中成员a、b、c的值都是我们所期望的，可惜下一步就消失了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">(lldb) bt<br>* thread <span class="hljs-comment">#1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step in</span><br>  * frame <span class="hljs-comment">#0: 0x0000000100001059 b.out`A::A(this=0x00007ffeefbff430, a=1, b=2, c=true) at b.cpp:34:3</span><br>    frame <span class="hljs-comment">#1: 0x0000000100000ff0 b.out`A::A(this=0x00007ffeefbff430, a=1, b=2, c=true) at b.cpp:32:49</span><br>    frame <span class="hljs-comment">#2: 0x0000000100000fac b.out`A::A(this=0x0000000100304150, data=0x00007ffeefbff4d0) at b.cpp:38:5</span><br>    frame <span class="hljs-comment">#3: 0x0000000100000e4d b.out`A::A(this=0x0000000100304150, data=0x00007ffeefbff4d0) at b.cpp:36:24</span><br>    frame <span class="hljs-comment">#4: 0x0000000100000c4e b.out`main at b.cpp:54:14</span><br>    frame <span class="hljs-comment">#5: 0x00007fff6d981cc9 libdyld.dylib`start + 1</span><br></code></pre></td></tr></table></figure><h3 id="推荐的做法"><a href="#推荐的做法" class="headerlink" title="推荐的做法"></a>推荐的做法</h3><p>那么，应该怎么做才是正确的呢？</p><p>通常推荐做法有两种，一是把通用的初始化逻辑抽出来放到类似<code>init()</code>的函数中实现，在不同构造函数中分别调用；另一种就是利用C++11的新特性：**委托构造函数(delegating constructor)**来实现。</p><p>委托构造函数的语法有点类似成员初始化列表，在构造函数声明之后使用冒号+需要调用的构造函数名即可。上面的<code>class A</code>中现在可以增加一个新的构造函数，委托给<code>ctor 1</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">bool</span> c) : <span class="hljs-built_in">A</span>(a, <span class="hljs-number">22</span>, c) &#123;<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;hello @ctor 3!&quot;</span> &lt;&lt; std::endl;<br>  b_ = <span class="hljs-number">33</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，被委托的构造函数只能有一个，否则编译会提示错误<code>error: an initializer for a delegating constructor must appear alone</code>。</p><p>使用委托构造函数后，编译需指明C++11版本，即<code>g++ -g b.cpp -o b.out -std=c++11</code>。</p><h3 id="极不推荐的做法"><a href="#极不推荐的做法" class="headerlink" title="极不推荐的做法"></a>极不推荐的做法</h3><p>当然，还有一种<strong>极不推荐</strong>的做法也可以达到目的：<del><code>placement new</code></del>，也就是在已经分配好的内存区域重新实例化对象。cpp-references上有如下说明：</p><blockquote><p>Placement new</p><p>If placement_params are provided, they are passed to the allocation function as additional arguments. Such allocation functions are known as “placement new”, after the standard allocation function void* operator new(std::size_t, void*), which simply returns its second argument unchanged. This is used to construct objects in allocated storage:</p></blockquote><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span>* ptr = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-built_in">sizeof</span>(T)]; <span class="hljs-comment">// allocate memory</span><br>T* tptr = <span class="hljs-built_in">new</span>(ptr) T;            <span class="hljs-comment">// construct in allocated storage (&quot;place&quot;)</span><br>tptr-&gt;~<span class="hljs-built_in">T</span>();                      <span class="hljs-comment">// destruct</span><br><span class="hljs-keyword">delete</span>[] ptr;                    <span class="hljs-comment">// deallocate memory</span><br></code></pre></td></tr></table></figure></blockquote><p>上面代码中的<code>ctor 2</code>用<code>placement new</code>实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">A</span>(<span class="hljs-type">const</span> DataA&amp; data) &#123;<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;hello @ctor 2!&quot;</span> &lt;&lt; std::endl;<br>  <span class="hljs-keyword">this</span>-&gt;~<span class="hljs-built_in">A</span>();<br>  <span class="hljs-keyword">new</span> (<span class="hljs-keyword">this</span>) <span class="hljs-built_in">A</span>(data.aa, data.bb, data.cc);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先销毁了原实例，并在原this指针位置构造了一个新的A实例去替代原实例，运行后日志如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">before new A instance ...<br>hello @ctor 2!<br><span class="hljs-built_in">bye</span> @dtor!<br>hello @ctor 1!<br>a: 1, b: 2, c: 1<br>before delete A instance ...<br><span class="hljs-built_in">bye</span> @dtor!<br></code></pre></td></tr></table></figure><p>我们在用lldb调试一下，看一下调用构造函数<code>ctor 1</code>时的堆栈信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">(lldb) bt<br>* thread <span class="hljs-comment">#1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step in</span><br>  * frame <span class="hljs-comment">#0: 0x0000000100001184 b.out`A::A(this=0x00000001002052b0, a=1, b=2, c=true) at b.cpp:32:32</span><br>    frame <span class="hljs-comment">#1: 0x0000000100001150 b.out`A::A(this=0x00000001002052b0, a=1, b=2, c=true) at b.cpp:32:49</span><br>    frame <span class="hljs-comment">#2: 0x0000000100001113 b.out`A::A(this=0x00000001002052b0, data=0x00007ffeefbff4d0) at b.cpp:39:16</span><br>    frame <span class="hljs-comment">#3: 0x0000000100000f9d b.out`A::A(this=0x00000001002052b0, data=0x00007ffeefbff4d0) at b.cpp:36:24</span><br>    frame <span class="hljs-comment">#4: 0x0000000100000dbe b.out`main at b.cpp:60:14</span><br>    frame <span class="hljs-comment">#5: 0x00007fff6d981cc9 libdyld.dylib`start + 1</span><br></code></pre></td></tr></table></figure><p>此时，<code>frame #2</code>和<code>frame #1</code>包含的A实例的this指针地址时相同的！可以看到，我们最早期望的目标是达到了，但是，用cpp-references上的原话来说，这种方式是<strong>ill-formed</strong>，病态的。</p><p><strong>使用<code>placement new</code>操作最危险的地方在于，需要编程者自己去注意原空间的分配是否足够、原空间的内存对齐与否会不会对新构造对象产生影响，还需要自己负责去析构实例、去释放空间，因为一旦使用这种方法，除了上帝和编程者，编译器和运行环境是无法检测到这些错误的。</strong></p><p>以上。</p><center> --- END --- </center><p>参考链接：</p><ol><li><a href="https://isocpp.org/wiki/faq/ctors#init-methods" title="Can one constructor of a class call another constructor of the same class to initialize the this object?">https://isocpp.org/wiki/faq/ctors#init-methods</a></li><li><a href="https://isocpp.org/wiki/faq/dtors#placement-new" title="What is “placement new” and why would I use it?">https://isocpp.org/wiki/faq/dtors#placement-new</a></li><li><a href="https://www.cnblogs.com/chio/archive/2007/10/20/931043.html" title="从一道题谈C++中构造函数调用构造函数">https://www.cnblogs.com/chio/archive/2007/10/20/931043.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>call another constructor</tag>
      
      <tag>cpp</tag>
      
      <tag>delegating constructor</tag>
      
      <tag>placement new</tag>
      
      <tag>委托构造函数</tag>
      
      <tag>调用另一个构造函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS CMake链接Curl静态库找不到ldap相关符号问题</title>
    <link href="/2020/07/09/macos-cmake-static-link-libcurl-ldap-related-undefined-symbols-error/"/>
    <url>/2020/07/09/macos-cmake-static-link-libcurl-ldap-related-undefined-symbols-error/</url>
    
    <content type="html"><![CDATA[<p>具体编译过程和前两篇文章类似，但是在链接<code>libcurl.a</code>的时候出现找不到ldap相关符号的提示：</p><span id="more"></span><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sqf">Undefined symbols <span class="hljs-keyword">for</span> architecture x86_64:<br>  <span class="hljs-string">&quot;_ber_free&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_err2string&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_first_attribute&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_first_entry&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_free_urldesc&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_get_dn&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_get_values_len&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_init&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_memfree&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_msgfree&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_next_attribute&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_next_entry&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_search_s&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_set_option&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_simple_bind_s&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_unbind_s&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_url_parse&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>  <span class="hljs-string">&quot;_ldap_value_free_len&quot;</span>, referenced <span class="hljs-keyword">from</span>:<br>      <span class="hljs-variable">_Curl_ldap</span> <span class="hljs-built_in">in</span> libcurl.a(libcurl_la-ldap.o)<br>ld: symbol(s) <span class="hljs-built_in">not</span> found <span class="hljs-keyword">for</span> architecture x86_64<br></code></pre></td></tr></table></figure><p>看上去是找不到<code>ldap</code>相关符号，在Ubuntu上编译没遇到这个问题，查了下资料，<code>LDAP</code>是一种轻量级文件夹访问协议（Lightweight Directory Access Protocol），默认MacOS是支持这个协议的。</p><p>翻了下配置时的输出日志：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">curl version:</span>     <span class="hljs-number">7.70</span><span class="hljs-number">.0</span><br><span class="hljs-attr">SSL:</span>              <span class="hljs-string">enabled</span> <span class="hljs-string">(OpenSSL)</span><br><span class="hljs-attr">SSH:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-&#123;libssh,libssh2&#125;)</span><br><span class="hljs-attr">zlib:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">brotli:</span>           <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-brotli)</span><br><span class="hljs-attr">GSS-API:</span>          <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-gssapi)</span><br><span class="hljs-attr">TLS-SRP:</span>          <span class="hljs-string">enabled</span><br><span class="hljs-attr">resolver:</span>         <span class="hljs-string">POSIX</span> <span class="hljs-string">threaded</span><br><span class="hljs-attr">IPv6:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">Unix sockets:</span>     <span class="hljs-string">enabled</span><br><span class="hljs-attr">IDN:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-&#123;libidn2,winidn&#125;)</span><br><span class="hljs-attr">Build libcurl:</span>    <span class="hljs-string">Shared=no,</span> <span class="hljs-string">Static=yes</span><br><span class="hljs-attr">Built-in manual:</span>  <span class="hljs-string">enabled</span><br><span class="hljs-string">--libcurl</span> <span class="hljs-attr">option:</span> <span class="hljs-string">enabled</span> <span class="hljs-string">(--disable-libcurl-option)</span><br><span class="hljs-attr">Verbose errors:</span>   <span class="hljs-string">enabled</span> <span class="hljs-string">(--disable-verbose)</span><br><span class="hljs-attr">Code coverage:</span>    <span class="hljs-string">disabled</span><br><span class="hljs-attr">SSPI:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-sspi)</span><br><span class="hljs-attr">ca cert bundle:</span>   <span class="hljs-string">/etc/ssl/cert.pem</span><br><span class="hljs-attr">ca cert path:</span>     <span class="hljs-literal">no</span><br><span class="hljs-attr">ca fallback:</span>      <span class="hljs-literal">no</span><br><span class="hljs-attr">LDAP:</span>             <span class="hljs-string">enabled</span> <span class="hljs-string">(OpenLDAP)</span><br><span class="hljs-attr">LDAPS:</span>            <span class="hljs-string">enabled</span><br><span class="hljs-attr">RTSP:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">RTMP:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-librtmp)</span><br><span class="hljs-attr">Metalink:</span>         <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-libmetalink)</span><br><span class="hljs-attr">PSL:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(libpsl</span> <span class="hljs-string">not</span> <span class="hljs-string">found)</span><br><span class="hljs-attr">Alt-svc:</span>          <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-alt-svc)</span><br><span class="hljs-attr">HTTP2:</span>            <span class="hljs-string">disabled</span> <span class="hljs-string">(--with-nghttp2)</span><br><span class="hljs-attr">HTTP3:</span>            <span class="hljs-string">disabled</span> <span class="hljs-string">(--with-ngtcp2,</span> <span class="hljs-string">--with-quiche)</span><br><span class="hljs-attr">ESNI:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-esni)</span><br><span class="hljs-attr">Protocols:</span>        <span class="hljs-string">DICT</span> <span class="hljs-string">FILE</span> <span class="hljs-string">FTP</span> <span class="hljs-string">FTPS</span> <span class="hljs-string">GOPHER</span> <span class="hljs-string">HTTP</span> <span class="hljs-string">HTTPS</span> <span class="hljs-string">IMAP</span> <span class="hljs-string">IMAPS</span> <span class="hljs-string">LDAP</span> <span class="hljs-string">LDAPS</span> <span class="hljs-string">POP3</span> <span class="hljs-string">POP3S</span> <span class="hljs-string">RTSP</span> <span class="hljs-string">SMB</span> <span class="hljs-string">SMBS</span> <span class="hljs-string">SMTP</span> <span class="hljs-string">SMTPS</span> <span class="hljs-string">TELNET</span> <span class="hljs-string">TFTP</span><br><span class="hljs-attr">Features:</span>         <span class="hljs-string">SSL</span> <span class="hljs-string">IPv6</span> <span class="hljs-string">UnixSockets</span> <span class="hljs-string">libz</span> <span class="hljs-string">AsynchDNS</span> <span class="hljs-string">NTLM</span> <span class="hljs-string">NTLM_WB</span> <span class="hljs-string">TLS-SRP</span> <span class="hljs-string">HTTPS-proxy</span><br></code></pre></td></tr></table></figure><p>可以看到<code>LDAP</code>和<code>LDAPS</code>功能都使能了，而且识别到了<code>OpenLDAP</code>，对比了之前文章里的配置，Linux版本编译Curl的时候这两个选项都是<code>no</code>。</p><p>查看了Curl官网上关于编译的简要说明，用<code>curl-config --libs</code>查看需要链接的库，也多了<code>-lldap</code>这一项，因此是链接过程需要指明链接<code>ldap</code>相关库才可以。</p><p>现在有<strong>几种解决方法</strong>：</p><ol><li>禁用libcurl中ldap相关功能：在<code>./configure</code>配置的时候加上<code>--disable-ldap --disable-ldaps</code>选项。</li><li>下载ldap源码，像zlib一样编译静态库并链接。</li><li>链接系统ldap库：添加额外的链接<code>target_link_libraries(my_target -lldap)</code>即可。</li></ol><p>都可以解决问题。</p><center>--- END ---</center>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
      <tag>curl</tag>
      
      <tag>link error</tag>
      
      <tag>undefined symbols</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim-gutentags插件异常问题解决 &amp; gtags源码编译安装</title>
    <link href="/2020/07/07/ubuntu-vim-gutentags-work-abnormally-solved-with-universal-ctags-and-global-recompiled/"/>
    <url>/2020/07/07/ubuntu-vim-gutentags-work-abnormally-solved-with-universal-ctags-and-global-recompiled/</url>
    
    <content type="html"><![CDATA[<p>在ubuntu上gtags总是运行不正常，<code>ctrl-]</code>无法找到tags，<code>gutentags</code>有报错信息，今天找了下原因，记录下坎坷过程。</p><p>首先在<code>.vimrc</code>中加上<code>let g:gutentags_trace = 1</code>，然后就可以用<code>:messages</code>查看具体出错日志。</p><p>发现<strong>默认<code>exuberant-ctags</code>不支持<code>--output-format=e-ctags</code>，这个参数是给universal-ctags(gtags)用的，因此生成tags数据库出错了。</strong></p><h2 id="apt仓库安装universal-ctags"><a href="#apt仓库安装universal-ctags" class="headerlink" title="apt仓库安装universal-ctags"></a>apt仓库安装universal-ctags</h2><p><strong>在Ubuntu的apt仓库用<code>sudo apt-get install global</code>安装。</strong></p><p>实际运行发现生成tags的时候在<code>~/.cache/tags/xxx_project/</code>目录下有gtags相关文件，<strong>但是始终不去生成<code>~/.cache/tags/xxx_project.tags</code>数据库文件</strong>，这就是找不到tags的原因。</p><h3 id="用snap安装universal-ctags"><a href="#用snap安装universal-ctags" class="headerlink" title="用snap安装universal-ctags"></a>用snap安装universal-ctags</h3><p><strong>用<code>sudo snap install universal-ctags</code>安装。</strong></p><p>实际运行发现生成tags数据库的时候遇到权限错误：</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sml">gutentags: [job stderr]: [<span class="hljs-symbol">&#x27;ctags</span>: cannot <span class="hljs-keyword">open</span> <span class="hljs-built_in">option</span> file <span class="hljs-string">&quot;/home/parallels/.vim/bundle/v</span><br><span class="hljs-string">im-gutentags/res/ctags_recursive.options&quot;</span> : <span class="hljs-type">Permission</span> denied&#x27;, <span class="hljs-string">&#x27;&#x27;</span>]<br></code></pre></td></tr></table></figure><p>把ctags_recursive.options文件的权限改成666或者777，仍然是这个错误，依旧无法生成tags数据库。</p><p>搜了很久在一个网站看到有人遇到相同的问题，似乎是snap上gtags的问题。</p><blockquote><p>This is more of a warning to other users since i discovered the hard-way that universal-ctags installed by snap is NOT compatible with gutentags. For me it manifested as permission errors reading the ctags_recursive.options file, but I could imagine different file perm errors depending on your config. The fs limitations are mentioned at <a href="https://snapcraft.io/universal-ctags">https://snapcraft.io/universal-ctags</a> and in <a href="https://github.com/universal-ctags/ctags-snap/issues/26">https://github.com/universal-ctags/ctags-snap/issues/26</a>. I don’t think there is anything for gutentags to do except maybe include a warning in the doc about snap installed ctags.</p><p>参考：<a href="https://www.bountysource.com/issues/90002621-universal-ctags-installed-by-snap-not-compatible-with-vim-gutentags" title="universal-ctags installed by snap not compatible with vim-gutentags">https://www.bountysource.com/issues/90002621-universal-ctags-installed-by-snap-not-compatible-with-vim-gutentags</a></p></blockquote><h2 id="源码安装universal-ctags"><a href="#源码安装universal-ctags" class="headerlink" title="源码安装universal-ctags"></a>源码安装universal-ctags</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/universal-ctags/ctags.git<br><span class="hljs-built_in">cd</span> ctags<br>./autogen.sh<br>./configure<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>其中，<code>./autogen.sh</code>这一步使用<code>autotools</code>进行配置，依赖<code>autoconf</code>和<code>pk-config</code>包，需要apt安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install autoconf<br>sudo apt-get install pk-config<br></code></pre></td></tr></table></figure><p>编译安装完成之后，默认会装到<code>/usr/local/bin/ctags</code>目录，<code>ctags --version</code>已经可以看到<code>Universal Ctags</code>相关字样了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Universal</span> Ctags <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>(<span class="hljs-number">3671</span>ad72), Copyright (C) <span class="hljs-number">2015</span> Universal Ctags Team<br><span class="hljs-attribute">Universal</span> Ctags is derived from Exuberant Ctags.<br><span class="hljs-attribute">Exuberant</span> Ctags <span class="hljs-number">5</span>.<span class="hljs-number">8</span>, Copyright (C) <span class="hljs-number">1996</span>-<span class="hljs-number">2009</span> Darren Hiebert<br>  <span class="hljs-attribute">Compiled</span>: May  <span class="hljs-number">7</span> <span class="hljs-number">2020</span>, <span class="hljs-number">17</span>:<span class="hljs-number">26</span>:<span class="hljs-number">30</span><br>  <span class="hljs-attribute">URL</span>: https://ctags.io/<br>  <span class="hljs-attribute">Optional</span> compiled features: +wildcards, +regex, +iconv, +option-directory, +packcc<br></code></pre></td></tr></table></figure><p>然后世界就恢复正常了！tags数据库已经可以正常生成了。</p><h2 id="源码安装gtags（GNU-Global）"><a href="#源码安装gtags（GNU-Global）" class="headerlink" title="源码安装gtags（GNU Global）"></a>源码安装gtags（GNU Global）</h2><p><code>vim-gutentags</code>插件此时还没法用<code>cscope</code>相关命令，搜索符号引用相关功能，还需要<code>gtags</code>支持，即<code>GNU Global</code>，是一套跨环境的源码标签系统（GNU GLOBAL is a source code tagging system that works the same way across diverse environments）。</p><p>可以使用<code>sudo apt-get install global</code>从默认源安装，但是，以防万一，还是源码编译安装好了。</p><p>从<a href="https://www.gnu.org/software/global/download.html" title="Getting GLOBAL">https://www.gnu.org/software/global/download.html</a>官网下载最新软件包，配置、编译并安装。</p><blockquote><p>注意：安装过程中，会依赖<code>curses</code>库，执行<code>./configure</code>的时候会提示<code>curses library is required but not found</code>，需要执行<code>sudo apt-get install libncurses5-dev</code>安装相关库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://tamacom.com/global/global-6.6.4.tar.gz<br>tar xzvf global-6.6.4.tar.gz<br><span class="hljs-built_in">cd</span> global-6.6.4<br><br>./configure --with-universal-ctags=`<span class="hljs-built_in">which</span> ctags` <span class="hljs-comment"># 指定使用universal-ctags路径</span><br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>默认安装到<code>/usr/local/bin/gtags</code>，运行<code>gtags --version</code>，得到如下信息。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">gtags (GNU <span class="hljs-keyword">GLOBAL</span>) <span class="hljs-number">6.6</span><span class="hljs-number">.4</span><br>Powered <span class="hljs-keyword">by</span> Berkeley DB <span class="hljs-number">1.85</span>.<br>Copyright (c) <span class="hljs-number">1996</span><span class="hljs-number">-2019</span> Tama Communications Corporation<br>License GPLv3+: GNU GPL <span class="hljs-keyword">version</span> <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> later &lt;http://www.gnu.org/licenses/gpl.html&gt;<br>This <span class="hljs-keyword">is</span> free software; you are free <span class="hljs-keyword">to</span> change <span class="hljs-keyword">and</span> redistribute it.<br>There <span class="hljs-keyword">is</span> <span class="hljs-keyword">NO</span> WARRANTY, <span class="hljs-keyword">to</span> the extent permitted <span class="hljs-keyword">by</span> law.<br></code></pre></td></tr></table></figure><p>大功告成！</p><hr><p>最后，附上tags相关的VIM配置。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-string">&quot;&quot;</span>设置标签<span class="hljs-keyword">tags</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">tags</span>=./.<span class="hljs-keyword">tags</span>;,.<span class="hljs-keyword">tags</span><br><span class="hljs-comment">&quot;设置根据打开文件自动更换目录</span><br><span class="hljs-comment">&quot;set autochdir</span><br><br><span class="hljs-comment">&quot; gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_project_root</span> = [<span class="hljs-string">&#x27;.root&#x27;</span>, <span class="hljs-string">&#x27;.svn&#x27;</span>, <span class="hljs-string">&#x27;.git&#x27;</span>, <span class="hljs-string">&#x27;.hg&#x27;</span>, <span class="hljs-string">&#x27;.project&#x27;</span>]<br><span class="hljs-comment">&quot; 所生成的数据文件的名称</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_tagfile</span> = <span class="hljs-string">&#x27;.tags&#x27;</span><br><br><span class="hljs-comment">&quot; 同时开启 ctags 和 gtags 支持：</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_modules</span> = []<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">executable</span>(<span class="hljs-string">&#x27;ctags&#x27;</span>)<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_modules</span> += [<span class="hljs-string">&#x27;ctags&#x27;</span>]<br><span class="hljs-keyword">endif</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">executable</span>(<span class="hljs-string">&#x27;gtags-cscope&#x27;</span>) &amp;&amp; <span class="hljs-built_in">executable</span>(<span class="hljs-string">&#x27;gtags&#x27;</span>)<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_modules</span> += [<span class="hljs-string">&#x27;gtags_cscope&#x27;</span>]<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment">&quot; 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">s:vim_tags</span> = <span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;~/.cache/tags&#x27;</span>)<br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_cache_dir</span> = <span class="hljs-variable">s:vim_tags</span><br><span class="hljs-string">&quot; 检测 ~/.cache/tags 不存在就新建 &quot;</span><br><span class="hljs-keyword">if</span> !isdirectory(<span class="hljs-variable">s:vim_tags</span>)<br>   silent! <span class="hljs-keyword">call</span> <span class="hljs-built_in">mkdir</span>(<span class="hljs-variable">s:vim_tags</span>, <span class="hljs-string">&#x27;p&#x27;</span>)<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment">&quot; 配置 ctags 的参数</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_extra_args</span> = [<span class="hljs-string">&#x27;--fields=+niazSl&#x27;</span>]<br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_extra_args</span> += [<span class="hljs-string">&#x27;--c++-kinds=+px&#x27;</span>]<br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_extra_args</span> += [<span class="hljs-string">&#x27;--c-kinds=+px&#x27;</span>]<br><br><span class="hljs-comment">&quot; Get ctags version</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ctags_version</span> = <span class="hljs-built_in">system</span>(<span class="hljs-string">&#x27;ctags --version&#x27;</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]<br><br><span class="hljs-comment">&quot; 如果使用 universal ctags 需要增加下面一行</span><br><span class="hljs-keyword">if</span> <span class="hljs-variable">g:ctags_version</span> == <span class="hljs-string">&quot;Universal&quot;</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_extra_args</span> += [<span class="hljs-string">&#x27;--extras=+q&#x27;</span>, <span class="hljs-string">&#x27;--output-format=e-ctags&#x27;</span>]<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment">&quot; 禁用 gutentags 自动加载 gtags 数据库的行为</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_auto_add_gtags_cscope</span> = <span class="hljs-number">1</span><br><span class="hljs-comment">&quot;Change focus to quickfix window after search (optional).</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_plus_switch</span> = <span class="hljs-number">1</span><br><span class="hljs-comment">&quot;Enable advanced commands: GutentagsToggleTrace, etc.</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_define_advanced_commands</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_trace</span> = <span class="hljs-number">0</span><br><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">cscope</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&quot;cscope&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">executable</span>(<span class="hljs-string">&#x27;gtags-cscope&#x27;</span>) &amp;&amp; <span class="hljs-built_in">executable</span>(<span class="hljs-string">&#x27;gtags&#x27;</span>)<br>        <span class="hljs-comment">&quot;禁用原GscopeFind按键映射</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_plus_nomap</span> = <span class="hljs-number">1</span><br>        <span class="hljs-comment">&quot;Find this C symbol 查找C语言符号，即查找函数名、宏、枚举值等出现的地方</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;s :GscopeFind s <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find this difinition 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;g :GscopeFind g <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find functions called by this function 查找本函数调用的函数</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;d :GscopeFind d <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find functions calling this function 查找调用本函数的函数</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">c</span> :GscopeFind <span class="hljs-keyword">c</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find this text string 查找指定的字符串</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;t :GscopeFind t <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find this egrep pattern 查找egrep模式，相当于egrep功能，但查找速度快多了</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">e</span> :GscopeFind <span class="hljs-keyword">e</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find this file 查找并打开文件，类似vim的能</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">f</span> :GscopeFind <span class="hljs-keyword">f</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cfile&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;Find files #including this file 查找包含本文件的文件</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;i :GscopeFind i ^<span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cfile&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span>$<span class="hljs-symbol">&lt;CR&gt;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">set</span> csto=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">set</span> <span class="hljs-keyword">cst</span><br>        <span class="hljs-keyword">set</span> nocsverb<br>        <span class="hljs-comment">&quot; add any database in current directory</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">filereadable</span>(<span class="hljs-string">&quot;cscope.out&quot;</span>)<br>            <span class="hljs-keyword">cs</span> <span class="hljs-built_in">add</span> <span class="hljs-keyword">cscope</span>.out<br>        <span class="hljs-keyword">endif</span><br>        <span class="hljs-keyword">set</span> csverb<br><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;s :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> s <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;g :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> g <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;d :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> d <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">c</span> :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> <span class="hljs-keyword">c</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;t :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> t <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">e</span> :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> <span class="hljs-keyword">e</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cword&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;<span class="hljs-keyword">f</span> :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> <span class="hljs-keyword">f</span> <span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cfile&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-keyword">nmap</span> &lt;C-\&gt;i :<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> i ^<span class="hljs-symbol">&lt;C-R&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;&lt;cfile&gt;&quot;</span>)<span class="hljs-symbol">&lt;CR&gt;</span>$<span class="hljs-symbol">&lt;CR&gt;</span><br><br>        <span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;C-F12&gt;</span> :<span class="hljs-keyword">cs</span> <span class="hljs-built_in">add</span> <span class="hljs-keyword">cscope</span>.out<span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;F12用ctags生成tags</span><br>        <span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;F12&gt;</span> :!ctags -R --<span class="hljs-keyword">c</span>++-kinds=+<span class="hljs-keyword">p</span> --fields=+ialS --extra=+q -<span class="hljs-keyword">f</span> .<span class="hljs-keyword">tags</span><span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot;--language-force=C++</span><br>        <span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;S-F12&gt;</span> :!cscope -Rbkq<span class="hljs-symbol">&lt;CR&gt;</span><br>        <span class="hljs-comment">&quot; cscope参数</span><br>        <span class="hljs-comment">&quot;-R: 在生成索引文件时，搜索子目录树中的代码</span><br>        <span class="hljs-comment">&quot;-b: 只生成索引文件，不进入cscope的界面</span><br>        <span class="hljs-comment">&quot;-d: 只调出cscope gui界面，不跟新cscope.out</span><br>        <span class="hljs-comment">&quot;-k: 在生成索引文件时，不搜索/usr/include目录</span><br>        <span class="hljs-comment">&quot;-q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度</span><br>        <span class="hljs-string">&quot;-i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用&quot;</span>-<span class="hljs-comment">&quot;，表示由标准输入获得文件列表。</span><br>        <span class="hljs-comment">&quot;-I dir: 在-I选项指出的目录中查找头文件</span><br>        <span class="hljs-comment">&quot;-u: 扫描所有文件，重新生成交叉索引文件</span><br>        <span class="hljs-comment">&quot;-C: 在搜索时忽略大小写</span><br>        <span class="hljs-comment">&quot;-P path: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用</span><br>    <span class="hljs-keyword">endif</span><br><span class="hljs-keyword">endif</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GNU Global</tag>
      
      <tag>gtags</tag>
      
      <tag>gtags-scope</tag>
      
      <tag>source code compilation</tag>
      
      <tag>Universal Ctags</tag>
      
      <tag>vim</tag>
      
      <tag>vim-gutentags</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake 跨平台交叉编译zlib、OpenSSL、Curl</title>
    <link href="/2020/06/09/cmake-cross-compile-static-zlib-openssl-curl/"/>
    <url>/2020/06/09/cmake-cross-compile-static-zlib-openssl-curl/</url>
    
    <content type="html"><![CDATA[<p>项目遇到跨平台交叉编译的问题，需要针对<code>mips64el</code>架构和<code>aarch64</code>架构进行编译。</p><p>CMake本身支持通过指定交叉编译工具链的方式来完成跨平台编译的，通过<code>cmake -DCMAKE_TOOLCHAIN_FILE=&lt;/path/of/toolchain/file&gt; ..</code>指定交叉编译工具链即可。</p><p>以<code>mips64el.toolchain.cmake</code>为例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">2.6</span>.<span class="hljs-number">3</span>)<br><span class="hljs-keyword">set</span>(CMAKE_SYSTEM_NAME Linux)<br><span class="hljs-keyword">set</span>(CMAKE_SYSTEM_PROCESSOR mips64el)<br><br><span class="hljs-keyword">set</span>(CROSS_COMPILER_PREFIX <span class="hljs-string">&quot;/usr/bin/mips64el-linux-gnuabi64&quot;</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_C_COMPILER             <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-gcc)<br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS                <span class="hljs-string">&quot;-O3 -fPIC&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS_DEBUG          <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -g -Wall&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS_MINSIZEREL     <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -Os -DNDEBUG&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS_RELEASE        <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -O4 -DNDEBUG&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS_RELWITHDEBINFO <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -O2 -g&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_COMPILER             <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-g++)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS                <span class="hljs-string">&quot;-O3 -fPIC&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS_DEBUG          <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -g -Wall&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS_MINSIZEREL     <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -Os -DNDEBUG&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS_RELEASE        <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -O4 -DNDEBUG&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS_RELWITHDEBINFO <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -O2 -g&quot;</span> CACHE INTERNAL <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_AR      <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-ar)<br><span class="hljs-keyword">set</span>(CMAKE_LINKER  <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-ld)<br><span class="hljs-keyword">set</span>(CMAKE_NM      <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-nm)<br><span class="hljs-keyword">set</span>(CMAKE_OBJDUMP <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-objdump)<br><span class="hljs-keyword">set</span>(CMAKE_RANLIB  <span class="hljs-variable">$&#123;CROSS_COMPILER_PREFIX&#125;</span>-ranlib)<br></code></pre></td></tr></table></figure><p>正常无其他第三方依赖库什么的，<code>cmake</code>的时候指定toolchain文件，正常编译，解决编译问题即可。可是，项目还需要解决OpenSSL和Curl的问题。</p><p><strong>注意，toolchain文件里<code>CMAKE_&lt;LANG&gt;_FLAGS</code>相关参数需要加上<code>CACHE</code>缓存，否则，在make编译时并不会生效！</strong> 这个问题是我在编译完zlib链接到项目时发现报错<code>recompile with -fPIC</code>，然后<code>make VERBOSE=1</code>发现编译时cflags为空，<code>-fPIC</code>并没有生效，仔细阅读<code>opencv</code>的<a href="https://github.com/opencv/opencv/blob/master/platforms/linux/arm.toolchain.cmake" title="opencv arm.toolchain.cmake">toolchain</a>后，找到解决方法！</p><h2 id="交叉编译zlib"><a href="#交叉编译zlib" class="headerlink" title="交叉编译zlib"></a>交叉编译zlib</h2><p>首先是OpenSSl和Curl都有用到的zlib编译，上一篇文章<a href="https://wuruofan.com/2020/05/cmake-static-link-openssl-curl/" title="CMake静态链接OpenSSL和Curl">CMake静态链接OpenSSL和Curl</a>，也有介绍如何编译zlib，<a href="https://zlib.net/" title="zlib官网">https://zlib.net</a>下载源码，网络上没看到用CMake编译zlib的文章，其实zlib是支持CMake进行编译的，在zlib源码目录下有CMakelists.txt文件。</p><p>下面介绍两种方法编译<code>mips64el</code>和<code>aarch64</code>架构的zlib库：</p><h3 id="使用CMake交叉编译zlib"><a href="#使用CMake交叉编译zlib" class="headerlink" title="使用CMake交叉编译zlib"></a>使用CMake交叉编译zlib</h3><p>新建build目录，并在build目录下执行如下命令即可，默认动态和静态库都会编译出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmake -DCMAKE_TOOLCHAIN_FILE=/path/of/toolchains/mips64el.toolchain.cmake -DCMAKE_INSTALL_PREFIX=/home/xxx/workspace/cross_compile_libs/mips64el/zlib ..<br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><p>执行上面cmake命令配置toolchain文件后，看到如下类似打印，则代表交叉编译工具找到了。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- The C compiler identification is GNU 7.5.0</span><br><span class="hljs-comment">-- Check for working C compiler: /usr/bin/mips64el-linux-gnuabi64-gcc</span><br><span class="hljs-comment">-- Check for working C compiler: /usr/bin/mips64el-linux-gnuabi64-gcc -- works</span><br></code></pre></td></tr></table></figure><h3 id="使用传统方法交叉编译zlib"><a href="#使用传统方法交叉编译zlib" class="headerlink" title="使用传统方法交叉编译zlib"></a>使用传统方法交叉编译zlib</h3><p>通常网络上给的方法都是<code>CC=/path/to/compiler LD=/path/to/linker ./config &amp;&amp; make</code>这种方式去做的，其实可以简单点，使用<code>CHOST=</code>完成，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">CHOST=/usr/bin/aarch64-linux-gnu CFLAGS=<span class="hljs-string">&quot;-O3 -fPIC&quot;</span> ./configure --prefix=/home/xxx/workspace/cross_compile_libs/aarch64/zlib<br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://stackoverflow.com/questions/21396988/zlib-build-not-configuring-properly-with-cross-compiler-ignores-ar" title="zlib build not configuring properly with cross compiler, ignores AR?">https://stackoverflow.com/questions/21396988/zlib-build-not-configuring-properly-with-cross-compiler-ignores-ar</a></p></blockquote><h2 id="交叉编译OpenSSL"><a href="#交叉编译OpenSSL" class="headerlink" title="交叉编译OpenSSL"></a>交叉编译OpenSSL</h2><p>可以从<a href="https://github.com/openssl/openssl" title="github OpenSSL仓库">https://github.com/openssl/openssl</a>下载源码，具体的编译方法可以阅读源码根目录的<code>INSTALL</code>文件，查看相关的配置选项。</p><p>执行<code>./Configure --help</code>查看简要的配置选项说明，<code>./Configure LIST</code>查看支持平台架构信息。</p><h3 id="mips64el架构"><a href="#mips64el架构" class="headerlink" title="mips64el架构"></a>mips64el架构</h3><p>指定平台架构为<code>linux64-mips64</code>和相关路径即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">./Configure -fPIC no-shared linux64-mips64 --cross-compile-prefix=/usr/bin/mips64el-linux-gnuabi64- --prefix=/home/xxx/workspace/cross_compile_libs/mips64el/openssl --with-zlib-include=/home/xxx/workspace/cross_compile_libs/mips64el/zlib/include --with-zlib-lib=/home/xxx/workspace/cross_compile_libs/mips64el/zlib/lib<br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><h3 id="aarch64架构"><a href="#aarch64架构" class="headerlink" title="aarch64架构"></a>aarch64架构</h3><p>aarch64架构编译方法类似，但是多了<code>no-asm</code>选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">./Configure -fPIC no-asm no-shared linux-aarch64 --cross-compile-prefix=/usr/bin/aarch64-linux-gnu- --prefix=/home/xxx/workspace/cross_compile_libs/aarch64/openssl --with-zlib-include=/home/xxx/workspace/cross_compile_libs/aarch64/zlib/include --with-zlib-lib=/home/xxx/workspace/cross_compile_libs/aarch64/zlib/lib<br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><h4 id="dangerous-relocation-unsupported-relocation-错误"><a href="#dangerous-relocation-unsupported-relocation-错误" class="headerlink" title="dangerous relocation: unsupported relocation 错误"></a>dangerous relocation: unsupported relocation 错误</h4><p>和<code>mips64el</code>相同参数编译完成OpenSSL后，链接到项目中的时候，会遇到了奇怪的问题，提示如下错误，需要用<code>-fPIC</code>选项重新编译：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nim">relocation <span class="hljs-type">R_AARCH64_PREL64</span> against symbol `<span class="hljs-type">OPENSSL_armcap_P</span>&#x27; which may <span class="hljs-keyword">bind</span> externally can <span class="hljs-keyword">not</span> be used <span class="hljs-keyword">when</span> making a <span class="hljs-keyword">shared</span> <span class="hljs-keyword">object</span>; recompile <span class="hljs-keyword">with</span> -fPIC<br>****(.text+<span class="hljs-number">0</span>x**): dangerous relocation: unsupported relocation<br></code></pre></td></tr></table></figure><p>可事实上<code>make VERBOSE=1</code>，是可以看到已经使用<code>-fPIC</code>了的。StackOverFlow上搜索了很久也没看到别人遇到相同的问题，倒是看了一个别的库类似错误的帖子（<a href="https://dev.gnupg.org/T4425" title="libgcrypt relocation error on aarch64">https://dev.gnupg.org/T4425</a>）给了我启发。</p><p>这个网友在aarch64平台静态链接libgcrypt时也遇到了重定位的问题，但是他的问题在某个patch包更新后就消失了，patch包更新仅仅包含汇编代码<code>adr</code>和<code>ldr</code>的变化，如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs diff">diff -uNr libgcrypt-1.8.4/cipher/camellia-aarch64.S libgcrypt-1.8.4_patched/cipher/camellia-aarch64.S<br><span class="hljs-comment">--- libgcrypt-1.8.4/cipher/camellia-aarch64.S   2017-11-23 19:16:58.000000000 +0100</span><br><span class="hljs-comment">+++ libgcrypt-1.8.4_patched/cipher/camellia-aarch64.S   2019-03-22 18:06:37.635546976 +0100</span><br><span class="hljs-meta">@@ -208,7 +208,7 @@</span><br>         *      x3: keybitlen<br>         */<br><br><span class="hljs-deletion">-       adr RTAB1,  _gcry_camellia_arm_tables;</span><br><span class="hljs-addition">+       ldr RTAB1, =_gcry_camellia_arm_tables;</span><br>        mov RMASK, #(0xff&lt;&lt;4); /* byte mask */<br>        add RTAB2, RTAB1, #(1 * 4);<br>        add RTAB3, RTAB1, #(2 * 4);<br><span class="hljs-meta">@@ -251,7 +251,7 @@</span><br>         *      x3: keybitlen<br>         */<br><br><span class="hljs-deletion">-       adr RTAB1,  _gcry_camellia_arm_tables;</span><br><span class="hljs-addition">+       ldr RTAB1, =_gcry_camellia_arm_tables;</span><br>        mov RMASK, #(0xff&lt;&lt;4); /* byte mask */<br>        add RTAB2, RTAB1, #(1 * 4);<br>        add RTAB3, RTAB1, #(2 * 4);<br></code></pre></td></tr></table></figure><p>就联想到是不是平台汇编语言的问题，正好想起文章<a href="https://shadowllife.wordpress.com/2018/05/03/how-to-cross-compile-openssl/" title="How to cross compile OpenSSL">https://shadowllife.wordpress.com/2018/05/03/how-to-cross-compile-openssl/</a>中有个<code>no-asm</code>参数，加上去就OK了。</p><p><code>no-asm</code>参数在<code>INSTALL</code>文件中有说明，表示不使用汇编代码，通常是调试&#x2F;解决问题时开启的选项，在某些平台即使开启，仍然可能会使用少量汇编代码。</p><p>猜测可能的原因是ARM平台虽然都是<code>aarch64</code>架构，但是具体又会细分各种小平台(比如<code>armv8-a</code>、<code>armv8.1-a</code>等)、各种芯片架构（<code>cortex-a35</code>、<code>cortex-a72</code>等等），如果想使用汇编代码，可能需要更细节芯片架构配置参数才可以，比如<code>-march=</code>、<code>-mtune=</code>。具体配置参数详见<a href="https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/AArch64-Options.html" title="3.18.1 AArch64 Options">https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/AArch64-Options.html</a>，以后有机会再研究。</p><h2 id="交叉编译Curl"><a href="#交叉编译Curl" class="headerlink" title="交叉编译Curl"></a>交叉编译Curl</h2><p><a href="https://curl.haxx.se/" title="Curl官网">https://curl.haxx.se/</a>下载最新7.70版本源码。mips64el和aarch64架构的编译方法一致，指定OpenSSL和zlib库路径和交叉编译工具链路径即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mips64el</span><br>./configure --with-ssl=/home/xxx/workspace/cross_compile_libs/mips64el/openssl --with-zlib=/home/xxx/workspace/cross_compile_libs/mips64el/zlib --disable-shared --target=mips64el-linux-gnuabi64 --host=mips64el-linux-gnuabi64 --prefix=/home/xxx/workspace/cross_compile_libs/mips64el/curl<br><br><span class="hljs-comment"># aarch64</span><br><span class="hljs-comment">#./configure --with-ssl=/home/xxx/workspace/cross_compile_libs/aarch64/openssl --with-zlib=/home/xxx/workspace/cross_compile_libs/aarch64/zlib --disable-shared --target=aarch64-linux-gnu --host=aarch64-linux-gnu --prefix=/home/parallels/workspace/cross_compile_libs/aarch64/curl</span><br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此，交叉编译方法本质上就是指定好交叉编译工具路径，配置好依赖的库和相关参数，并不难，主要交叉编译的目标平台可能会有些奇奇怪怪的问题需要解决。</p><center>--- END ---</center>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
      <tag>cross compile</tag>
      
      <tag>curl</tag>
      
      <tag>openssl</tag>
      
      <tag>static library</tag>
      
      <tag>toolchain</tag>
      
      <tag>zlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20分钟Markdown入门教程</title>
    <link href="/2020/05/24/20-minutes-markdown-tutorial/"/>
    <url>/2020/05/24/20-minutes-markdown-tutorial/</url>
    
    <content type="html"><![CDATA[<h1 id="20分钟Markdown入门教程"><a href="#20分钟Markdown入门教程" class="headerlink" title="20分钟Markdown入门教程"></a>20分钟Markdown入门教程</h1><p>Markdown是一种轻量级标记语言，允许人们使用易读易写的纯文本格式编写文档，现在很多Markdown编辑软件还支持各种css（Cascading Style Sheets，层叠样式表）导出成HTML网页或者pdf文件等。</p><p>Markdown原生语法支持富文本的各种基本格式：<strong>加粗</strong>、<em>斜体</em>、插入图片、表格、超链接、列表等等，还可以通过扩展语法支持<del>删除线</del>、上^标^、下<del>标</del> 、LaTeX公式、流程图等等。</p><p>另外，Markdown天生支持HTML语法，比如我常用的一段转pdf文件时用的分页代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;page-break-after: always;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>和类似于Microsoft Word这种文本编辑软件相比，Markdown要轻量的太多了，它不需要特别的软件，使用普通记事本就可以编写，只不过最终渲染后文档效果，依赖于具体软件css样式表呈现。</p><h2 id="编辑软件"><a href="#编辑软件" class="headerlink" title="编辑软件"></a>编辑软件</h2><p>我们常在各类软件的安装目录或者源代码目录看到<code>*.md</code>，就是Markdown文档格式。</p><p>你用文本编辑器打开时这就是个普通的文本文件，有些特殊的符号标记，而换成Markdown编辑器打开时就可以看到最终效果了。</p><ul><li><p>电脑端软件，这里推荐跨平台的免费软件<code>Typora</code>，所见即所得，反应迅速，特别棒。如果简单点，使用印象笔记电脑端也可以新建Markdown，只是时间长了，使用过程中会出现卡顿，好处是各个平台移动端随时查看（无法编辑）比较方便。</p></li><li><p>Android端，推荐<code>坚果云Markdown</code>、<code>纯纯写作</code>、<code>Memorize</code>，其中只有坚果云Markdown是个单纯的文档编辑软件，后两者一个是写作一个是日记，但对Markdown支持都比较好。之前纯纯写作特价买的，现在比较贵了。</p></li><li><p>iOS端，推荐<code>坚果云Markdown</code>、<code>小章鱼</code>、<code>MWeb</code>，坚果云的理由还是跨平台同步，MWeb和小章鱼都有自己文档库管理，支持iCloud，MWeb免费版有所限制，没法在网盘创建新文档，但是优势是macOS端软件功能强大。小章鱼真的是让我惊艳，免费软件，界面做的清新优美，和android端的纯纯写作不相伯仲，记得在一开始安装时允许通过邮箱找到，不然会影响iCloud同步，而且似乎找不到重新触发的方式😂。</p></li></ul><p>总的来说，多个平台间同步文档可以用网盘同步文件夹来解决，这时坚果云的优势就出来了，可以把坚果云理解成国内版的dropbox，很强大。</p><h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><h3 id="标题与正文"><a href="#标题与正文" class="headerlink" title="标题与正文"></a>标题与正文</h3><p>Markdown通过<code>#</code>作为前缀表示标题级别，不带修饰的就是正文格式，通常两个回车换行表示新段落，或者说叫一个block块，（也就是段落间有一个空白行）。</p><h1 id="一级标题h1-一级标题"><a href="#一级标题h1-一级标题" class="headerlink" title="一级标题h1 # 一级标题"></a>一级标题h1 <code># 一级标题</code></h1><h2 id="二级标题h2-二级标题"><a href="#二级标题h2-二级标题" class="headerlink" title="二级标题h2 ## 二级标题"></a>二级标题h2 <code>## 二级标题</code></h2><h3 id="三级标题h3-三级标题"><a href="#三级标题h3-三级标题" class="headerlink" title="三级标题h3 ### 三级标题"></a>三级标题h3 <code>### 三级标题</code></h3><h4 id="四级标题h4-四级标题"><a href="#四级标题h4-四级标题" class="headerlink" title="四级标题h4 #### 四级标题"></a>四级标题h4 <code>#### 四级标题</code></h4><h5 id="五级标题h5-五级标题"><a href="#五级标题h5-五级标题" class="headerlink" title="五级标题h5 ##### 五级标题"></a>五级标题h5 <code>##### 五级标题</code></h5><p>这是正常的普通正文格式，需要一个空白行表示分段。</p><p>这是第二段文字。</p><p>另外，markdown并不支持首行缩进，一般这是由渲染预览样式的css实现。如果十分迫切的想要加上首行缩进，可以使用html中的<code>&amp;nbsp;</code>来实现，一个<code>&amp;nbsp;</code>代表一个空格。</p><p>分割线（<code>---</code>）通常一个空行加上用连续的三个以上短横线或者星号表示分割线。注意短横线前面不应有任何字符，包括空格。</p><p>效果如下：</p><hr><h3 id="基本格式与扩展"><a href="#基本格式与扩展" class="headerlink" title="基本格式与扩展"></a>基本格式与扩展</h3><p>类似html语法，markdown也使用前后标记包裹的方式定义文字格式。</p><p><strong>加粗</strong>（<code>**加粗**</code>）、<em>斜体</em>（<code>*斜体*</code>）是markdown文档里最常用的强调格式了。</p><p>还有通用扩展语法支持的<del>删除线</del>（<del>删除线</del>）和&#x3D;&#x3D;高亮&#x3D;&#x3D;（<code>==高亮==</code>）。</p><p>而上^角标^（<code>上^角标^</code>）和下<del>角标</del>（<code>下~角标~</code>）这些扩展语法和编辑软件支持有关系，并不是很通用，不同编辑器实现并不相同。</p><h3 id="行内代码与代码块"><a href="#行内代码与代码块" class="headerlink" title="行内代码与代码块"></a>行内代码与代码块</h3><p>语法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">`这是行内代码`</span><br><br><span class="hljs-code">```语言名称（c、cpp、java等）</span><br><span class="hljs-code">这是一段代码</span><br><span class="hljs-code">会按照语言名称进行高亮显示</span><br></code></pre></td></tr></table></figure><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><br>### 引用文字<br><br>引用段落以`&gt;`开头，若引用一篇包含多段的文字，建议多段文字以空行间隔开，因为markdown默认以空行作为分段标志，有些软件渲染时会把不加空行的两个段落连接成一段。同时，空行前也加上`&gt;`，否则，会在渲染时视作两个单独段落的引用。<br><br>​```markdown<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">这是一个引用段落。</span><br><span class="hljs-meta prompt_">&gt;</span> <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">如果引用一个多段文字，建议多段文字以空行间隔，防止不同软件渲染时认为是一段文字。</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">同时，空行也需要加上<span class="hljs-string">`&gt;`</span>，防止不同软件渲染时当作两个段落引用。</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是一个引用段落。</p><p>如果引用一个多段文字，建议多段文字以空行间隔，防止不同软件渲染时认为是一段文字。</p></blockquote><blockquote><p>同时，空行也需要加上<code>&gt;</code>，防止不同软件渲染时当作两个段落引用。</p></blockquote><h2 id="列表与待办"><a href="#列表与待办" class="headerlink" title="列表与待办"></a>列表与待办</h2><p>列表包括有序列表和无序列表，待办是无序列表的一种。</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 数字+英文句号+空格，就组成了有序列表项的基本元素<br><span class="hljs-bullet">2.</span> 这就是有序列表的示例<br><span class="hljs-bullet">3.</span> 有些软件需要额外空行表示一个列表项结束<br><span class="hljs-bullet">    1.</span> 可以用<span class="hljs-code">`TAB`</span>键缩进，来表示次级列表<br><span class="hljs-bullet">    2.</span> 这是一个次级列表项<br></code></pre></td></tr></table></figure><p>效果如下：</p><ol><li>数字+英文句号+空格，就组成了有序列表项的基本元素</li><li>这就是有序列表的示例</li><li>有些软件需要额外空行表示一个列表项结束<ol><li>可以用<code>TAB</code>键缩进，来表示次级列表</li><li>这是一个次级列表项</li></ol></li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 无序列表项通常以<span class="hljs-code">`-`</span>、<span class="hljs-code">`+`</span>、<span class="hljs-code">`*`</span>开头，加上空格为起始<br><span class="hljs-bullet">    -</span> 缩进表示次级列表项<br><span class="hljs-bullet">    +</span> 我通常习惯一个级别的无序列表统一一种符号起始，但混用也没关系<br><span class="hljs-bullet">*</span> 待办列表通常以<span class="hljs-code">`- [ ]`</span>加空格为起始，最前面的<span class="hljs-code">`- `</span>便是无序列表的起始，也可以改成<span class="hljs-code">`+`</span>或者<span class="hljs-code">`*`</span><br><span class="hljs-bullet">    -</span> [ ] 中括号中包含空格，表示未完成<br><span class="hljs-bullet">    -</span> [x] 中括号中包含x，则表示已完成<br></code></pre></td></tr></table></figure><p>效果如下：</p><ul><li>无序列表项通常以<code>-</code>、<code>+</code>、<code>*</code>开头，加上空格为起始<ul><li>缩进表示次级列表项</li></ul><ul><li>我通常习惯一个级别的无序列表统一一种符号起始，但混用也没关系</li></ul></li><li>待办列表通常以<code>- [ ]</code>加空格为起始，最前面的<code>- </code>便是无序列表的起始，也可以改成<code>+</code>或者<code>*</code><ul><li><input disabled="" type="checkbox"> 中括号中包含空格，表示未完成</li><li><input checked="" disabled="" type="checkbox"> 中括号中包含x，则表示已完成</li></ul></li></ul><h2 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>基本的网址超链接，语法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">超链接文本描述</span>](<span class="hljs-link">超链接地址 &quot;超链接提示&quot;</span>)<br>[<span class="hljs-string">必应</span>](<span class="hljs-link">https://www.bing.com &quot;微软必应&quot;</span>)<br></code></pre></td></tr></table></figure><p>效果如示：<a href="https://www.bing.com/" title="微软必应">必应</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片的本质也是链接，用图片的语法告诉编辑器图片文件的地址，编辑器自己就会处理图片的显示问题。</p><p>语法类似超链接，在之前多一个感叹号：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片名称</span>](<span class="hljs-link">图片路径 &quot;图片提示&quot;</span>)<br>![<span class="hljs-string">I love MD</span>](<span class="hljs-link">https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRN4x6j51UkoIw18k0xO_9lm08qBr060A_wbNLg00zLk0666j7S&amp;usqp=CAU &quot;I love markdown&quot;</span>)<br></code></pre></td></tr></table></figure><p>图片路径可以是本地文件路径，也可以是图片的网址。效果如下：</p><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRN4x6j51UkoIw18k0xO_9lm08qBr060A_wbNLg00zLk0666j7S&usqp=CAU" alt="I love MD" title="I love markdown"></p><h2 id="目录与脚注"><a href="#目录与脚注" class="headerlink" title="目录与脚注"></a>目录与脚注</h2><p>目录和脚注也可以看成是特殊的链接，只不过由编辑器替你实现。</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>目录语法超级简单，会按照标题h1、h2等级别自动生成。但是也得看编辑器支持与否。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[TOC]<br></code></pre></td></tr></table></figure><p>效果如下：</p><p>[TOC]</p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注的语法特殊一些，包含两个部分：</p><ol><li>脚注标号，通常在行末加上<code>[^脚注名称]</code>。</li><li>单独写脚注信息，如<code>[^脚注名称]: 这是一条脚注信息</code>，<strong>注意是英文冒号且后面有一个空格</strong>。</li></ol><p>效果如示：这是一个的脚注示例。[^脚注名称]<br>[^脚注名称]: 这是一行脚注信息。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格的语法用一堆<code>-</code>和<code>|</code>表示横线和竖线。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|  表头1  |表头2  |<br>| --- | --- |<br>|  这是表格内容  |  上面短横线表示表头的分隔  |<br>|  blablabla  |  想要更多列就在右侧每行多一个英文竖线  |<br></code></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>表头1</th><th>表头2</th></tr></thead><tbody><tr><td>这是表格内容</td><td>上面短横线表示表头的分隔</td></tr><tr><td>blablabla</td><td>想要更多列就在右侧每行多一个英文竖线</td></tr></tbody></table><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>这里画流程图使用的是<code>mermaid</code>（🧜‍♀️）库，其实markdown还支持时序图、甘特图等更复杂的图。</p><p>mermaid语法可以看作代码块的扩展，但是mermaid库的支持和编辑器的关系很大，有些不支持有些支持不全，下面示例代码里的语法算是比较通用。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coq">​```mermaid <br> graph TD   // graph表示流程图，TD表示方向从上到下，LR表示从左到右<br> A(这是圆角矩形框) --&gt; |<span class="hljs-type">短横线*2</span>加右英文书名号表示直线箭头| <span class="hljs-type">B</span>[这是直角矩形框]<br> B --&gt; |<span class="hljs-type">双竖线内为线上文字| C</span>&#123;这是菱形框&#125;<br> C --&gt; |<span class="hljs-type">是| D</span><br> C --&gt; |<span class="hljs-type">否| E</span><br> E --&gt; F((这是圆形框))<br> D --&gt; F<br>​```<br></code></pre></td></tr></table></figure><p>效果如下：</p><img src="https://i.loli.net/2021/01/12/fbx2jNPw5YrZo6W.png" alt="mermaid流程图" style="zoom:67%;" /><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>以上，大概就可以覆盖markdown日常使用99%的场景了，熟练使用之后，你就会发现写文档不用操心格式是多么美妙的一件事情。</p><p>等到使用熟练之后，任何文本编辑器都会是markdown发光发热的地方，你也就可以成为人肉markdown文档渲染器了。</p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>20分钟教程</tag>
      
      <tag>markdown</tag>
      
      <tag>教程</tag>
      
      <tag>软件推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake静态链接openssl和curl</title>
    <link href="/2020/05/24/cmake-static-link-openssl-curl/"/>
    <url>/2020/05/24/cmake-static-link-openssl-curl/</url>
    
    <content type="html"><![CDATA[<h3 id="动态链接OpenSSL和Curl"><a href="#动态链接OpenSSL和Curl" class="headerlink" title="动态链接OpenSSL和Curl"></a>动态链接OpenSSL和Curl</h3><p>CMake本身提供了对OpenSSL&#x2F;Curl这种大户人家的库的支持，通过<code>find_package</code>命令查找系统安装的OpenSSL&#x2F;Curl库的路径，动态链接的方式如下即可。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># openssl</span><br><span class="hljs-keyword">find_package</span>(OpenSSL REQUIRED)<br><span class="hljs-keyword">if</span>(OPENSSL_FOUND)<br>  <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;OPENSSL_INCLUDE_DIRS&#125;</span>)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;OpenSSL Found!&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># curl</span><br><span class="hljs-keyword">find_package</span>(CURL REQUIRED)<br><br><span class="hljs-keyword">if</span>(CURL_FOUND)<br>  <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CURL_INCLUDE_DIR&#125;</span>)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Curl Found: $&#123;CURL_VERSION_STRING&#125; $&#123;CURL_LIBRARIES&#125; $&#123;CURL_LINK_LIBRARIES&#125;!&quot;</span>)<br><span class="hljs-keyword">else</span>(CURL_FOUND)<br>  <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Could not find the CURL library and development files.&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-keyword">target_link_libraries</span>(target_program <span class="hljs-variable">$&#123;CURL_LIBRARIES&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(target_program OpenSSL::Crypto OpenSSL::SSL)<br></code></pre></td></tr></table></figure><p>由于项目需求需要改成静态链接，其实没太大必要，把需要的动态库一起打包到安装软件，然后指定rpath应该就可以了。</p><p>但是甲方爸爸说了算了啊。🤷‍♂️</p><h4 id="静态链接配置"><a href="#静态链接配置" class="headerlink" title="静态链接配置"></a>静态链接配置</h4><p>Linux发行版仓库安装的OpenSSL和Curl都包含了静态和动态库，但是CMake这两个各自启用静态编译的方法不太一样。</p><p>OpenSSL添加<code>set(OPENSSL_USE_STATIC_LIBS TRUE)</code>即可，make时可以看到已经找到静态库。</p><p>Curl则需要在include头文件之前添加<code>add_definitions(-DCURL_STATICLIB)</code></p><blockquote><p>参考：</p><ol><li><p><a href="https://stackoverflow.com/questions/55165172/static-linking-of-openssl-crypto-in-cmake">Static linking of OpenSSL Crypto in CMake</a></p></li><li><p><a href="https://stackoverflow.com/questions/49778607/c-cmake-compiling-program-with-libcurl">C - Cmake compiling program with libcurl</a></p></li></ol></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># openssl using static library</span><br><span class="hljs-keyword">set</span>(OPENSSL_USE_STATIC_LIBS <span class="hljs-keyword">TRUE</span>)<br><br><span class="hljs-comment"># curl using static library</span><br><span class="hljs-keyword">add_definitions</span>(-DCURL_STATICLIB)<br></code></pre></td></tr></table></figure><p>但是事实上编译过程中发现Curl好像还是动态链接的，编译完成的使用<code>ldd -r target_program</code>，发现还有<code>libcurl.so.4</code>之类字样，似乎没有找到静态库。</p><p>强行指定绝对路径链接<code>libcurl.a</code>的话会爆出找不到定义的错误，因为curl依赖的库也得静态链接才可以，这也说明前面的设置并没有成功静态链接。</p><p><img src="https://i.loli.net/2021/01/12/QG9UsBf8z2KwXCy.png" alt="4A47B7DF-6D1C-48FA-9634-1F8FAE521EE1"></p><p><code>ls</code>查看Curl库所在位置可以看到动态库静态库同时都存在，应该还是配置问题。中间绕了些弯弯发现了<code>$&#123;CMAKE_FIND_LIBRARY_SUFFIXES&#125;</code>选项，本意是设置<code>find_library</code>命令查找库时后缀名的优先级，事实上<code>find_package</code>内部实现就是前者，一开始配置错误，死活没找到静态<code>.a</code>库，在Linux下默认查找顺序是<code>.so;.a</code>，改成如下即可找到并链接静态Curl。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">SET</span>(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a <span class="hljs-variable">$&#123;CMAKE_FIND_LIBRARY_SUFFIXES&#125;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>参考 <a href="https://stackoverflow.com/questions/28194215/default-values-for-cmake-find-library-prefixes-cmake-find-library-suffixes">Default values for CMAKE_FIND_LIBRARY_PREFIXES&#x2F;CMAKE_FIND_LIBRARY_SUFFIXES</a> </p></blockquote><p>使用<code>curl-config --static-libs</code>可以看到所依赖的其他库有哪些。</p><p><img src="https://i.loli.net/2021/01/12/8cLbqlVF9KtO3Id.png" alt="A6B38899-B756-4D92-B19B-79D04B862164"></p><blockquote><p>参考 <a href="https://stackoverflow.com/questions/36732111/how-to-get-rid-of-libcurl-linking-error">How to get rid of libcurl linking error?</a></p></blockquote><h4 id="源码编译Curl静态库"><a href="#源码编译Curl静态库" class="headerlink" title="源码编译Curl静态库"></a>源码编译Curl静态库</h4><p>可以发现，Linux发行版仓库中的Curl依赖的其他乱七八糟库过多，不得已还得自己编译，不开启不需要的功能。<a href="https://curl.haxx.se/">Curl官网</a>下载最新7.70版本源码，执行<code>./configure --with-ssl --disable-shared</code>之后可以看到配置开启的功能如下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Host setup:</span>       <span class="hljs-string">x86_64-pc-linux-gnu</span><br><span class="hljs-attr">Install prefix:</span>   <span class="hljs-string">/usr/local</span><br><span class="hljs-attr">Compiler:</span>         <span class="hljs-string">gcc</span><br> <span class="hljs-attr">CFLAGS:</span>          <span class="hljs-string">-Werror-implicit-function-declaration</span> <span class="hljs-string">-O2</span> <span class="hljs-string">-Wno-system-headers</span> <span class="hljs-string">-pthread</span><br> <span class="hljs-attr">CPPFLAGS:</span>        <br> <span class="hljs-attr">LDFLAGS:</span>         <br> <span class="hljs-attr">LIBS:</span>            <span class="hljs-string">-lssl</span> <span class="hljs-string">-lcrypto</span> <span class="hljs-string">-lssl</span> <span class="hljs-string">-lcrypto</span> <span class="hljs-string">-lz</span><br><br><span class="hljs-attr">curl version:</span>     <span class="hljs-number">7.70</span><span class="hljs-number">.0</span><br><span class="hljs-attr">SSL:</span>              <span class="hljs-string">enabled</span> <span class="hljs-string">(OpenSSL)</span><br><span class="hljs-attr">SSH:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-&#123;libssh,libssh2&#125;)</span><br><span class="hljs-attr">zlib:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">brotli:</span>           <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-brotli)</span><br><span class="hljs-attr">GSS-API:</span>          <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-gssapi)</span><br><span class="hljs-attr">TLS-SRP:</span>          <span class="hljs-string">enabled</span><br><span class="hljs-attr">resolver:</span>         <span class="hljs-string">POSIX</span> <span class="hljs-string">threaded</span><br><span class="hljs-attr">IPv6:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">Unix sockets:</span>     <span class="hljs-string">enabled</span><br><span class="hljs-attr">IDN:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-&#123;libidn2,winidn&#125;)</span><br><span class="hljs-attr">Build libcurl:</span>    <span class="hljs-string">Shared=no,</span> <span class="hljs-string">Static=yes</span><br><span class="hljs-attr">Built-in manual:</span>  <span class="hljs-string">enabled</span><br><span class="hljs-string">--libcurl</span> <span class="hljs-attr">option:</span> <span class="hljs-string">enabled</span> <span class="hljs-string">(--disable-libcurl-option)</span><br><span class="hljs-attr">Verbose errors:</span>   <span class="hljs-string">enabled</span> <span class="hljs-string">(--disable-verbose)</span><br><span class="hljs-attr">Code coverage:</span>    <span class="hljs-string">disabled</span><br><span class="hljs-attr">SSPI:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-sspi)</span><br><span class="hljs-attr">ca cert bundle:</span>   <span class="hljs-string">/etc/ssl/certs/ca-certificates.crt</span><br><span class="hljs-attr">ca cert path:</span>     <span class="hljs-literal">no</span><br><span class="hljs-attr">ca fallback:</span>      <span class="hljs-literal">no</span><br><span class="hljs-attr">LDAP:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-ldap</span> <span class="hljs-string">/</span> <span class="hljs-string">--with-ldap-lib</span> <span class="hljs-string">/</span> <span class="hljs-string">--with-lber-lib)</span><br><span class="hljs-attr">LDAPS:</span>            <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-ldaps)</span><br><span class="hljs-attr">RTSP:</span>             <span class="hljs-string">enabled</span><br><span class="hljs-attr">RTMP:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-librtmp)</span><br><span class="hljs-attr">Metalink:</span>         <span class="hljs-literal">no</span>      <span class="hljs-string">(--with-libmetalink)</span><br><span class="hljs-attr">PSL:</span>              <span class="hljs-literal">no</span>      <span class="hljs-string">(libpsl</span> <span class="hljs-string">not</span> <span class="hljs-string">found)</span><br><span class="hljs-attr">Alt-svc:</span>          <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-alt-svc)</span><br><span class="hljs-attr">HTTP2:</span>            <span class="hljs-string">disabled</span> <span class="hljs-string">(--with-nghttp2)</span><br><span class="hljs-attr">HTTP3:</span>            <span class="hljs-string">disabled</span> <span class="hljs-string">(--with-ngtcp2,</span> <span class="hljs-string">--with-quiche)</span><br><span class="hljs-attr">ESNI:</span>             <span class="hljs-literal">no</span>      <span class="hljs-string">(--enable-esni)</span><br><span class="hljs-attr">Protocols:</span>        <span class="hljs-string">DICT</span> <span class="hljs-string">FILE</span> <span class="hljs-string">FTP</span> <span class="hljs-string">FTPS</span> <span class="hljs-string">GOPHER</span> <span class="hljs-string">HTTP</span> <span class="hljs-string">HTTPS</span> <span class="hljs-string">IMAP</span> <span class="hljs-string">IMAPS</span> <span class="hljs-string">POP3</span> <span class="hljs-string">POP3S</span> <span class="hljs-string">RTSP</span> <span class="hljs-string">SMB</span> <span class="hljs-string">SMBS</span> <span class="hljs-string">SMTP</span> <span class="hljs-string">SMTPS</span> <span class="hljs-string">TELNET</span> <span class="hljs-string">TFTP</span><br><span class="hljs-attr">Features:</span>         <span class="hljs-string">SSL</span> <span class="hljs-string">IPv6</span> <span class="hljs-string">UnixSockets</span> <span class="hljs-string">libz</span> <span class="hljs-string">AsynchDNS</span> <span class="hljs-string">NTLM</span> <span class="hljs-string">NTLM_WB</span> <span class="hljs-string">TLS-SRP</span> <span class="hljs-string">HTTPS-proxy</span><br></code></pre></td></tr></table></figure><p>然后，由于我不需要安装，只执行<code>make</code>即可，生成文件路径为<code>./lib/.libs/libcurl.a</code>。我也不知道为什么在隐藏目录下。</p><p>指定链接自己编译生成的<code>libcurl.a</code>可以发现需要的依赖库就少很多了。</p><p><img src="https://i.loli.net/2021/01/12/KvXwOpUIhuisnB2.png" alt="B730BA13-8019-4720-A087-8E2E83F1DCE3"></p><p>但是仍然缺少<code>zlib</code>、<code>dl</code>和<code>pthread</code>的库支持。后两者都是基本库，添加下面一行即可。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">target_link_libraries</span>(target_program <span class="hljs-variable">$&#123;CMAKE_DL_LIBS&#125;</span> -lpthread)<br></code></pre></td></tr></table></figure><h4 id="静态链接zlib"><a href="#静态链接zlib" class="headerlink" title="静态链接zlib"></a>静态链接zlib</h4><p>zlib是提供压缩算法的库，CMake其实也提供了zlib支持，简单如下即可。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span>(ZLIB REQUIRED)<br><span class="hljs-keyword">if</span>(ZLIB_FOUND)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Zlib Found!&quot;</span>)<br>  <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;ZLIB_INCLUDE_DIR&#125;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-keyword">target_link_libraries</span>(target_program <span class="hljs-variable">$&#123;ZLIB_LIBRARIES&#125;</span>)<br></code></pre></td></tr></table></figure><p>由于之前配置了<code>CMAKE_FIND_LIBRARY_SUFFIXES</code>，默认会找到<code>libz.a</code>。</p><p>本来以为OK了，结果还是出了问题：Ubuntu软件仓库里的zlib不支持重定位！静态链接时提示如下错误：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nim">/usr/bin/ld: /usr/lib/x86_64-linux-gnu/libz.a(inflate.o): relocation <span class="hljs-type">R_X86_64_PC32</span> against symbol `inflateReset&#x27; can <span class="hljs-keyword">not</span> be used <span class="hljs-keyword">when</span> making a <span class="hljs-keyword">shared</span> <span class="hljs-keyword">object</span>; recompile <span class="hljs-keyword">with</span> -fPIC<br>/usr/bin/ld: final link failed: <span class="hljs-type">Bad</span> value<br></code></pre></td></tr></table></figure><p>没办法还是需要源码编译zlib时开启<code>-fPIC</code>支持才可以，<a href="https://zlib.net/">zlib官网</a>下载源码，源码目录下执行<code>CFLAGS=&quot;-O3 -fPIC&quot; ./configure &amp;&amp; make</code>即可，生成<code>libz.a</code>文件就在当前目录下，指定链接终于可以成功编译啦！</p><h4 id="动态链接和静态链接生成库依赖对比"><a href="#动态链接和静态链接生成库依赖对比" class="headerlink" title="动态链接和静态链接生成库依赖对比"></a>动态链接和静态链接生成库依赖对比</h4><p>我们再使用<code>ldd -r target_program</code>对比一下动态链接和静态链接的库，可以发现静态链接后依赖的库要少很多。</p><p><img src="https://i.loli.net/2021/01/12/pDq2LZ6BxcbyS9G.png" alt="C9E063C4-7B08-42DC-A074-8B9663C9B2A8"></p><center>⬆️动态链接</center><p><img src="https://i.loli.net/2021/01/12/X3LC9ZfTOvuAPbd.png" alt="2A5B9081-700D-4D3F-A00F-B27EB2395702"></p><center>⬆️静态链接</center><h4 id="最终版CMakelists-txt"><a href="#最终版CMakelists-txt" class="headerlink" title="最终版CMakelists.txt"></a>最终版CMakelists.txt</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include</span>(CMakeDependentOption)<br><br><span class="hljs-comment"># static link curl &amp; openssl</span><br><span class="hljs-keyword">option</span>(LINK_CURL_OPENSSL_STATIC <span class="hljs-string">&quot;Using static curl &amp; openssl library&quot;</span> <span class="hljs-keyword">ON</span>)<br>cmake_dependent_option(CUSTOM_CURL_STATIC <span class="hljs-string">&quot;Using prebuilt static curl library&quot;</span> <span class="hljs-keyword">ON</span><br>        <span class="hljs-string">&quot;LINK_CURL_OPENSSL_STATIC&quot;</span> <span class="hljs-keyword">OFF</span>)<br>cmake_dependent_option(CUSTOM_ZLIB_STATIC <span class="hljs-string">&quot;Using prebuilt static zlib library&quot;</span> <span class="hljs-keyword">ON</span><br>        <span class="hljs-string">&quot;LINK_CURL_OPENSSL_STATIC&quot;</span> <span class="hljs-keyword">OFF</span>)<br><br><span class="hljs-keyword">if</span>(LINK_CURL_OPENSSL_STATIC)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Using static curl &amp; openssl library!&quot;</span>)<br>  <span class="hljs-keyword">add_definitions</span>(-DCURL_STATICLIB)<br>  <span class="hljs-keyword">SET</span>(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a <span class="hljs-variable">$&#123;CMAKE_FIND_LIBRARY_SUFFIXES&#125;</span>)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;CMAKE_FIND_LIBRARY_SUFFIXES: &quot;</span> <span class="hljs-variable">$&#123;CMAKE_FIND_LIBRARY_SUFFIXES&#125;</span>)<br>  <span class="hljs-keyword">set</span>(OPENSSL_USE_STATIC_LIBS <span class="hljs-keyword">TRUE</span>)<br><span class="hljs-keyword">else</span>()<br><span class="hljs-comment">#  set(CUSTOM_CURL_STATIC OFF)</span><br><span class="hljs-comment">#  set(CUSTOM_ZLIB_STATIC OFF)</span><br><span class="hljs-keyword">endif</span>()<br><br><br><span class="hljs-comment"># openssl</span><br><span class="hljs-keyword">find_package</span>(OpenSSL REQUIRED)<br><span class="hljs-keyword">if</span>(OPENSSL_FOUND)<br>  <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;OPENSSL_INCLUDE_DIRS&#125;</span>)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;OpenSSL Found!&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># curl</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> CUSTOM_CURL_STATIC)<br>  <span class="hljs-keyword">find_package</span>(CURL REQUIRED)<br><br>  <span class="hljs-keyword">if</span>(CURL_FOUND)<br>    <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CURL_INCLUDE_DIR&#125;</span>)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Curl Found: $&#123;CURL_VERSION_STRING&#125; $&#123;CURL_LIBRARIES&#125; $&#123;CURL_LINK_LIBRARIES&#125;!&quot;</span>)<br>    <span class="hljs-keyword">set</span>(curl_library <span class="hljs-variable">$&#123;CURL_LIBRARIES&#125;</span>)<br>  <span class="hljs-keyword">else</span>(CURL_FOUND)<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Could not find the CURL library and development files.&quot;</span>)<br>  <span class="hljs-keyword">endif</span>()<br><span class="hljs-keyword">else</span>()<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Using custom compiled static library: libcurl.a !&quot;</span>)<br>  <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PREBUILTS_BASE_DIRECTORY&#125;</span>/<span class="hljs-variable">$&#123;PLATFORM_NAME&#125;</span>/<span class="hljs-keyword">include</span>/)<br>  <span class="hljs-keyword">set</span>(curl_library <span class="hljs-variable">$&#123;PREBUILTS_LIB_DERECTORY&#125;</span>/curl/libcurl.a)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># zlib</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> CUSTOM_ZLIB_STATIC)<br>  <span class="hljs-keyword">find_package</span>(ZLIB REQUIRED)<br>  <span class="hljs-keyword">if</span>(ZLIB_FOUND)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Zlib Found!&quot;</span>)<br>    <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;ZLIB_INCLUDE_DIR&#125;</span>)<br>    <span class="hljs-keyword">set</span>(zlib_library <span class="hljs-variable">$&#123;ZLIB_LIBRARIES&#125;</span>)<br>  <span class="hljs-keyword">endif</span>()<br><span class="hljs-keyword">else</span>()<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Using custom compiled static library: libz.a !&quot;</span>)<br>  <span class="hljs-keyword">set</span>(zlib_library <span class="hljs-variable">$&#123;PREBUILTS_LIB_DERECTORY&#125;</span>/zlib/libz.a)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-keyword">target_link_libraries</span>(target_program <span class="hljs-variable">$&#123;curl_library&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(target_program OpenSSL::Crypto OpenSSL::SSL)<br><br><span class="hljs-keyword">if</span>(LINK_CURL_OPENSSL_STATIC)<br>  <span class="hljs-keyword">target_link_libraries</span>(target_program <span class="hljs-variable">$&#123;zlib_library&#125;</span>)<br>  <span class="hljs-keyword">target_link_libraries</span>(target_program <span class="hljs-variable">$&#123;CMAKE_DL_LIBS&#125;</span> -lpthread)<br><span class="hljs-keyword">endif</span>()<br><br></code></pre></td></tr></table></figure><p>上面的CMakelists提供了3个配置参数:</p><ul><li><p><code>LINK_CURL_OPENSSL_STATIC</code>：默认开启，静态链接Curl和OpenSSL。</p></li><li><p><code>CUSTOM_CURL_STATIC</code>：默认开启，使用工程目录下预编译的libcurl.a。</p></li><li><p><code>CUSTOM_ZLIB_STATIC</code>：默认开启，使用工程目录下预编译的libzlib.a。</p></li></ul><p>正常<code>cmake .. &amp;&amp; make</code>，会静态链接Curl、OpenSSL、zlib，其中Curl和zlib使用预编译版本。使用<code>cmake -DCUSTOM_CURL_STATIC=OFF -DCUSTOM_ZLIB_STATIC=OFF .. &amp;&amp; make</code>来使用默认系统安装的静态版本。</p><p>使用<code>cmake -DLINK_CURL_OPENSSL_STATIC=OFF .. &amp;&amp; make</code>，则会使用动态链接Curl和OpenSSL。</p><center>--- END ---</center>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
      <tag>curl</tag>
      
      <tag>openssl</tag>
      
      <tag>static link</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake学习笔记</title>
    <link href="/2020/05/11/cmake-learning-note/"/>
    <url>/2020/05/11/cmake-learning-note/</url>
    
    <content type="html"><![CDATA[<blockquote><p>CMake是个一个开源的跨平台自动化建构系统，用来管理软件建置的程序，并不依赖于某特定编译器，并可支持多层目录、多个应用程序与多个库。</p><p>CMake并不直接建构出最终的软件，而是产生标准的建构档（如Unix的Makefile或Windows Visual C++的projects&#x2F;workspaces），然后再依一般的建构方式使用。这使得熟悉某个集成开发环境（IDE）的开发者可以用标准的方式建构他的软件，这种可以使用各平台的原生建构系统的能力是CMake和SCons等其他类似系统的区别之处。</p><p>“CMake”这个名字是”Cross platform Make”的缩写。虽然名字中含有”make”，但是CMake和Unix上常见的“make”系统是分开的，而且更为高端。 它可与原生建置环境结合使用，例如：make、苹果的Xcode与微软的Visual Studio。</p><p>——以上，摘自维基百科：<a href="https://zh.wikipedia.org/wiki/CMake">CMake</a></p></blockquote><p>以下是在做Windows版本程序迁移至Linux平台遇到的一些问题，记录下来。</p><hr><h3 id="获取系统信息"><a href="#获取系统信息" class="headerlink" title="获取系统信息"></a>获取系统信息</h3><p><code>$&#123;CMAKE_SYSTEM&#125;</code>、<code>$&#123;CMAKE_SYSTEM_NAME&#125;</code> 需要在 <code>project(xxx)</code> 之后使用，否则为空。</p><p><code>$&#123;CMAKE_HOST_SYSTEM_NAME&#125;</code> 可以在 <code>project(xxx)</code> 之前使用，获取结果类似于 <code>uname -s</code>命令。</p><hr><h3 id="install路径设置"><a href="#install路径设置" class="headerlink" title="install路径设置"></a>install路径设置</h3><p><code>cmake -DCMAKE_INSTALL_PREFIX=&lt; install_path &gt; ..</code>或者在CMakelists.txt里<code>SET(CMAKE_INSTALL_PREFIX &lt; install_path &gt;)</code></p><p><strong>需要在 <code>project(xxx)</code>之前设置，否则无效！</strong></p><p>或者使用cmake手册中的方法，可以在<code>project(xxx)</code>之后设置。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">if</span>(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)<br>  <span class="hljs-keyword">set</span>(CMAKE_INSTALL_PREFIX <span class="hljs-string">&quot;/my/default&quot;</span> CACHE PATH <span class="hljs-string">&quot;...&quot;</span> FORCE)<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><hr><h3 id="变量设置失效的问题"><a href="#变量设置失效的问题" class="headerlink" title="变量设置失效的问题"></a>变量设置失效的问题</h3><p>遇到奇怪的现象，就是我在根目录的CMakelists.txt里配置了<code>$&#123;CMAKE_INSTALL_PREFIX&#125;</code>和<code>$CMAKE_BUILD_TYPE&#125;</code>，但是在<code>rm -r *</code>清空build目录，<strong>重新</strong><code>cmake ..</code>执行到配置<code>install</code>相关选项的时候会遇到打印这两个变量值变为默认值<code>/usr/local</code>和空的问题。</p><p>第二次执行<code>cmake ..</code>这两个变量值就OK了。</p><p>有时修改CMakelists之后，再执行<code>make install</code>看到打印</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">Install</span> the <span class="hljs-keyword">project</span>...<br>-- <span class="hljs-keyword">Install</span> configuration: <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>查了下资料和CMake的缓存机制有关。</p><blockquote><p>参考 <a href="https://xyz1001.xyz/articles/53989.html">CMake”变量污染”</a></p></blockquote><p>在build目录下有一个CMakeCache.txt，里面会缓存一些配置信息，用于第二次编译加速，但是有些值会从Cache中去读，在第二次运行时<code>set()</code>并不会更新Cache的缓存，需要加上强制写缓存的设置才可以。</p><p>CMake手册上对<code>set()</code>有说明：</p><blockquote><p><code>set(&lt;variable&gt; &lt;value&gt;... CACHE &lt;type&gt; &lt;docstring&gt; [FORCE])</code></p><p>其中，<code>&lt;type&gt;</code>值如下：</p><ul><li><code>BOOL</code>: Boolean ON&#x2F;OFF value. cmake-gui(1) offers a checkbox.</li><li><code>FILEPATH</code>: Path to a file on disk. cmake-gui(1) offers a file dialog.</li><li><code>PATH</code>: Path to a directory on disk. cmake-gui(1) offers a file dialog.</li><li><code>STRING</code>: A line of text. cmake-gui(1) offers a text field or a drop-down selection if the STRINGS cache entry property is set.</li><li><code>INTERNAL</code>: A line of text. cmake-gui(1) does not show internal entries. They may be used to store variables persistently across runs. Use of this type implies FORCE.</li></ul><p><code>&lt;docstring&gt;</code>是说明字符串，用于<code>cmake-gui</code>展示。must be specified as a line of text providing a quick summary of the option for presentation to cmake-gui(1) users.</p></blockquote><p>因此，改为如下就OK了。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(CMAKE_INSTALL_PREFIX <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/<span class="hljs-keyword">install</span> CACHE PATH <span class="hljs-string">&quot;install prefix&quot;</span> FORCE)<br><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE <span class="hljs-string">&quot;Release&quot;</span> CACHE <span class="hljs-keyword">STRING</span> <span class="hljs-string">&quot;build type&quot;</span> FORCE)<br></code></pre></td></tr></table></figure><hr><h3 id="链接动态库时使用相对路径rpath-using-relatived-path"><a href="#链接动态库时使用相对路径rpath-using-relatived-path" class="headerlink" title="链接动态库时使用相对路径rpath using relatived path"></a>链接动态库时使用相对路径rpath using relatived path</h3><blockquote><p><a href="https://blog.csdn.net/i7thTool/article/details/80718559">CMAKE和RPATH</a></p><p><a href="https://stackoverflow.com/questions/43330165/how-to-link-a-shared-library-with-cmake-with-relative-path">How to link a shared library with CMake with relative path</a></p><p><a href="https://blog.csdn.net/ktigerhero3/article/details/68941252">linux下生成动态链接库并使用（使用cmake）</a></p></blockquote><p><code>rpath</code>指的是<code>runpath</code>，Unix系统运行可执行程序时默认搜索所需要动态库的路径，链接器ld搜索路径的优先级是这样的：</p><ol><li><p><code>RPATH</code>，编译链接时加入 -rpath 参数指明所谓的 RUNPATH ，这样可执行文件（或者依赖其他动态链接库的动态链接库）就能告诉 ld.so 到哪里去搜索对应的动态链接库了。</p></li><li><p><code>LD_LIBRARY_PATH</code> ，对于没有设定 RPATH 的可执行文件或者动态链接库，我们可以用 <code>LD_LIBRARY_PATH</code> 这个环境变量通知 ld.so 往哪里查找链接库。</p></li><li><p><code>/etc/ld.so.conf</code>，系统对 ld.so 的路径配置文件。</p></li><li><p><code>/usr/lib</code> 、 <code>/lib</code> 和 <code>/usr/local/lib</code>，系统默认路径。</p></li></ol><p>关于rpath，CMake默认设置为：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># use, i.e. don&#x27;t skip the full RPATH for the build tree</span><br><span class="hljs-keyword">SET</span>(CMAKE_SKIP_BUILD_RPATH  <span class="hljs-keyword">FALSE</span>)<br><br><span class="hljs-comment"># when building, don&#x27;t use the install RPATH already</span><br><span class="hljs-comment"># (but later on when installing)</span><br><span class="hljs-keyword">SET</span>(CMAKE_BUILD_WITH_INSTALL_RPATH <span class="hljs-keyword">FALSE</span>) <br><br><span class="hljs-comment"># the RPATH to be used when installing</span><br><span class="hljs-keyword">SET</span>(CMAKE_INSTALL_RPATH <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># don&#x27;t add the automatically determined parts of the RPATH</span><br><span class="hljs-comment"># which point to directories outside the build tree to the install RPATH</span><br><span class="hljs-keyword">SET</span>(CMAKE_INSTALL_RPATH_USE_LINK_PATH <span class="hljs-keyword">FALSE</span>)<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">## On platforms that support runtime paths (RPATH) with the $ORIGIN token, setting CMAKE_BUILD_RPATH_USE_ORIGIN to TRUE enables relative paths in the build RPATH for executables and shared libraries that point to shared libraries in the same build tree.</span><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_RPATH_USE_ORIGIN <span class="hljs-keyword">true</span>)<br><span class="hljs-keyword">set</span>(CMAKE_INSTALL_RPATH <span class="hljs-string">&quot;$ORIGIN&quot;</span>)<br><br><span class="hljs-comment">## Do not include RPATHs in the build tree.</span><br><span class="hljs-keyword">set</span>(CMAKE_SKIP_BUILD_RPATH <span class="hljs-keyword">FALSE</span>)<br><span class="hljs-comment">## Use the install path for the RPATH.</span><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_WITH_INSTALL_RPATH <span class="hljs-keyword">FALSE</span>)<br><span class="hljs-comment">## Add paths to linker search and installed rpath.</span><br><span class="hljs-keyword">set</span>(CMAKE_INSTALL_RPATH_USE_LINK_PATH <span class="hljs-keyword">TRUE</span>)<br><br></code></pre></td></tr></table></figure><p>或者，设置链接属性包含<code>$ORIGIN</code>路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">SET</span>(CMAKE_EXE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -Wl,-rpath -Wl,$ORIGIN&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h3 id="MacOS下编译遇到找不到OpenSSL的问题"><a href="#MacOS下编译遇到找不到OpenSSL的问题" class="headerlink" title="MacOS下编译遇到找不到OpenSSL的问题"></a>MacOS下编译遇到找不到OpenSSL的问题</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">CMake Error at <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>cmake<span class="hljs-regexp">/3.17.1/</span>share<span class="hljs-regexp">/cmake/M</span>odules/FindPackageHandleStandardArgs.cmake:<span class="hljs-number">164</span> (message):<br>  Could NOT <span class="hljs-keyword">find</span> OpenSSL, <span class="hljs-keyword">try</span> to set the path to OpenSSL root folder in the<br>  system variable OPENSSL_ROOT_DIR (missing: OPENSSL_INCLUDE_DIR)<br><span class="hljs-keyword">Call</span> Stack (most recent <span class="hljs-keyword">call</span> first):<br>  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>cmake<span class="hljs-regexp">/3.17.1/</span>share<span class="hljs-regexp">/cmake/M</span>odules/FindPackageHandleStandardArgs.cmake:<span class="hljs-number">445</span> (_FPHSA_FAILURE_MESSAGE)<br>  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>cmake<span class="hljs-regexp">/3.17.1/</span>share<span class="hljs-regexp">/cmake/M</span>odules/FindOpenSSL.cmake:<span class="hljs-number">450</span> (find_package_handle_standard_args)<br>  src/CMakeLists.txt:<span class="hljs-number">44</span> (find_package)<br></code></pre></td></tr></table></figure><blockquote><p>参考<a href="https://github.com/udacity/CarND-PID-Control-Project/issues/2">https://github.com/udacity/CarND-PID-Control-Project/issues/2</a></p></blockquote><p>解决方案是 <code>cmake ..</code> 时加上参数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cmake -DOPENSSL_ROOT_DIR=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>openssl<span class="hljs-regexp">/1.0.2k -DOPENSSL_LIBRARIES=/u</span>sr<span class="hljs-regexp">/local/</span>Cellar<span class="hljs-regexp">/openssl/</span><span class="hljs-number">1.0</span>.<span class="hljs-number">2</span>k/lib ..<br></code></pre></td></tr></table></figure><hr><h3 id="option选项"><a href="#option选项" class="headerlink" title="option选项"></a>option选项</h3><p>CMake支持自定义编译选项，语法：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">option</span>(&lt;variable&gt; <span class="hljs-string">&quot;&lt;help_text&gt;&quot;</span> [value])<br></code></pre></td></tr></table></figure><p>注意双引号内的字符串是变量的说明注解并不是值！ 通常value为<code>ON</code>&#x2F;<code>OFF</code>，如果不设置值，则默认为<code>OFF</code>。</p><p>之前就犯傻了，直接把<code>set(USE_FAKE_SCS &quot;on&quot;)</code>改成<code>option</code>就出问题了。</p><hr><h3 id="add-custom-command-x2F-add-custom-target执行命令"><a href="#add-custom-command-x2F-add-custom-target执行命令" class="headerlink" title="add_custom_command&#x2F;add_custom_target执行命令"></a><code>add_custom_command</code>&#x2F;<code>add_custom_target</code>执行命令</h3><p>使用<code>add_custom_command</code>&#x2F;<code>add_custom_target</code>的<code>COMMAND</code>参数执行命令时<strong>只能执行<code>cmake -E</code>支持的系统命令</strong>，解压文件的话只能使用<code>tar</code>不能用<code>unzip</code>。</p><p>在终端下执行<code>cmake -E</code>可以查看支持哪些命令。</p><p>另外，<code>add_custom_command</code>&#x2F;<code>add_custom_target</code>的<code>WORKING_DIRECTORY</code>参数指定目录时，实际会先<code>cd</code>到该目录，因此需实现保证该目录存在。</p><hr><h3 id="cmake创建目录"><a href="#cmake创建目录" class="headerlink" title="cmake创建目录"></a>cmake创建目录</h3><blockquote><p>参考 <a href="https://stackoverflow.com/questions/3702115/creating-a-directory-in-cmake">creating-a-directory-in-cmake</a></p></blockquote><ul><li><p>生成编译目录时创建</p><blockquote><p>我理解是<code>cmake ..</code>时创建。</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">file</span>(<span class="hljs-keyword">MAKE_DIRECTORY</span> <span class="hljs-variable">$&#123;directory&#125;</span>)<br></code></pre></td></tr></table></figure></li><li><p>编译时创建</p><blockquote><p><code>make</code>时创建</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_custom_target</span>(build-time-make-directory ALL<br>  <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;CMAKE_COMMAND&#125;</span> -E <span class="hljs-keyword">make_directory</span> <span class="hljs-variable">$&#123;directory&#125;</span>)<br></code></pre></td></tr></table></figure></li><li><p>安装时创建</p><blockquote><p><code>make install</code>时创建</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">install</span>(DIRECTORY DESTINATION <span class="hljs-variable">$&#123;directory&#125;</span>)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术总结</tag>
      
      <tag>CMake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用dotfiles管理配置文件</title>
    <link href="/2020/04/13/using-dotfiles-repo-to-backup/"/>
    <url>/2020/04/13/using-dotfiles-repo-to-backup/</url>
    
    <content type="html"><![CDATA[<p>之前也是无意中看到别的大佬github上的dotfiles仓库了解到dotfiles这个名次，后来专门搜索了一下，其实原理很简单，就是把常用的软件配置文件都集中在一个git仓库里管理备份，然后通过软链接的形式把这些配置文件安放到合适的位置。</p><p>由于那些Unix系统中的配置文件通常以<code>.</code>(英文：dot)开头，以隐藏文件的形式保存在用户的主目录(home目录)下，所以这个仓库被成为<code>dotfiles</code>。</p><p>这和我之前用Dropbox或Google Drive备份配置思路差不多，只不过缺少了<code>ln -s</code>软链接的过程。</p><p>今天趁着搭建Ubuntu下开发环境的机会，我也实践了一把dotfiles管理。其实说实话，像我这种被同事戏称开发前得先治病的强迫症患者，dotfiles真香。</p><p>整理下MacOS和Ubuntu下公用的软件，vim、zsh、git这三个是必需品，以前还备份过Ubuntu Compiz软件的各种特效、主题图标之类的，实在折腾不动了。</p><p>整理完的目录结构大致如下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dotfiles<br>├── README<span class="hljs-selector-class">.md</span><br>├── git<br>│   ├── _git-completion<span class="hljs-selector-class">.bash</span><br>│   └── _gitconfig<br>├── link<span class="hljs-selector-class">.sh</span><br>├── sh<br>│   └── _shrc<span class="hljs-selector-class">.local</span><span class="hljs-selector-class">.bak</span><br>├── vim<br>│   ├── _vimrc<br>│   ├── nvim<br>│   │   └── init<span class="hljs-selector-class">.vim</span><br>│   └── plugins<span class="hljs-selector-class">.vim</span><br>└── zsh<br>    ├── _zshrc<br>    ├── agnoster-rfw<span class="hljs-selector-class">.zsh-theme</span><br>    └── install_zsh_plugins.sh<br></code></pre></td></tr></table></figure><p>git主要就<code>～/.gitconfig</code>文件，这里有一些我的奇怪的alias配置；<code>.git-completion.bash</code>主要防止在某些版本，git之后无法自动补全子命令，需要在终端启动脚本（具体文件和使用终端程序有关）里加载（<code>source</code>）一下。</p><p>sh中的<code>.shrc.local</code>主要是我本地的开发环境有些环境变量的配置，我会在终端的启动脚本里加载，由于这些变量和本机的目录有关，暂时以备份文件的形式，当一个模版使用。</p><p>vim是多年的老伙计了，最近投入了neovim的怀抱，有些配置为了兼容还是保留在<code>.vimrc</code>里；neovim的默认启动脚本为<code>~/.config/nvim/init.vim</code>，这里简单处理加载了vim的环境信息;<code>plugins.vim</code>是我自己使用插件的合集，用于<code>vim-plug</code>插件管理器读取，vim第一次运行时就会自动下载安装<code>plugins.vim</code>中的插件。</p><p>zsh也是最近新欢，比老伙计<code>bash</code>多了很多贴心功能，而且主题皮肤很多（适合我这种闷骚的强迫症），<code>.zshrc</code>是其主要配置文件，<code>agnoster-rfw.zsh-theme</code>是我修改的<code>agnoster</code>主题，<code>install_zsh_plugins.sh</code>包含了著名zsh插件组合<code>oh-my-zsh</code>、<code>zsh autosuggestions</code>、<code>zsh syntax highlighting</code>插件安装的命令。</p><p><code>link.sh</code>就是我简单写的<code>ln -s</code>命令合集，需要<code>sudo ./link.sh</code>执行，实现功能就是将各个文件放置到合适的目录中去，做的好一些的话可以添加一些交互式操作，让用户选择链接哪些文件，以后再完善吧。</p><p>我的dotfiles仓库地址如下：<a href="https://github.com/wuruofan/dotfiles.git">dotfiles.git</a>，基本可以即开即用。</p><p>以Ubuntu 18.04为例。</p><ol><li>vim</li></ol><p>推荐安装<code>neovim</code>，使用上和vim普通没有什么区别，有些neovim专用的插件。使用<code>sudo apt-get install neovim</code>安装。</p><p>由于第一次运行会执行<code>curl</code>去下载<code>vim-plug</code>插件管理器，因此，还需要事先执行<code>sudo apt-get install curl</code>安装。</p><p>另外，插件中包含自动补全代码的神器<code>YouCompleteMe</code>需要python3.6支持，在第一次运行完<code>nvim</code>&#x2F;<code>vim</code>安装完插件后，建议完成YCM的安装。</p><p>首先执行<code>sudo apt-get install python3.6 python3.6-dev</code>安装所需依赖。 然后<code>cd ~/.vim/bundle/YouCompleteMe</code>，执行<code>./install.py --clang-completer</code>，如不需要<code>clang</code>支持，可以不加入参数。</p><p>vim的配置文件中的一些按键设置，可以按需修改<code>_vimrc</code>文件。</p><ol start="2"><li>zsh</li></ol><p>运行<code>sudo apt-get install zsh</code>安装zsh程序，然后执行<code>sudo chsh -s /bin/zsh</code>将默认终端程序替换成zsh，重启或者退出当前用户重登录即可。</p><p>正常情况这里就OK了，使用<code>echo $SHELL</code>查看当前运行的shell程序是什么。</p><p>我今天遇到个奇怪的问题就是<code>chsh</code>始终没法替换成功，一直是bash无法改变。</p><p>在stackoverflow上看到有个答案，可以修改<code>/etc/passwd</code>文件，把包含当前登录用户名的那一行最后<code>/bin/bash</code>改成<code>/bin/zsh</code>，重启电脑即可。</p><ol start="3"><li>git</li></ol><p>建议修改<code>_gitconfig</code>中用户名邮箱相关，主要是些alias别名配置，我比较懒，所以大多数子命令都用两个字母缩写。</p><p>以上，就是今天的dotfiles初探，以后再补充其他配置。</p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
      <tag>dotfiles</tag>
      
      <tag>git</tag>
      
      <tag>zsh</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VPS搭建WordPress博客全记录</title>
    <link href="/2020/04/11/how-to-build-a-wordpress-blog-site/"/>
    <url>/2020/04/11/how-to-build-a-wordpress-blog-site/</url>
    
    <content type="html"><![CDATA[<p>之前小黑在半闲置的<code>VPS</code>（Virtual Private Server虚拟专用服务器）上搭了个WordPress博客“小黑杂说”（<a href="wuruofan.com">wuruofan.com</a>），记录下这次建站的大致过程。</p><p>总的来说，建站本身并不是很难的一件事情，相比之下，找到建站的理由、搞清楚为何而“站”这件事，其实更难一些。</p><p>就我个人来说，除去人生阶段的转换带来的紧迫感、动力和反思之外，最近在读的几本书（《mactalk：人生元编程》、《前方的路》、《Google工作整理术》、《程序员的成长课》、《程序员必读的职业规划书》）也让我有了搭建一个个人主页的想法。当然，小伙伴的离职、项目上的压力、原领导的调动，这些事情也是一部分促因吧。</p><p>正如《Google工作整理术》一书中所说，我现在相信“<strong>知识不是力量，共享知识才是力量</strong>”。</p><h3 id="0x00-开始之前"><a href="#0x00-开始之前" class="headerlink" title="0x00 开始之前"></a>0x00 开始之前</h3><p>由于之前我在<a href="vultr.com">Vultr</a>上已有一个半闲置的VPS主机，选的是最便宜那种，3.5刀&#x2F;月、10 GB SSD存储、单核vCPU、512 MB内存、500GB带宽的贫穷配置，之前操作系统为CentOS 7 x64。</p><p>Vultr性价比较高，支持支付宝，按小时计费，全球机房，迁移机房和<a href="bandwagonhost.com">搬瓦工</a>相比似乎收费的，新人优惠送的金额可以用来多建几个VPS试试IP是否存在异常情况（you know why），免费快照记得可以用来迁移虚拟主机的机房，会比直接使用迁移机房功能便宜。当然十分欢迎使用我的<a href="https://www.vultr.com/?ref=8432644-6G" title="vultr邀请链接">邀请链接</a>。</p><h3 id="0x01-LNMP"><a href="#0x01-LNMP" class="headerlink" title="0x01 LNMP"></a>0x01 LNMP</h3><p>与<code>LNMP</code>相对应的是<code>LAMP</code>，都是主流的搭建网站的开源Web框架。</p><blockquote><p>LNMP &#x3D; Linux+Nginx+Mysql+PHP</p><p>LAMP &#x3D; Linux+Apache+Mysql+PHP</p></blockquote><p>不同点就在于<code>Nginx</code>和<code>Apache</code>之间。Apache可以说是传统主流服务器选项，“老大哥”，时至今日仍是世界上使用排名第一的服务器软件，详细数据见<a href="https://w3techs.com/technologies/comparison/ws-apache,ws-microsoftiis,ws-nginx" title="Comparison of the usage statistics of Apache vs. Nginx vs. Microsoft-IIS for websites">Comparison of the usage statistics of Apache vs. Nginx vs. Microsoft-IIS for websites</a>。稳定、擅长处理动态请求、模块众多，Apache是负载PHP的Web服务器最佳选择。</p><p>和<code>Nginx</code>相比最大的区别就在于响应请求时<code>Apache</code>是同步，而Nginx是异步处理。因此，在处理高并发请求时，Nginx消耗的资源更少，响应更快。这也是其设计的初衷之一。轻量级、善于处理静态请求、支持反向代理等这些都是Nginx的优点。</p><p>但是对我来说，消耗的资源少这一点就足够了。毕竟只是个个人博客，毕竟自己是个乞丐版的VPS。（是的，真的是这样子的，LAMP的一键安装脚本竟然编译出错，好像是内存不足，我还特意配置了swap分区。苦涩。ðððð）</p><h4 id="0x01a-LNMP安装"><a href="#0x01a-LNMP安装" class="headerlink" title="0x01a LNMP安装"></a>0x01a LNMP安装</h4><p>我选择的是一键安装脚本，过程详细参见其主页<a href="https://lnmp.org/">lnmp.org</a>。</p><p>由于安装时间过长，通常ssh登录VPS会因为网络波动断开连接，强烈建议使用<code>screen</code>工具进行安装。详细参见<a href="https://www.vpser.net/manage/screen.html" title="screen教程">screen教程</a>。</p><p>Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，我们这里利用的就是会话的保存恢复功能。</p><ol><li><p>首先，使用<code>screen -S lnmp</code> 创建名为<code>lnmp</code>的screen会话，一旦网络断开重连，可以使用<code>screen -r lnmp</code>进行恢复。</p></li><li><p>然后，下载并执行安装脚本。</p></li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://soft.vpser.net/lnmp/lnmp1.<span class="hljs-number">7</span>.tar.gz -cO lnmp1.<span class="hljs-number">7</span>.tar.gz &amp;&amp; tar zxf lnmp1.<span class="hljs-number">7</span>.tar.gz &amp;&amp; cd lnmp1.<span class="hljs-number">7</span> &amp;&amp; ./install.sh lnmp<br></code></pre></td></tr></table></figure><ol start="3"><li>之后一路默认选项安装，除了在<code>MySQL</code>安装时需要设置默认数据库<code>root</code>账户的密码（需牢记）之外，还有几点不太一样。<ul><li><code>PHP</code>选择<code>7</code>以上版本，目的和WordPress兼容，暂时不要选择<code>7.4.4</code>版本，目前（2020年4月）最新WordPress有些问题。</li><li>最后会提示是否安装<code>Memory Allocator</code>，PHP的内存分配插件，这个我好像随便选了一个，忘记了ð¤¦，可能是<code>Jemalloc</code>。这里选默认不安装也没关系，可以之后使用插件脚本按需安装。</li></ul></li></ol><p>然后，就是漫长的等待，大概20分钟，安装完成后终端会输出安装信息和运行信息。若是看到</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Nginx</span><span class="hljs-punctuation">: </span>OK<br><span class="hljs-attribute">MySQL</span><span class="hljs-punctuation">: </span>OK<br><span class="hljs-attribute">PHP</span><span class="hljs-punctuation">: </span>OK<br><span class="hljs-attribute">PHP-FPM</span><span class="hljs-punctuation">: </span>OK<br></code></pre></td></tr></table></figure><p>和各个服务<code>is running</code>就说明安装成功了。这是浏览器地址栏输入VPS的IP地址应该就会显示一个<code>LNMP一键安装包</code>的介绍页面，这个页面的相关内容在目录<code>/home/wwwroot/default/</code>。</p><h4 id="0x01b-插件安装"><a href="#0x01b-插件安装" class="headerlink" title="0x01b 插件安装"></a>0x01b 插件安装</h4><p>在执行上面第二条命令的目录下生成<code>lnmp1.7</code>目录，目录中有个名为<code>addons.sh</code>的脚本，用于安装PHP相关插件。安装或卸载命令如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">./addons.sh </span><span class="hljs-template-variable">&#123;installuninstall&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;eacceleratorxcachememcachedopcacheredisapcuimagemagickioncube&#125;</span><span class="language-xml"> </span><br></code></pre></td></tr></table></figure><p>我安装了缓存插件<code>memcached</code>。执行<code>./addons.sh install memcached</code>，然后 选择 2 （<code>php-memcached</code>），等待安装成功即可。</p><h4 id="0x01c-其他命令"><a href="#0x01c-其他命令" class="headerlink" title="0x01c 其他命令"></a>0x01c 其他命令</h4><p>在其官网和<a href="https://github.com/licess/lnmp/blob/master/readme.md" title="LNMP on GitHub">GitHub README说明</a>中都有一些管理命令，常用摘录如下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">LNMP<span class="hljs-regexp">/LNMPA/</span>LMAP状态管理：lnmp &#123;startstopreloadrestartkillstatus&#125;<br><br>Nginx状态管理：lnmp nginx或<span class="hljs-regexp">/etc/i</span>nit.d/nginx &#123;startstopreloadrestart&#125;<br><br>MySQL状态管理：lnmp mysql或<span class="hljs-regexp">/etc/i</span>nit.d/mysql &#123;startstoprestartreloadforce-reloadstatus&#125;<br><br>MariaDB状态管理：lnmp mariadb或<span class="hljs-regexp">/etc/i</span>nit.d/mariadb &#123;startstoprestartreloadforce-reloadstatus&#125;<br><br>PHP-FPM状态管理：lnmp php-fpm或<span class="hljs-regexp">/etc/i</span>nit.d/php-fpm &#123;startstopquitrestartreloadlogrotate&#125;<br><br>PureFTPd状态管理：lnmp pureftpd或<span class="hljs-regexp">/etc/i</span>nit.d/pureftpd &#123;startstoprestartkillstatus&#125;<br></code></pre></td></tr></table></figure><h3 id="0x02-域名申请与绑定"><a href="#0x02-域名申请与绑定" class="headerlink" title="0x02 域名申请与绑定"></a>0x02 域名申请与绑定</h3><p>我个人名字的域名是在<code>GoDaddy</code>上申请的，因为印象中这是最大的域名托管平台，后来才知道还有一个<a href="https://www.namesilo.com/">NameSilo</a>，国内就选阿里的万网或者腾讯云之类的，只不过国内域名申请需备案，而我懒得折腾。而且GoDaddy这个域名我总觉得有娃在后面督促我努力工作。</p><p>GoDaddy一般都有优惠，但是这个网站似乎有点杀熟的倾向。比如你在上面搜索过几次心仪的域名，有可能会出现域名地址价格不相同的情况，可能会越来越贵，比如我的域名有一天半夜2点哄睡娃去搜是第一年20元、第二年100+；白天我再去搜索价格就变化了，而且一旦你使用了别的网站提供的优惠折扣信息，cookies里似乎会存储相关数据，这样价格一直就是别人折扣码的价格了，你只能用无痕模式&#x2F;隐私模式重新登陆，才能看到最初的优惠价格。总之，十分迷。</p><p>不管怎么样，选择好了域名后，可以选择支付宝支付，还算比较方便。</p><p>上一步中完成了<code>LNMP</code>的安装，已经可以在浏览器里访问VPS的IP地址了，我们可以在GoDaddy的管理界面绑定IP和域名。</p><p>登陆GoDaddy管理界面，点击<code>DNS</code>进入域名解析管理界面，点击<code>ADD</code>添加一条DNS信息，这里选择<code>Type</code>为<code>A</code>，即IP指向，<code>Host</code>填之前购买的域名，<code>Points to</code>填VPS的IP地址，<code>TTL</code>默认缓存时间为1小时，然后点击<code>SAVE</code>即可。一般1～2分钟即可生效。</p><p>建议添加两条，同时保证无www前缀的网址和有www前缀网址的访问，以防遇到和我一样在更新Let’s Encrypt证书时遇到DNS解析失败的问题。</p><table><thead><tr><th align="center">类型</th><th align="center">名称</th><th align="center">值</th><th align="center">TTL</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">@</td><td align="center">vps ip</td><td align="center">1&#x2F;2 小时</td></tr><tr><td align="center">CNAME</td><td align="center">www</td><td align="center">@</td><td align="center">1&#x2F;2 小时</td></tr></tbody></table><p>其中<code>@</code>表示无www前缀的域名，<code>www</code>表示完整域名，意思就是添加一条<code>A</code>记录 将域名指向你的vps ip地址，然后添加了一个<code>CNAME</code>别名，指向完整域名。</p><p>这样就完成域名的绑定工作。现在浏览器输入域名应该就可以显示上一步LNMP安装成功后的网页了。关于添加DNS时，Type一栏里的<code>A</code>（IP指向）、<code>CNAME</code>（别名指向）、<code>NS</code>（域名解析记录）等不同类别的区别可以参见网页<a href="https://itbilu.com/other/relate/EyxzdVl3.html" title="DNS域名解析中A、AAAA、CNAME、MX、NS、TXT、SRV、SOA、PTR各项记录的作用">DNS域名解析中A、AAAA、CNAME、MX、NS、TXT、SRV、SOA、PTR各项记录的作用</a>。</p><h3 id="0x03-WordPress安装"><a href="#0x03-WordPress安装" class="headerlink" title="0x03 WordPress安装"></a>0x03 WordPress安装</h3><h4 id="0x03a-添加虚拟主机"><a href="#0x03a-添加虚拟主机" class="headerlink" title="0x03a 添加虚拟主机"></a>0x03a 添加虚拟主机</h4><p>在WordPress安装之前，我们还需要向LNMP添加虚拟主机，配置LNMP相关设置。</p><p>执行<code>lnmp vhost add</code>完成相关操作，按提示输入：</p><ul><li>主机域名（wuruofan.com&#x2F;<a href="http://www.wuruofan.com)/">www.wuruofan.com）</a></li><li>网站文件默认存储路径（使用默认&#x2F;home&#x2F;wwwroot&#x2F;wuruofan.con&#x2F;即可）</li><li>选择是否使用rewrite规则（使用，并设置默认rewrite规则为wordpress）</li><li>是否使能PHP pathinfo功能（y）</li><li>是否使用访问日志（y）和默认位置（默认即可）</li><li>是否创建MySQL数据库和同名管理员账户（我这里选择了n，后面我会自己创建，如果没有特殊需求可以按提示选y）</li><li>是否添加SSL证书（y，然后选择2，使用<code>Let&#39;s Encrypt</code>提供的SSL证书，这里会影响后面的全站https）</li></ul><p>之后按回车等待安装完成即可。</p><h4 id="0x03b-MySQL数据库创建"><a href="#0x03b-MySQL数据库创建" class="headerlink" title="0x03b MySQL数据库创建"></a>0x03b MySQL数据库创建</h4><p>在命令行输入<code>mysql -u root -p</code>，按照提示输入数据库root账户密码登陆。</p><p>然后执行<code>create database wordpress;</code>创建名为wordpress的数据库，创建成功会出现如下提示。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; create database wordpress;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">1</span> row affected (<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sec)<br></code></pre></td></tr></table></figure><p>最后输入<code>exit</code>退出数据库管理程序。</p><blockquote><p><strong>注意</strong>： 如果不小心，像小黑后来一样忘记了<code>mysql</code>数据库的<code>root</code>密码，重试了一下午也没试出来，不妨看看<code>/home/wwwroot/www.xxxx.com/wp-config.php</code>。</p></blockquote><h4 id="0x03c-安装WordPress"><a href="#0x03c-安装WordPress" class="headerlink" title="0x03c 安装WordPress"></a>0x03c 安装WordPress</h4><p>下面才是真正的WordPress安装过程，也就是著名的5分钟安装。</p><ul><li>创建网站目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/wwwroot/<br><span class="hljs-built_in">mkdir</span> www.wuruofan.com<br></code></pre></td></tr></table></figure><ul><li>下载最新安装包并解压</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 回到home目录</span><br>cd ~<br><br><span class="hljs-comment"># 获取最新安装包</span><br>wget https:<span class="hljs-regexp">//</span>cn.wordpress.org/latest-zh_CN.tar.gz<br><br><span class="hljs-comment"># 解压到当前目录</span><br>tar -zxvf latest-zh_CN.tar.gz<br><br><span class="hljs-comment"># 将解压后文件内容移动到网站根目录下</span><br>mv wordpress<span class="hljs-regexp">/* /</span>home<span class="hljs-regexp">/wwwroot/</span>wuruofan.com/<br><br></code></pre></td></tr></table></figure><p>这里以防后面可能会出现的乱七八糟权限问题，还需要修改网站根目录的读写权限和用户归属。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 修改网站根目录的读写权限（所有人可读可访问、仅所有者可以更改）</span><br>chmod -R <span class="hljs-number">755</span> <span class="hljs-regexp">/home/</span>wwwroot<span class="hljs-regexp">/www.wuruofan.com/</span><br><br><span class="hljs-comment"># 修改网站根目录所有者为www用户组</span><br>chown -R www <span class="hljs-regexp">/home/</span>wwwroot<span class="hljs-regexp">/www.wuruofan.com/</span><br></code></pre></td></tr></table></figure><p>这里可能会提示，<code>.user.ini</code>文件的权限和用户无法修改，需要执行<code>chattr -i /home/wwwroot/www.wuruofan.com/.user.ini</code>，修改该文件为可修改，再执行上面操作即可。</p><ul><li>配置你的网站</li></ul><p>这时已经可以通过浏览器输入域名去执行下一步的配置工作。</p><p>这时你需要准备好之前创建的数据库信息，再网站页面配置数据库名、数据库用户、数据库密码、表名等信息。</p><p>根据提示输入信息即可，最后会跳转页面，输入网站名称、账户名称、密码等信息，之后就大功告成，你也拥有了一个个人博客站点了！</p><h3 id="0x04-其他"><a href="#0x04-其他" class="headerlink" title="0x04 其他"></a>0x04 其他</h3><h4 id="0x04a-全站HTTPS"><a href="#0x04a-全站HTTPS" class="headerlink" title="0x04a 全站HTTPS"></a>0x04a 全站HTTPS</h4><p>简单的推荐使用插件<code>Really Simple SSL</code>。注意，<strong>一定要搭建完成后先做</strong>，不然会遇到一些奇奇怪怪的问题！会影响google&#x2F;baidu的站点收录。</p><p>比如已发表的博客上的多媒体资源链接默认是http的，如果你先发表博客然后再做全站https的操作，就会出现<code>mixed content errors</code>错误，通常解决方案就是通过搜索替换数据库中http相关内容去解决，可以用插件<code>Better Search Replace</code>或者<code>SSL 不安全内容修复器</code>去解决。</p><p>我当时配置全站HTTPS的时候绕了点弯路，手工配置的，简直头秃，推荐阅读<a href="https://www.wpbeginner.com/wp-tutorials/how-to-add-ssl-and-https-in-wordpress/" title="How to Properly Move WordPress from HTTP to HTTPS (Beginner&#39;s Guide">How to Properly Move WordPress from HTTP to HTTPS (Beginner’s Guide)</a>，文章介绍了使用插件和手工配置两种方式。</p><h4 id="0x04b-主题选择"><a href="#0x04b-主题选择" class="headerlink" title="0x04b 主题选择"></a>0x04b 主题选择</h4><p>WordPress的主题茫茫多，本着简洁就是美和能少设置一项是一项（懒）的原则，我选择了MDx主题<a href="https://mdx.flyhigher.top/" title="MDx：轻于形，悦于心">MDx：轻于形，悦于心</a>，这是一款采用Material Design 风格 WordPress 主题，必须给个好评。</p><p>除了好看之外，主题还自带了移动端网页、夜间模式切换、延迟加载、SEO设置、ImageBox、微信微博等社交媒体分享图片生成等等，但是也带来一些意想不到的问题，主要原因是会和WordPress一些插件的功能冲突。</p><p>比如MDx主题自带的Lazyload功能和WordPress官方的Jetpack插件中的相关功能可能会有冲突，从而导致页面上的图片显示不太正常，我把Jetpack里的功能关闭了，记得当时生成分享到社交媒体的二维码图片时遇到过图片无法显示的问题，好像就是这个原因；还有SEO设置，如果有其他插件，就不要在主题设置里去配置了。</p><p>MDx主题里有些特别细小的点，我很喜欢，比如页脚格言，可以使用一言API。</p><h4 id="0x04c-文末版权声明"><a href="#0x04c-文末版权声明" class="headerlink" title="0x04c 文末版权声明"></a>0x04c 文末版权声明</h4><p>通常我们在其他网站看帖子的时候总会看一些版权声明，建议大家也加上。在WordPress的设置里可以加，我选择在MDx主题的<code>文末信息</code>里添加如下HTML代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;open-message&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:#eeeeee 1px solid;border-radius:5px 5px 5px 5px;padding-left:5px; padding-righ5:5px&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-bullhorn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Copyright <span class="hljs-symbol">&amp;copy;</span> 2019<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>()&gt;<span class="hljs-number">2019</span>&amp;&amp;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>());</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://wuruofan.com&quot;</span>&gt;</span>小黑杂说<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>. All Rights Reserved.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>版权声明<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>：除非注明，文章均为原创！<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span>本网站采用<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;BY-NC-SA 授权协议&quot;</span>&gt;</span>BY-NC-SA<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>协议进行授权，转载请以链接形式标明本文地址：--PostURL--.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="0x04d-插件列表"><a href="#0x04d-插件列表" class="headerlink" title="0x04d 插件列表"></a>0x04d 插件列表</h4><p>WordPress的插件也是茫茫多，这里记录下使用中的一些插件以防万一。</p><ul><li><p>Jetpack：WordPress官方增强功能</p></li><li><p>Akismet Anti-Spam：反垃圾评论，要和Jetpack连接使用</p></li><li><p>Better Search Replace：替换数据库中信息</p></li><li><p>Really Simple SSL：一键开启HTTPS</p></li><li><p>SSL 不安全内容修复器：修复页面中混杂http和https的问题</p></li><li><p>Redirection：管理网站的301重定向页面和404页面，之前手工重定向http主页到https主页时用的</p></li><li><p>Google XML Sitemaps：Google站点地图，用于Google搜索收录</p></li><li><p>百度搜索推送管理： 百度搜索收录相关</p></li><li><p>多合一SEO包：设置搜索引擎相关关键字信息</p></li><li><p>Rename wp-login.php：重命名WordPress登陆页面地址，以防被别人暴力登陆</p></li><li><p>WP Super Cache：快速缓存插件</p></li><li><p>WP Alu2Button：MDx主题评论区表情需要使用的插件</p></li><li><p>WP-Optimize - Clean, Compress, Cache：WordPress站点优化插件</p></li><li><p>Wordfence Security &amp; Wordfence Assistant：安全插件，不太会用，开启后我的梯子无法正常工作，看iptables里似乎追加了配置，目前暂未使用。</p></li><li><p>UpdraftPlus-备份&#x2F;恢复：必须有姓名！我的命都是它给的（破音）！免费版也支持备份到云盘，我选择每周备份一次到Dropbox！</p></li><li><p>PHP Compatibility Checker：php版本兼容性检查</p></li></ul><h4 id="0x04e-PHP更新"><a href="#0x04e-PHP更新" class="headerlink" title="0x04e PHP更新"></a>0x04e PHP更新</h4><p>由于种种原因和骚操作，我不得不重装LNMP和WordPress，<del>顺便检查一下之前的过程记录是不是有问题，</del>在我装完最新版WordPress进入设置页面时，提示我升级到更安全的PHP版本。</p><p>LNMP安装脚本里的php是<code>5.6.10</code>，而目前最新版本已经是<code>7.4.4</code>了，LNMP的安装目录下提供了<code>upgrade.sh</code>升级脚本，运行即可升级各种组件。</p><p><strong>注意</strong>，这里请不要想我之前一样，直接升级最新版本，导致一会儿找不到<code>php-fpm</code>一会儿nginx启动不了等等问题，我不得不再次重装同时再检查一下之前的过程记录是不是有问题。</p><p><strong>注意</strong>，重装LNMP时也不要再安装时选择最新版php，虽然LNMP1.7的安装脚本已经支持安装<code>7.4.4</code>版本的php，也会无法启动，不要问我怎么知道的。</p><p>正确的做法是安装上面提到的插件<code>PHP Compatibility Checker</code>，检查当前WordPress程序、插件及主题，和php哪个版本兼容，目前看这个插件支持检测<code>7.0</code>～<code>7.3</code>版本，检测完成之后，再去执行<code>./upgrade.sh php</code>选择相应版本号升级，最终我选择了<code>7.0</code>版本，才结束我的重装之旅。吐血！</p><h4 id="0x04f-HTTPS证书过期"><a href="#0x04f-HTTPS证书过期" class="headerlink" title="0x04f HTTPS证书过期"></a>0x04f HTTPS证书过期</h4><p>HTTPS证书的有效期是90天，我的站点证书过期，而网上找的教程又不符合我的情况，一阵操作猛如虎的我，果然成功，把网站搞崩溃了。</p><p>其实LNMP的官网上有说明的帖子<a href="https://lnmp.org/notice/fix-certbot-renew.html" title="建议用户更新Let&#39;sEncrypt SSL证书续期规则">建议用户更新Let’sEncrypt SSL证书续期规则</a>，只是也比较早期了，但本质没变化。</p><blockquote><p>自动更新命令：wget -O - <a href="http://soft.vpser.net/lnmp/ext/fix/_renewssl.shbash">http://soft.vpser.net/lnmp/ext/fix\_renewssl.shbash</a> 也可以直接升级到1.5使用acme.sh生成证书，wget <a href="http://soft.vpser.net/lnmp/lnmp1.5beta.tar.gz">http://soft.vpser.net/lnmp/lnmp1.5beta.tar.gz</a> -O lnmp1.5beta.tar.gz &amp;&amp; tar zxf lnmp1.5beta.tar.gz &amp;&amp; cd lnmp1.4 &amp;&amp; .&#x2F;upgrade1.x-1.5.sh ssl</p></blockquote><p>重点就是更新<code>crontab</code>加入定时任务去更新证书，旧版使用<code>certbot</code>或者新版<code>acme.sh</code>更新证书。</p><p>之前出问题估计是我的VPS又装了其他服务，导致<code>crontab</code>出了问题，正常安装完LNMP之后，使用<code>crontab -l</code>可以看到如下配置<code>44 0 * * * &quot;/usr/local/acme.sh&quot;/acme.sh --cron --home &quot;/usr/local/acme.sh&quot; &gt; /dev/null</code>，即每天0点44分执行一次，证书过期会自动申请。</p><h3 id="0x05-最后"><a href="#0x05-最后" class="headerlink" title="0x05 最后"></a>0x05 最后</h3><p>这篇文章拖拖拉拉的，中间又遇到几个月的频繁出差深夜加班就耽搁了。等到再次下决心把它写完的时候突然发现网站证书过期了，php版本过高，Let’s Encrypt证书申请太频繁限制次数不能申请的一堆乱七八糟问题，折腾来折腾去wordpress重装了好几次，我也崩溃了好几回，不过换个角度，也算重复多次检验了文章内容的可靠性，顺便补了些截图。还好当初装了Updraft备份插件，真心好评。</p><p>这次给我的教训就是，写东西时一开始的规划就要简短，尽可能一次写完，太长了自己容易泄劲，再一忙又失去动力，我现在算是理解网文小说为何如此容易鸽了。</p><p>路漫漫，加油。</p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>build a website</tag>
      
      <tag>lnmp</tag>
      
      <tag>vps</tag>
      
      <tag>wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从rm -rf误删文件说起</title>
    <link href="/2019/10/04/about-rm-delete-by-mistake/"/>
    <url>/2019/10/04/about-rm-delete-by-mistake/</url>
    
    <content type="html"><![CDATA[<p>　　相信前两天发生的友部门同事误删项目代码的事情，很多人都知道了。这件事情幸好不是发生在我们小部门，不然又会被领导说我们不专业。<br>　　墨菲定律告诉我们，有概率发生的事情就一定会发生。<br>　　误删文件这种事情发生其实不是最惨的，最惨的是删掉的项目代码在开发的几个月里居然没有用任何代码管理软件进行提交备份！（这种事情在我参与的项目中是不太可能的，在基本功能实现后就会纳入版本管理，服务器建立仓库，因为如果只是本地管理，其实也没有太多意义，毕竟<code>rm -rf *</code>了。）<br>　　这种令人扼(xi)腕(wen)叹(le)息(jian)的事情发生之后，<strong>我们应该反思自己做的是否足够好，我们还能做些什么避免这些事情发生在自己身上，或者假使这种事情真的发生在我们身上我们能做些什么让损失降到最小</strong>。</p><h3 id="首先要反思我们是否做的足够好。"><a href="#首先要反思我们是否做的足够好。" class="headerlink" title="首先要反思我们是否做的足够好。"></a>首先要反思我们是否做的足够好。</h3><p>　　<code>rm</code>命令是<code>Unix</code>系列操作系统中用于<code>删除文件</code>的命令行指令，是英文remove的简写，通常搭配的参数有<code>-r</code>、<code>-i</code>、<code>-f</code>、<code>-v</code>，命令格式微<code>rm [参数] [文件名以空格分隔的一组文件名通配符]</code>。</p><ul><li><code>r</code>对应<code>recursive递归</code>，用于递归删除目录下所有子目录和其中包含的文件。</li><li><code>i</code>对应<code>inform提示</code>，会在删除前提示用户输入<code>y/n</code>，确认是否删除。</li><li><code>f</code>对应<code>force强制</code>，这个比较粗鲁，会之间忽略任何错误提示强制执行删除操作。</li><li><code>v</code>对应<code>verbose详细</code>，会在执行命令时输出详细信息，很多命令都有这个参数。</li></ul><p>　　这些常用参数中<code>r</code>参数最常用，<code>f</code>参数危险性最大，<code>i</code>参数最没有存在感但却是很有用的参数。<br>　　<code>rf</code>参数搭配上通配符<code>*</code>威力十分强劲，有些不好习惯的朋友若是沉迷<code>root</code>用户或者热爱<code>sudo</code>，那么一个回车下去，大罗神仙也阻止不了了。要是这时候你又加上了<code>v</code>参数，你就可以体验到一个个文件排队死给你看的绝望了，这时的你可能会嘴里喷出f开头的单词，然后表示再也不用<code>f</code>参数了。<br>　　所以，**<code>f</code>参数一定要慎用，用之前一定要问自己两个问题，我到底是在做什么操作，这个操作没有<code>f</code>参数行不行。**另外，涉及<code>root</code>权限的操作也需要慎之又慎，也要问自己一下，不要因为方便，就干啥都<code>su - root</code>或者<code>sudo</code>，一时<code>root</code>一时爽，一直<code>root</code>悔断肠。<br>　　<code>i</code>参数是被忽略的一个参数，在你删除不确定的目录或者文件时，可以加上这个参数。这样，在删除每一个文件时都会询问是否删除，适合强迫证倾向的朋友。有个小技巧是利用<code>Unix</code>系统命令行的<code>alias别名</code>功能，修改<code>~/.bashrc</code>文件，添加<code>alias rm=&#39;rm -i&#39;</code>，然后执行<code>. ~/.bashrc</code>使修改的命令行别名生效，这样执行rm命令就相当于默认带上<code>-i</code>参数了。<br>　　但是要注意一点，即使这样也无法阻拦强力的<code>rm -rf *</code>，可能朋友会问为什么呢？是<code>f</code>参数会覆盖<code>i</code>么？<br>　　其实是这样的，添加别名后的<code>rm -rf *</code>指令相当于<code>rm -i -rf *</code>，命令行处理程序（默认为<code>bash</code>）执行时看到<code>rm</code>后明白，“哦，这是一个删除命令”，接着看到<code>-i</code>，<code>bash</code>就明白了，“原来这家伙不太自信！”再看到<code>-r</code>，“哦，要删目录了”，最后看到<code>f</code>，<code>bash</code>看到这个参数长舒了一口气，“本王就喜欢f了，前面啰啰嗦嗦一大堆最后才说正经事，全干掉全干掉！”<br>　　我们可以了解到<code>bash</code>命令行是按顺序解析参数的，脑袋灵活的朋友可能会提出一个问题，“如果把<code>i</code>参数放到<code>f</code>后面呢？”bingo，是可以弹出提示的。但是<code>alias</code>别名的方法就不太好用了，只能用脚本实现<code>i</code>参数在参数列表最后，这是另外的思路了。</p><h3 id="让我们再来看看能做些什么可以避免这类事情发生。"><a href="#让我们再来看看能做些什么可以避免这类事情发生。" class="headerlink" title="让我们再来看看能做些什么可以避免这类事情发生。"></a>让我们再来看看能做些什么可以避免这类事情发生。</h3><p>　　人生在世总有些事情我们会后悔莫及，正所谓“嫦娥应悔偷灵药，碧海青天夜夜心”，我们有时候就是希望有后悔药或者时光机的存在。<br>　　<code>rm</code>命令不像那些文件管理器中的删除操作，有个专门的“回收站”我们可以找回文件，“要是<code>rm</code>也有回收站功能就好了”，我敢说这绝对不是一个人的心声。这个功能真的可以有。</p><p>　　<code>trash-cli</code>工具就在命令行提供了类似图形界面的删除文件到回收站的功能，以<code>Ubuntu</code>为例，系统可以通过<code>sudo apt-get install trash-cli</code>命令安装。<br>　　<code>trash-cli</code>提供了如下几个命令。具体使用方法可以参见这篇<a href="https://linux.cn/article-10029-1.html">文章</a>。</p><ul><li><code>trash-put</code>： 删除文件和目录至回收站中。</li><li><code>trash-list</code>：列出回收站中文件和目录。</li><li><code>trash-restore</code>：从回收站中恢复文件或目录 trash。</li><li><code>trash-rm</code>：删除回收站中的文件。</li><li><code>trash-empty</code>：清空回收站</li></ul><p>　　<code>trash-put</code>命令的基本语法和<code>rm</code>类似，因此，我们可以利用上面提到的<code>alias别名</code>技巧，用<code>trash-put</code>替换<code>rm</code>命令，这样我们每一次<code>rm</code>都是将文件删除到回收站中了，怎么样，是不是很兴奋！<br>　　但是先冷静一下，这里还是有可能会有意外会发生，尤其是那些<code>root/sudo</code>的爱好者，由于<code>alias别名</code>我们是定义在当前用户的bash配置脚本中的，一旦使用<code>root/sudo</code>执行，那么<code>rm</code>还是那个<code>rm</code>，该哭的眼泪一滴也不会少。想避免这种情况的发生，我们可以尝试把<code>alias</code>添加到<code>/etc/bash.bashrc</code>文件中，这样就可以在任何用户生效了。注意，编辑该文件也需要<code>root/sudo</code>权限。</p><h3 id="最后我们再来看看万一真的发生了能做些什么把损失降到最低。"><a href="#最后我们再来看看万一真的发生了能做些什么把损失降到最低。" class="headerlink" title="最后我们再来看看万一真的发生了能做些什么把损失降到最低。"></a>最后我们再来看看万一真的发生了能做些什么把损失降到最低。</h3><p>　　在现代计算机系统中，文件在硬盘上的存储格式与硬盘分区格式有关，在我看来，<strong>文件存储的本质是索引</strong>，用户数据以特定的数据结构存储在硬盘上，不管我们用图形界面还是命令行查看到“文件”其实都是对应到硬盘上特定数据结构和数据区域，操作系统的文件删除通常不会直接抹去其对应的存储区域数据内容，而是断开了该“文件”与真实存储区域的索引关系，这样用户就找不到“文件”了。因此，<strong>只要不修改那段特定区域的数据，文件就是有机会恢复的。</strong><br>　　那么，在不小心删除数据之后，我们需要做的<strong>第一件事情一定是保证不再向该文件所在硬盘写入数据！</strong><br>　　通常我们可以选择<code>umount卸载</code>该硬盘分区，或者重新<code>mount挂载</code>为只读分区，如果你不知道或者忘记了命令或者操作，那么<code>关机断电</code>是最明智的选择。那些慌里慌张去浏览器搜索恢复软件、下载安装软件一个个尝试的行为是不可取的，这样有可能会导致操作系统向该文件区域写入数据。<br>　　之后的操作可以选择用<code>LiveCD</code>（操作系统的安装光盘）或者<code>PE U盘</code>进行启动，把当前电脑的硬盘以只读分区挂载。也可以选择把硬盘拆下来找个USB硬盘盒装上，连接到另外的电脑上，以只读形式挂载。<br>　　后面的就是根据出事故的硬盘分区格式选择合适的恢复软件进行操作了。具体能不能完全恢复，还是要看缘分了。如何选择和使用恢复软件可以参见这篇<a href="https://wiki.archlinux.org/index.php/File_recovery#Extundelete">文章</a>。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>　　每天等娃睡了写一点，除去工作上的乱七八糟事情，写了三天总算写完了😂😂，相信能做到上面这几点，<code>rm -rf</code>误删这种事情发生的可能就会小很多，希望这种事情离我们越远越好。<br>　　今天是国庆节，第一篇微信文章，祝祖国生日快乐🎂，祝各位假期愉快！</p>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rm -rf</tag>
      
      <tag>恢复</tag>
      
      <tag>技术总结</tag>
      
      <tag>经验分享</tag>
      
      <tag>误删</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
